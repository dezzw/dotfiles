package assignment2;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.layout.GridPane;

public class BoardPanel extends GridPane implements EventHandler<ActionEvent> {

    private final View view;
    private final Board board;
    
    private Cell selectedCell;

    /**
     * Constructs a new GridPane that contains a Cell for each position in the board
     *
     * Contains default alignment and styles which can be modified
     * @param view
     * @param board
     */
    public BoardPanel(View view, Board board) {
        this.view = view;
        this.board = board;

        // Can modify styling
        this.setAlignment(Pos.CENTER);
        this.setStyle("-fx-background-color: #181a1b;");
        int size = 550;
        this.setPrefSize(size, size);
        this.setMinSize(size, size);
        this.setMaxSize(size, size);

        setupBoard();
        updateCells();
    }


    /**
     * Setup the BoardPanel with Cells
     */
    private void setupBoard(){ // TODO
    	Cell[][] cells = this.board.board;
    	for (int row = 0; row < cells.length; row++) {
    		for (int col = 0; col < cells[row].length; col++) {
    			Cell cell = this.board.board[row][col];
    			cell.setOnAction(this);
    			this.add(cell, col, row);
    		}	
    	}
    }

    /**
     * Updates the BoardPanel to represent the board with the latest information
     *
     * If it's a computer move: disable all cells and disable all game controls in view
     *
     * If it's a human player turn and they are picking a piece to move:
     *      - disable all cells
     *      - enable cells containing valid pieces that the player can move
     * If it's a human player turn and they have picked a piece to move:
     *      - disable all cells
     *      - enable cells containing other valid pieces the player can move
     *      - enable cells containing the possible destinations for the currently selected piece
     *
     * If the game is over:
     *      - update view.messageLabel with the winner ('MUSKETEER' or 'GUARD')
     *      - disable all cells
     */
	protected void updateCells(){ // TODO
    	
    	for (Cell cell : this.board.getAllCells()) {
			cell.setDisable(true);
    		cell.setDefaultColor();
    	}
    	

    	if (this.view.boardPanel != null) {
    		this.view.setUndoButton();
    		this.view.restartButton.setDisable(false);
    		this.view.saveButton.setDisable(false);
    	}
    	
    	
    	if (!this.view.model.isHumanTurn() && this.view.boardPanel != null) {
    		this.view.undoButton.setDisable(true);
    		this.view.restartButton.setDisable(true);
    		this.view.saveButton.setDisable(true);
    	} else if (this.view.model.isHumanTurn() && this.selectedCell != null) {
    		this.selectedCell.setAgentFromColor();
    		for (Cell cell : this.board.getPossibleDestinations(this.selectedCell)) {
    			cell.setDisable(false);
    			cell.setOptionsColor();
    		}
    	} else {
    		for (Cell cell : this.board.getPossibleCells()) {
    			cell.setDisable(false);
    			cell.setOptionsColor();
    		}

    	}
    	
    	this.view.setMessageLabel(String.format("[%s turn] Select a piece", this.board.getTurn().getType()));
    	
    	if (this.board.isGameOver()) {
    		for (Cell cell : this.board.getAllCells()) {
    			cell.setDisable(true);
    			if (!cell.hasPiece()) {
    				cell.setDefaultColor();
    			} else if (cell.getPiece().getType() == this.board.getWinner()) {
    				cell.setWinColor();
    			} else {
    				cell.setLossColor();
    			}
    		}
    		this.view.setUndoButton();
    		this.view.restartButton.setDisable(false);
    		this.view.saveButton.setDisable(false);
    		this.view.setMessageLabel(String.format("%s WON", this.board.getWinner()));
    	}
    	
    }

    /**
     * Handles Cell clicks and updates the board accordingly
     * When a Cell gets clicked the following must be handled:
     *  - If it's a valid piece that the player can move, select the piece and update the board
     *  - If it's a destination for a selected piece to move, perform the move and update the board
     * @param actionEvent
     */
    @Override
    public void handle(ActionEvent actionEvent) { // TODO
    	Cell cell = (Cell) actionEvent.getSource();
    	if (this.board.getPossibleCells().contains(cell)) {
    		this.selectedCell = cell;
    		this.selectedCell.setAgentFromColor();
        	this.updateCells();
    	} else if (this.board.getPossibleDestinations(this.selectedCell).contains(cell)) {
    		this.selectedCell.setAgentFromColor();
    		Move newMove = new Move(this.selectedCell, cell);
    		this.view.model.move(newMove);
    		cell.setAgentToColor();
       		this.selectedCell = null;
       		this.updateCells();
       		if (!this.view.model.isHumansPlaying() && !this.board.isGameOver()) {
        		this.view.runMove();
       		}
    	}
    }
}
