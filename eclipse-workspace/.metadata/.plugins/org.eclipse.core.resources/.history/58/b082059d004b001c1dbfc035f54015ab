package lab09;

import java.security.MessageDigest;

// https://www.baeldung.com/java-md5
public class MD5BreakNumericMT implements Runnable {
	String hash, password;
	int start, end;

	public MD5BreakNumericMT(int start, int end, String hash) {
		this.start = start;
		this.end = end;
		this.hash = hash;
		this.password = null;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		breakMT();
	}

	// Rewrite the MD5Numeric class to perform same
	// computation using multithreading
	// Feel free to add other classes as you see fit
	// The console output of this class must be the same as
	// the console output of the given class
	
	public synchronized void breakMT() {
		try {
			MessageDigest md = MessageDigest.getInstance("MD5");

			for (int i = this.start; i < this.end; i++) {
				String newPassword = String.format("%04d", i);
				md.reset();
				md.update(newPassword.getBytes());

				byte[] digest = md.digest();
				String myHash = toHexString(digest);
				System.out.println(newPassword + " " + hash + " " + myHash);
				if (myHash.equals(hash)) {
					this.password = newPassword;
					break;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			System.out.println("Can't find MD5");
		}
	}

	public static String breakMD5MT(String hash, int length) {

		int max = (int) Math.pow(10, length);

		MD5BreakNumericMT[] ms = new MD5BreakNumericMT[length];
		Thread[] ts = new Thread[length];

		int workSize = max / length;
		int start=0, end=workSize;
		for (int i = 0; i < length; i++) {
			if (i == length - 1) {
				end = max;
			}
			ms[i] = new MD5BreakNumericMT(start, end, hash);

			ts[i] = new Thread(ms[i]);
			ts[i].start();

			start = end;
			end += workSize;
		}

		try {
			for(int i=0;i<length;i++){
				ts[i].join();
				if (ms[i].password != null) {
					return ms[i].password;
				}
			}
		} catch (InterruptedException e) {

		}

		return null;
	}

	public static String toHexString(byte[] bytes) {
		StringBuilder hexString = new StringBuilder();
		for (int i = 0; i < bytes.length; i++) {
			String hex = Integer.toHexString(0xFF & bytes[i]);
			if (hex.length() == 1) {
				hexString.append('0');
			}
			hexString.append(hex);
		}
		return hexString.toString();
	}

	public static void main(String[] args) {
		
		long startTime = System.currentTimeMillis();
		
//		System.out.println(breakMD5MT("da3fde159d754a2555eaa198d2d105b2", 4));
		System.out.println(breakMD5MT("25d55ad283aa400af464c76d713c07ad",8));


		long endTime = System.currentTimeMillis();
		System.out.println("That took " + (endTime - startTime) + " milliseconds");
	}
}
