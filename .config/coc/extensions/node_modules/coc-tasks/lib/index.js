(function(e, a) { for(var i in a) e[i] = a[i]; if(a.__esModule) Object.defineProperty(e, "__esModule", { value: true }); }(exports,
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.activate = void 0;
const coc_nvim_1 = __webpack_require__(1);
const tasks_1 = __importDefault(__webpack_require__(2));
const completion_1 = __webpack_require__(3);
const hover_1 = __importDefault(__webpack_require__(5));
function activate(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { nvim } = coc_nvim_1.workspace;
        const { subscriptions } = context;
        const config = coc_nvim_1.workspace.getConfiguration('tasks');
        subscriptions.push(coc_nvim_1.listManager.registerList(new tasks_1.default(nvim)));
        subscriptions.push(coc_nvim_1.languages.registerCompletionItemProvider('coc-tasks', config.get('shortcut'), config.get('filetypes'), new completion_1.TasksMacroCompletionProvider(), config.get('triggerCharacters'), config.get('priority'), []));
        subscriptions.push(coc_nvim_1.languages.registerHoverProvider(config.get('filetypes'), new hover_1.default()));
    });
}
exports.activate = activate;


/***/ }),
/* 1 */
/***/ ((module) => {

module.exports = require("coc.nvim");;

/***/ }),
/* 2 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const coc_nvim_1 = __webpack_require__(1);
class Tasks extends coc_nvim_1.BasicList {
    constructor(nvim) {
        super(nvim);
        this.name = 'tasks';
        this.description = 'CocList for asynctasks.vim';
        this.defaultAction = 'run';
        this.actions = [];
        this.addLocationActions();
        this.addAction('run', (item) => {
            this.nvim.command(`AsyncTask ${item.data.name}`, true);
        });
    }
    loadItems(_context) {
        return __awaiter(this, void 0, void 0, function* () {
            const source = [];
            const loaded_asynctasks = yield this.nvim.eval('exists("*asynctasks#list")');
            if (loaded_asynctasks.valueOf() == 0)
                return [];
            const tasks = yield this.nvim.call('asynctasks#list', ['']);
            for (const task of tasks) {
                if (/^\./.test(task.name))
                    continue;
                source.push({
                    label: `${task.name.padEnd(25)}` + `<${task.scope}>`.padEnd(10) + `:  ${task.command}`,
                    data: task,
                    filterText: task.name,
                    location: coc_nvim_1.Uri.file(task.source).toString()
                });
            }
            return source;
        });
    }
    doHighlight() {
        let { nvim } = coc_nvim_1.workspace;
        nvim.pauseNotification();
        nvim.command('syntax match TaskName /^\\S\\+/', true);
        nvim.command('hi def link TaskName Constant', true);
        nvim.command('syn match TaskScope /\\s\\+<.*>\\s\\+:/', true);
        nvim.command('hi def link TaskScope Type', true);
        nvim.command('syn match TaskCommand /.*/ contains=TaskName,TaskScope', true);
        nvim.command('hi def link TaskCommand Comment', true);
        nvim.resumeNotification().catch(_e => {
            // nop
        });
    }
}
exports.default = Tasks;


/***/ }),
/* 3 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TasksMacroCompletionProvider = void 0;
const coc_nvim_1 = __webpack_require__(1);
const macros_1 = __webpack_require__(4);
class TasksMacroCompletionProvider {
    provideCompletionItems(document, position) {
        return __awaiter(this, void 0, void 0, function* () {
            const prechar = document.getText({
                start: {
                    line: position.line,
                    character: position.character
                },
                end: {
                    line: position.line,
                    character: position.character - 1
                }
            });
            return Object.entries(yield macros_1.genMacros()).map((entry) => {
                let [macro, { description, example }] = entry;
                return {
                    label: macro,
                    kind: coc_nvim_1.CompletionItemKind.Constant,
                    documentation: description + (example != '' ? `\ne.g. \`${example}\`` : ''),
                    insertText: prechar == '$' ? `(${macro})` : macro,
                };
            });
        });
    }
}
exports.TasksMacroCompletionProvider = TasksMacroCompletionProvider;


/***/ }),
/* 4 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.genMacros = void 0;
const coc_nvim_1 = __webpack_require__(1);
const ASYNCTASKS_MACROS = {
    VIM_FILEPATH: {
        description: "File name of current buffer with full path",
        example: "/home/voldikss/naiveproject/main.c"
    },
    VIM_FILENAME: {
        description: "File name of current buffer without path",
        example: "main.c"
    },
    VIM_FILEDIR: {
        description: "Full path of current buffer without the file name",
        example: "/home/voldikss/naiveproject"
    },
    VIM_FILEEXT: {
        description: "File extension of current buffer",
        example: ".c"
    },
    VIM_FILETYPE: {
        description: "File type (value of &ft in vim)",
        example: "c"
    },
    VIM_FILENOEXT: {
        description: "File name of current buffer without path and extension",
        example: "main"
    },
    VIM_PATHNOEXT: {
        description: "Current file name with full path but without extension",
        example: "/home/voldikss/naiveproject/main"
    },
    VIM_CWD: {
        description: "Current directory",
        example: "/home/voldikss/naiveproject"
    },
    VIM_RELDIR: {
        description: "File path relativize to current directory",
        example: "."
    },
    VIM_RELNAME: {
        description: "File name relativize to current directory",
        example: "main.c"
    },
    VIM_CWORD: {
        description: "Current word under cursor",
        example: ""
    },
    VIM_CFILE: {
        description: "Current filename under cursor",
        example: ""
    },
    VIM_CLINE: {
        description: "Cursor line number in current buffer",
        example: ""
    },
    VIM_VERSION: {
        description: "Value of v:version",
        example: "800"
    },
    VIM_SVRNAME: {
        description: "Value of v:servername for +clientserver usage",
        example: "/tmp/nvimfOsenC/0"
    },
    VIM_COLUMNS: {
        description: "How many columns in vim's screen",
        example: ""
    },
    VIM_LINES: {
        description: "How many lines in vim's screen",
        example: ""
    },
    VIM_GUI: {
        description: "Is running under gui ?",
        example: ""
    },
    VIM_ROOT: {
        description: "Project root directory",
        example: "/home/voldikss/naiveproject"
    },
    VIM_DIRNAME: {
        description: "Name of current directory",
        example: "naiveproject"
    },
    VIM_PRONAME: {
        description: "Name of current project root directory",
        example: "naiveproject"
    },
    VIM_PROFILE: {
        description: "Current building profile (debug/release/...)",
        example: "debug"
    },
    VIM_INIFILE: {
        description: "Full path name of current ini (.tasks) file",
        example: ""
    },
    VIM_INIHOME: {
        description: "Where the ini file locates",
        example: ""
    }
};
function genMacros() {
    return __awaiter(this, void 0, void 0, function* () {
        let { nvim } = coc_nvim_1.workspace;
        ASYNCTASKS_MACROS.VIM_INIFILE.example = yield nvim.call('expand', '%:p');
        ASYNCTASKS_MACROS.VIM_INIHOME.example = yield nvim.call('expand', '%:p:h');
        return ASYNCTASKS_MACROS;
    });
}
exports.genMacros = genMacros;


/***/ }),
/* 5 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const coc_nvim_1 = __webpack_require__(1);
const macros_1 = __webpack_require__(4);
class TasksMacroHoverProvider {
    provideHover(document, position) {
        return __awaiter(this, void 0, void 0, function* () {
            const doc = coc_nvim_1.workspace.getDocument(document.uri);
            if (!doc)
                return null;
            const wordRange = doc.getWordRangeAtPosition(position);
            if (!wordRange)
                return null;
            const text = document.getText(wordRange) || '';
            if (!text)
                return null;
            const macros = yield macros_1.genMacros();
            if (!(text in macros))
                return null;
            let { description, example } = macros[text];
            const hover = {
                contents: {
                    kind: 'markdown',
                    value: description + (example != '' ? `\ne.g. \`${example}\`` : ''),
                }
            };
            return hover;
        });
    }
}
exports.default = TasksMacroHoverProvider;


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })()

));