#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
* COMMENT Dumping Emacs
#+begin_src emacs-lisp
;; dump后load-path值，当这个变量为nil时是不会加载pdmp的。
(defvar +dumped-load-path nil
  "Not nil when using dump.")

;; 通过dump启动时的配置
(when +dumped-load-path
  ;;恢复load-path
  (setq load-path +dumped-load-path)
  ;; 修改一下报错等级，这个读者按心意加，不影响dump
  (setq warning-minimum-level :emergency)
  (defun tramp-file-name-method--cmacro (&rest args))
  (require 'tramp)
  (setq tramp-mode 1)
  ;; 一些功能失常的mode，需要重新开启
  (global-font-lock-mode t)
  (meow-esc-mode 1)
  (transient-mark-mode t))

;; 非dump启动方式所需加载的配置
(unless +dumped-load-path
#+end_src
* Native Compilation
 #+begin_src emacs-lisp
    ;; Silence compiler warnings as they can be pretty disruptive
   (setq comp-async-report-warnings-errors nil)
 #+end_src
* Package Management
** Initialize package sources
 #+begin_src emacs-lisp
 ;; Initialize package sources
 (require 'package)

 (setq package-archives '(
			  ("melpa" . "https://melpa.org/packages/")
			  ("melpa" . "http://melpa.milkbox.net/packages/")
			  ("org" . "https://orgmode.org/elpa/")
			  ("elpa" . "https://elpa.gnu.org/packages/")
			  ))

 (package-initialize)
 (unless package-archive-contents
   (package-refresh-contents))

 #+end_src
** Initialize use-package on non-Linux platforms
 #+begin_src emacs-lisp
 ;; Initialize use-package on non-Linux platforms
 (unless (package-installed-p 'use-package)
   (package-install 'use-package))

 (require 'use-package)

 ;; always auto-download from source
 ;; (setq use-package-always-ensure t)
 #+end_src
** Straight.el
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Always use straight to install on systems other than Linux
(setq straight-use-package-by-default t)

;; Use straight.el for use-package expressions
(straight-use-package 'use-package)

;; Load the helper package for commands like `straight-x-clean-unused-repos'
(require 'straight-x)
#+end_src
** COMMENT Auto Update Packages
#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src
* Pathes
** Exact Path on MacOs
 The package is help emacs to find exact path in the shell
 #+begin_src emacs-lisp
   ;; Find Executable Path on OS X
   (use-package exec-path-from-shell
     ;; :init
     ;; (when (memq window-system '(mac ns))
     ;;   (exec-path-from-shell-initialize))
     :config
     (use-package cache-path-from-shell
       :straight nil
       :load-path "~/.emacs.d/site-packages/cache-path-from-shell/")
     (when (memq window-system '(mac ns))
       (exec-path-from-shell-initialize))
     )
 #+end_src
** Update Load Path
#+begin_src emacs-lisp
;; Add my library path to load-path
(push "~/.emacs.d/elisp" load-path)

(push "~/Documents/Org" load-path)
#+end_src
* Auto Doing something
** Stop Backup and "Auto-Save"
 Stop backup and auto-save (save as a backup) made by emacs
 #+begin_src emacs-lisp
 ;; 关闭备份
 (setq make-backup-files nil
       auto-save-default nil)
 #+end_src
** Stop Auto-Change Vertical Scroll Size
 #+begin_src emacs-lisp
 (setq auto-window-vscroll nil)
 #+end_src
** Auto-Reverting Changed Files
 auto allow the outside changes
 #+begin_src emacs-lisp
 (global-auto-revert-mode 1)
 #+end_src
** Auto-Tangle emacs.org File
 Tangle (form a new file) on save
 #+begin_src emacs-lisp
 ;; Since we don't want to disable org-confirm-babel-evaluate all
 ;; of the time, do it around the after-save-hook
 (defun dw/org-babel-tangle-dont-ask ()
   ;; Dynamic scoping to the rescue
   (let ((org-confirm-babel-evaluate nil))
     (org-babel-tangle)))

 (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask
                                               'run-at-end 'only-in-org-mode)))
 #+end_src
** Auto-Saving Changed Files
 The package make emacs auto save the files
 #+begin_src emacs-lisp
 (use-package super-save
   :defer 1
   :diminish super-save-mode
   :config
   (super-save-mode +1)
   (setq super-save-auto-save-when-idle t))
 #+end_src
* UI Setup
** Hide Useless UI
 #+begin_src emacs-lisp
 (setq inhibit-startup-message t)

 (scroll-bar-mode -1)        ; Disable visible scrollbar
 (tool-bar-mode -1)          ; Disable the toolbar
 (tooltip-mode -1)           ; Disable tooltips
 (set-fringe-mode 10)

 (menu-bar-mode -1)            ; Disable the menu bar

 (setq ring-bell-function 'ignore)
 #+end_src
** Frame Transparency and Maximize Windows
 #+begin_src emacs-lisp
 ;; Set frame transparency and maximize windows by default.
 (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
 (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
 (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
 (add-to-list 'default-frame-alist '(fullscreen . maximized))
 #+end_src
** Line Number
 #+begin_src emacs-lisp
 ;; Enalbe column number
 (column-number-mode)

 ;; Enable liner number
 (global-display-line-numbers-mode t)

 ;; Disable line numbers for some modes
 (dolist (mode '(org-mode-hook
                 term-mode-hook
		 vterm-mode-hook
		 shell-mode-hook
                 eshell-mode-hook))
   (add-hook mode (lambda () (display-line-numbers-mode 0))))
 #+end_src
** Fonts
 #+begin_src emacs-lisp
 (defun dw/set-font-faces ()
   (message "Setting faces!")
   ;; set font
   (set-face-attribute 'default nil :font "Victor Mono" :height 140)

   ;; Set the fixed pitch face
   (set-face-attribute 'fixed-pitch nil :font "Victor Mono" :height 140)

   ;; Set the variable pitch face
   (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 175 :weight 'regular))
 #+end_src
** Fonts Ligature
#+begin_src emacs-lisp
  (use-package ligature
    :straight nil
    :load-path "~/.emacs.d/site-packages/ligature.el/"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
					 ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
					 "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
					 "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
					 "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
					 "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
					 "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
					 "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
					 ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
					 "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
					 "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
					 "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
					 "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src
** Icons Support 
 #+begin_src emacs-lisp
 (use-package all-the-icons)
 #+end_src
** Themes
 #+begin_src emacs-lisp
 (use-package doom-themes)

 (use-package nord-theme)

 (use-package lab-themes)
 #+end_src
** Change Theme Based On System Appearance
#+begin_src emacs-lisp
(defun dw/apply-theme (appearance)
  "Load theme, taking current system APPEARANCE into consideration."
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme 'doom-solarized-light t))
    ('dark (load-theme 'doom-one t))))
#+end_src
** Modeline 
 #+begin_src emacs-lisp
 (use-package doom-modeline
   :init (doom-modeline-mode 1)
   :config
   (setq doom-modeline-env-version t))
 #+end_src
** Dashbard
 #+begin_src emacs-lisp
 (use-package dashboard
   :init
   ;; Set the title
   ;; (setq dashboard-banner-logo-title "Code Better, Live Longer!")
   ;; Set the banner
   (setq dashboard-startup-banner "~/.emacs.d/dashboard/banner.txt")
   (setq dashboard-center-content t)
   :config
   (dashboard-setup-startup-hook)
   (setq dashboard-items '((recents  . 7)
                           (projects . 5)
                           ;; To display today’s agenda items on the dashboard
                           (agenda . 5)
                           ))
   ;; To show agenda for the upcoming seven days
   ;; (setq dashboard-week-agenda t)
   ;; To customize which categories from the agenda items should be visible in the dashboard
   ;; (setq dashboard-org-agenda-categories '("Tasks" "Appointments"))
   ;; To show all agenda entries
   ;; (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)
   ;; To have an extra filter
   ;; (setq dashboard-match-agenda-entry nil)

   (setq dashboard-set-heading-icons t)
   (setq dashboard-set-file-icons t)
   (setq dashboard-set-init-info t)
   )
 #+end_src
** Nyan Mode
#+begin_src emacs-lisp
(use-package nyan-mode
 :config
 (setq nyan-mode t)
 :custom
 (nyan-animate-nyancat t)
 (nyan-wavy-trail t)
 )
#+end_src
** Highlight TODOs
#+begin_src emacs-lisp
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :config
  (setq hl-todo-keyword-faces
      '(("TODO"   . "#FF0000")
        ("FIXME"  . "#FF0000")
        ("DEBUG"  . "#A020F0")
        ("NEXT" . "#FF4500")
        ("UNCHECK"   . "#1E90FF")))
  )
#+end_src
** Highligh Numbers
#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))
#+end_src
** UI in Deamon
#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
		;; (load-theme 'doom-one t)
		(add-hook 'ns-system-appearance-change-functions #'dw/apply-theme)
		(dashboard-setup-startup-hook)
                (with-selected-frame frame
                  (dw/set-font-faces))
		(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
		))
  ;; (load-theme 'doom-one t)
  ;; (lab-themes-load-style 'dark)
  (add-hook 'ns-system-appearance-change-functions #'dw/apply-theme)
  (dw/set-font-faces)
  )
#+end_src
* Midnight Mode
#+begin_src emacs-lisp
  (use-package midnight
    :ensure nil
    :config
    (setq midnight-mode 1)
    (setq midnight-period 7200))
#+end_src
* Cl-lib
#+begin_src emacs-lisp
(use-package cl-libify)
#+end_src
* Window Management
** Ace Window
   Use =C-x o= to active =ace-window= to swap the windows (less than two windows), or using following arguments (more than two):
- =x= - delete window
- =m= - swap windows
- =M= - move window
- =c= - copy window
- =j= - select buffer
- =n= - select the previous window
- =u= - select buffer in the other window
- =c= - split window fairly, either vertically or horizontally
- =v= - split window vertically
- =b= - split window horizontally
- =o= - maximize current window
- =?= - show these command bindings
#+begin_src emacs-lisp
(use-package ace-window
  :bind ("C-x o" . ace-window)
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
* File Management
** Dired
 #+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      :straight nil
      :commands (dired dired-jump)
      :bind (("C-x C-j" . dired-jump))
      ;;:config
      ;;(evil-collection-define-key 'normal 'dired-mode-map
      ;;  "d" 'dired-single-up-directory
      ;;  "n" 'dired-single-buffer)
      )

    (use-package dired-single)

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))

    (use-package dired-hide-dotfiles
      :hook (dired-mode . dired-hide-dotfiles-mode)
      ;;:config
      ;;(evil-collection-define-key 'normal 'dired-mode-map
      ;;  "H" 'dired-hide-dotfiles-mode)
      )
 #+end_src
* Keybinding Management
** COMMENT Keybindings by general.el
 #+begin_src emacs-lisp
 (use-package general
   :config
   (general-evil-setup t)

   (general-create-definer dw/leader-key-def
     :keymaps '(normal insert visual emacs)
     :prefix "SPC"
     :global-prefix "C-SPC")

   (general-create-definer dw/ctrl-c-keys
     :prefix "C-c"))
 #+end_src
** Keybinding Panel (which-key)
 #+begin_src emacs-lisp
 (use-package which-key
   :init (which-key-mode)
   :diminish which-key-mode
   :config
   (setq which-key-idle-delay 0.3))
 #+end_src
* Project Management
** Projectile
 #+begin_src emacs-lisp
 (use-package projectile
   :diminish projectile-mode
   :config (projectile-mode)
   :custom ((projectile-completion-system 'ivy))
   :bind-keymap
   ("C-c p" . projectile-command-map)
   :init
   (when (file-directory-p "~Documents/Projects/Code")
     (setq projectile-project-search-path '("~Documents/Projects/Code")))
   (setq projectile-switch-project-action #'projectile-dired))

 (use-package counsel-projectile
   :after projectile
   :config (counsel-projectile-mode))
 #+end_src
* Ivy
** Ivy Mode
 #+begin_src emacs-lisp
 (use-package ivy
   :diminish
   :bind (("C-s" . swiper)
          :map ivy-minibuffer-map
          ("C-l" . ivy-alt-done)
          ("C-n" . ivy-next-line)
          ("C-p" . ivy-previous-line)
          :map ivy-switch-buffer-map
          ("C-p" . ivy-previous-line)
          ("C-l" . ivy-done)
          ("C-d" . ivy-switch-buffer-kill)
          :map ivy-reverse-i-search-map
          ("C-p" . ivy-previous-line)
          ("C-d" . ivy-reverse-i-search-kill))
   :init
   (ivy-mode 1))

 (use-package counsel
   :bind (("M-x" . counsel-M-x)
          ("C-x b" . counsel-switch-buffer)
          ("C-x C-f" . counsel-find-file)
          :map minibuffer-local-map
          ("C-r" . 'counsel-minibuffer-histor))
   :config
   (setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
   )
 #+end_src
** Ivy Rich
 #+begin_src emacs-lisp
 (use-package ivy-rich
   :init
   (ivy-rich-mode 1))
 #+end_src
** Ivy Posframe
 #+begin_src emacs-lisp
   (use-package ivy-posframe
    :config
     (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
     (ivy-posframe-mode 1))
 #+end_src
* Helpful function
** Helpful Function Description
 #+begin_src emacs-lisp
 (use-package helpful
   :ensure t
   :custom
   (counsel-describe-function-function #'helpful-callable)
   (counsel-describe-variable-function #'helpful-variable)
   :bind
   ([remap describe-function] . counsel-describe-function)
   ([remap describe-command] . helpful-command)
   ([remap describe-variable] . counsel-describe-variable)
   ([remap describe-key] . helpful-key))
 #+end_src

* Org Mode
** Org Babel Browser
 Add *HTML* for =org-babel=
 #+begin_src emacs-lisp
 (use-package ob-browser)
 #+end_src
** Config Basic Org mode
 #+begin_src emacs-lisp
 (defun dw/org-mode-setup ()
   (org-indent-mode)
   (variable-pitch-mode 1)
   (visual-line-mode 1))

 (use-package org
   :defer t
   :hook (org-mode . dw/org-mode-setup)
   :config
   (setq org-html-head-include-default-style nil)
   (setq org-ellipsis " ▾"
         org-hide-emphasis-markers nil
         org-src-fontify-natively t
         org-src-tab-acts-natively t
         org-edit-src-content-indentation 0
         org-hide-block-startup nil
         org-src-preserve-indentation nil
         org-startup-folded 'content
         org-cycle-separator-lines 2)
   (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

   (setq org-html-htmlize-output-type nil)

   ;; 图片默认宽度
   (setq org-image-actual-width '(300))

   (setq org-export-with-sub-superscripts nil)

   ;; 不要自动创建备份文件
   (setq make-backup-files nil)

   (require 'init-org-agenda)

   (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (latex . t)
      (java . t)
      (C . t)
      (js . t)
      (css . t)
      (browser . t)
      (R . t)
      (ditaa . t)
      (python . t)))

   (setq org-confirm-babel-evaluate nil)
   (push '("conf-unix" . conf-unix) org-src-lang-modes))
 #+end_src
** Bullets
 #+begin_src emacs-lisp
 ;; change bullets for headings
 (use-package org-bullets
   :after org
   :hook (org-mode . org-bullets-mode)
   :custom
   (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

 ;; Replace list hyphen(-) with dot(.)
 ;; (font-lock-add-keywords 'org-mode
 ;;                         '(("^ *\\([-]\\) "
 ;;                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
 #+end_src
** Fonts
 #+begin_src emacs-lisp
 ;; Make sure org faces is available
 (require 'org-faces)
 ;; Make sure org-indent face is available
 (require 'org-indent)
 ;; Set Size and Fonts for Headings
 (dolist (face '((org-level-1 . 1.2)
                 (org-level-2 . 1.1)
                 (org-level-3 . 1.05)
                 (org-level-4 . 1.0)
                 (org-level-5 . 1.1)
                 (org-level-6 . 1.1)
                 (org-level-7 . 1.1)
                 (org-level-8 . 1.1)))
     (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

 ;; Ensure that anything that should be fixed-pitch in Org files appears that way
 (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
 (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
 (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
 (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
 (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
 (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
 (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
 (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

 #+end_src
** Src Block Templates
 #+begin_src emacs-lisp
 ;; This is needed as of Org 9.2
 (require 'org-tempo)

 (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
 (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
 (add-to-list 'org-structure-template-alist '("java" . "src java"))
 (add-to-list 'org-structure-template-alist '("srcc" . "src C"))
 (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
 (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
 (add-to-list 'org-structure-template-alist '("js" . "src js"))
 (add-to-list 'org-structure-template-alist '("css" . "src css"))
 (add-to-list 'org-structure-template-alist '("html" . "src browser :out"))
 (add-to-list 'org-structure-template-alist '("py" . "src python :results output :exports both"))
 (add-to-list 'org-structure-template-alist '("la" . "latex"))
 (add-to-list 'org-structure-template-alist '("r" . "src R"))
 (add-to-list 'org-structure-template-alist '("d" . "src ditaa :file ../images/.png :cmdline -E"))
 #+end_src
** Set Margins for Modes
 #+begin_src emacs-lisp
 (defun dw/org-mode-visual-fill ()
   (setq visual-fill-column-width 100
         visual-fill-column-center-text t)
   (visual-fill-column-mode 1))

 (use-package visual-fill-column
   :defer t
   :hook (org-mode . dw/org-mode-visual-fill))
 #+end_src
** Disable the Actual Width of a Picture
 #+begin_src emacs-lisp
 (setq org-image-actual-width nil)
 #+end_src
** Org download
 #+begin_src emacs-lisp
 (use-package org-download
	   :ensure t 
	   ;;将截屏功能绑定到快捷键：Ctrl + Shift + Y
	   :bind ("C-S-y" . org-download-screenshot)
	   :config
	   (require 'org-download)
	   ;; Drag and drop to Dired
	   (add-hook 'dired-mode-hook 'org-download-enable))
 #+end_src
** Auto Show Images in Org
 #+begin_src emacs-lisp
 (auto-image-file-mode t) 
 #+end_src
** COMMENT Convert to HTML
 #+begin_src emacs-lisp
 (use-package htmlize)
 #+end_src
** Org Latex Impatient
 #+begin_src emacs-lisp
 (use-package org-latex-impatient
   :defer t
   :hook (org-mode . org-latex-impatient-mode)
   :init
   (setq org-latex-impatient-tex2svg-bin
         ;; location of tex2svg executable
         "~/.nvm/versions/node/v15.5.1/lib/node_modules/mathjax-node-cli/bin/tex2svg")
   :custom
   (org-latex-impatient-posframe-position-handler 'posframe-poshandler-point-bottom-left-corner))
 #+end_src
** Org Agenda
#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/init-org-agenda.el
(setq org-agenda-files (list
			 "~/Documents/Org/Tasks.org"
			 "~/Documents/Org/Days.org"
			 "~/Documents/Org/Habits.org"
			 ))

;; If you only want to see the agenda for today
;; (setq org-agenda-span 'day)

(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)

;; Custom TODO states and Agendas
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	;; (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")
	))

(setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@review" . ?R)
       ("@assignment" . ?A)
       ("@pratice" . ?P)
       ("planning" . ?p)
       ("note" . ?n)
       ("idea" . ?i)))

;; Configure custom agenda views
(setq org-agenda-custom-commands
      '(("d" "Dashboard"
	 ((agenda "" ((org-deadline-warning-days 7)))
	  (todo "NEXT"
		((org-agenda-overriding-header "Next Tasks")))
	  (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	("n" "Next Tasks"
	 ((todo "NEXT"
		((org-agenda-overriding-header "Next Tasks")))))


	("W" "Work Tasks" tags-todo "+work")

	;; Low-effort next actions
	("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	 ((org-agenda-overriding-header "Low Effort Tasks")
	  (org-agenda-max-todos 20)
	  (org-agenda-files org-agenda-files)))

	("w" "Workflow Status"
	 ((todo "WAIT"
		((org-agenda-overriding-header "Waiting on External")
		 (org-agenda-files org-agenda-files)))
	  (todo "REVIEW"
		((org-agenda-overriding-header "In Review")
		 (org-agenda-files org-agenda-files)))
	  (todo "PLAN"
		((org-agenda-overriding-header "In Planning")
		 (org-agenda-todo-list-sublevels nil)
		 (org-agenda-files org-agenda-files)))
	  (todo "BACKLOG"
		((org-agenda-overriding-header "Project Backlog")
		 (org-agenda-todo-list-sublevels nil)
		 (org-agenda-files org-agenda-files)))
	  (todo "READY"
		((org-agenda-overriding-header "Ready for Work")
		 (org-agenda-files org-agenda-files)))
	  (todo "ACTIVE"
		((org-agenda-overriding-header "Active Projects")
		 (org-agenda-files org-agenda-files)))
	  (todo "COMPLETED"
		((org-agenda-overriding-header "Completed Projects")
		 (org-agenda-files org-agenda-files)))
	  (todo "CANC"
		((org-agenda-overriding-header "Cancelled Projects")
		 (org-agenda-files org-agenda-files)))))))

;; Refiling
(setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)))

;; Save Org buffers after refiling!
(advice-add 'org-refile :after 'org-save-all-org-buffers)

;; Capture Templates
(defun dw/read-file-as-string (path)
  (with-temp-buffer
    (insert-file-contents path)
    (buffer-string)))

(setq org-capture-templates
      `(("t" "Tasks / Projects")
	("tt" "Task" entry (file+olp "~/Documents/Org/Tasks.org" "Inbox")
         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)))

;; Habit Tracking
(require 'org-habit)
(add-to-list 'org-modules 'org-habit)
(setq org-habit-graph-column 60)

(provide 'init-org-agenda)
#+end_src
** Org Roam
 #+begin_src emacs-lisp
 (use-package org-roam
       :ensure t
       :hook
       (after-init . org-roam-mode)
       :custom
       (org-roam-directory "~/Documents/Org/Wiki")
       :bind (:map org-roam-mode-map
               (("C-c n l" . org-roam)
		("C-c n f" . org-roam-find-file)
		("C-c n g" . org-roam-graph))
               :map org-mode-map
               (("C-c n i" . org-roam-insert))
               (("C-c n I" . org-roam-insert-immediate))))
 #+end_src
** Org Roam Server
 #+begin_src emacs-lisp
 (use-package org-roam-server
   :ensure t
   :after org-mode
   :config
   (setq org-roam-server-host "127.0.0.1"
         org-roam-server-port 9090
         org-roam-server-authenticate nil
         org-roam-server-export-inline-images t
         org-roam-server-serve-files nil
         org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
         org-roam-server-network-poll t
         org-roam-server-network-arrows nil
         org-roam-server-network-label-truncate t
         org-roam-server-network-label-truncate-length 60
         org-roam-server-network-label-wrap-length 20))
 #+end_src
** Properly Align Tables
 #+begin_src emacs-lisp
 (use-package valign
   :hook (org-mode . valign-mode))
 #+end_src
* Markdown Mode
** Mardown Mode
 #+begin_src emacs-lisp
 (use-package markdown-mode
   :mode (("README\\.md\\'" . gfm-mode)
          ("\\.md\\'" . down-mode)
          ("\\.jown\\'" . jown-mode))
   :init (setq jown-command "multijown"))
 #+end_src
** Edit Code Block
 #+begin_src emacs-lisp
 (use-package edit-indirect)
 #+end_src
* Editing
** COMMENT Evil Mode
 #+begin_src emacs-lisp
 (defun dw/evil-hook ()
   (dolist (mode '(custom-mode
                   eshell-mode
		   vterm-mode
                   term-mode))
     (add-to-list 'evil-emacs-state-modes mode)))

 (use-package evil
   :init
   (setq evil-want-integration t)
   (setq evil-want-keybinding nil)
   (setq evil-want-C-u-scroll t)
   (setq evil-want-C-i-jump nil)
   (setq evil-respect-visual-line-mode t)
   :config
   (add-hook 'evil-mode-hook 'dw/evil-hook)
   (evil-mode 1)
   (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
   (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

   ;; Use visual line motions even outside of visual-line-mode buffers
   (evil-global-set-key 'motion "j" 'evil-next-visual-line)
   (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

   (evil-set-initial-state 'messages-buffer-mode 'normal)
   (evil-set-initial-state 'dashboard-mode 'normal))

 (use-package evil-collection
   :after evil
   :custom
   (evil-collection-outline-bind-tab-p nil)
   :config
   (evil-collection-init))
 #+end_src
*** Evil Cursor Changer (Terminal)
  #+begin_src emacs-lisp
  (unless (display-graphic-p)
    (use-package evil-terminal-cursor-changer
      :ensure t
      :init
      (evil-terminal-cursor-changer-activate)
      :config
       (setq evil-motion-state-cursor 'box)  ; █
       (setq evil-visual-state-cursor 'box)  ; █
       (setq evil-normal-state-cursor 'box)  ; █
       (setq evil-insert-state-cursor 'bar)  ; ⎸
       (setq evil-emacs-state-cursor  'hbar) ; _
       )
    )
  #+end_src
*** Evil Surround
  - Add surrounding
    - In visual-state with =S<textobject>= or =gS<textobject>=. Or in normal-state with =ys<textobject>= or =yS<textobject>=.
  - Change surroundinf
    - =cs<old-textobject><new-textobject>=
  - Delete surrounding
    - =ds<textobject>=
  #+begin_src emacs-lisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
  #+end_src
*** Evil Escape
  #+begin_src emacs-lisp
  (use-package evil-escape
    :after evil
    :config
    (evil-escape-mode t)
    (setq-default evil-escape-key-sequence "jk"))
  #+end_src
*** COMMENT Evil Multiple Cursors
  #+begin_src emacs-lisp
  (use-package evil-mc
    :config
    (global-evil-mc-mode  1))

  (dw/leader-key-def
    "m"  '(:ignore t :which-key "evil-mc")
    "ma" 'evil-mc-make-all-cursors
    "mu" 'evil-mc-undo-all-cursors
    "mmn" 'evil-mc-make-and-goto-next-match
    "mmp" 'evil-mc-make-and-goto-prev-match
    "mkn" 'evil-mc-skip-and-goto-next-match
    "mkp" 'evil-mc-skip-and-goto-prev-match
    "mI" 'evil-mc-make-cursor-in-visual-selection-beg
    "mA" 'evil-mc-make-cursor-in-visual-selection-end)
  #+end_src
** Meow
#+begin_src emacs-lisp
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-dvp)
  (meow-normal-define-key
   '("*" . meow-expand-0)
   '("=" . meow-expand-9)
   '("!" . meow-expand-8)
   '("[" . meow-expand-7)
   '("]" . meow-expand-6)
   '("{" . meow-expand-5)
   '("+" . meow-expand-4)
   '("}" . meow-expand-3)
   '(")" . meow-expand-2)
   '("(" . meow-expand-1)
   '("1" . digit-argument)
   '("2" . digit-argument)
   '("3" . digit-argument)
   '("4" . digit-argument)
   '("5" . digit-argument)
   '("6" . digit-argument)
   '("7" . digit-argument)
   '("8" . digit-argument)
   '("9" . digit-argument)
   '("0" . digit-argument)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("<" . meow-beginning-of-thing)
   '(">" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("C" . meow-change-save)
   '("d" . meow-delete)
   '("e" . meow-line)
   '("f" . meow-find)
   '("F" . meow-find-expand)
   '("g" . meow-keyboard-quit)
   '("G" . meow-goto-line)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-join)
   '("J" . delete-indentation)
   '("k" . meow-kill)
   '("l" . meow-till)
   '("L" . meow-till-expand)
   '("m" . meow-mark-word)
   '("M" . meow-mark-symbol)
   '("n" . meow-next)
   '("N" . meow-next-expand)
   '("o" . meow-block)
   '("O" . meow-block-expand)
   '("p" . meow-prev)
   '("P" . meow-prev-expand)
   '("q" . meow-quit)
   '("r" . meow-replace)
   '("R" . meow-replace-save)
   '("s" . meow-search)
   '("S" . meow-pop-search)
   '("t" . meow-right)
   '("T" . meow-right-expand)
   '("u" . undo)
   '("v" . meow-visit)
   '("w" . meow-next-word)
   '("W" . meow-next-symbol)
   '("x" . meow-save)
   '("y" . meow-yank)
   '("z" . meow-pop-selection)
   '("Z" . meow-pop-all-selection)
   '("&" . meow-query-replace)
   '("%" . meow-query-replace-regexp)
   '("<escape>" . meow-last-buffer)))

(use-package meow
  :demand t
  :init
  (meow-global-mode 1)
  :config
  ;; meow-setup 用于自定义按键绑定，可以直接使用下文中的示例
  (meow-setup)
  ;; 如果你需要在 NORMAL 下使用相对行号（基于 display-line-numbers-mode）
  (meow-setup-line-number)
  ;; 如果你需要自动的 mode-line 设置（如果需要自定义见下文对 `meow-indicator' 说明）
  ;;(meow-setup-indicator)
  ;;(add-to-list 'meow-normal-state-mode-list 'dashboard-mode)
  (setq meow-replace-state-name-list
  '((normal . "Ꮚ•ꈊ•Ꮚ")
    (insert . "Ꮚ`ꈊ´Ꮚ")
    (keypad . "Ꮚ'ꈊ'Ꮚ")
    (motion . "Ꮚ-ꈊ-Ꮚ")))
  )

(meow-leader-define-key
 '("p" . meow-motion-origin-command)
 '("n" . meow-motion-origin-command)
 '("h" . meow-motion-origin-command)
 '("t" . meow-motion-origin-command)
 '("f" . find-file)
 '("b" . counsel-switch-buffer)
 '("v" . vterm)
 '("r" . quickrun)
 '("oo" . ace-window)
 '("od" . ace-delete-window)
 '("dd" . dap-debug)
 '("da" . dap-breakpoint-add)
 '("dk" . dap-breakpoint-delete-all)
 '("dn" . dap-next)
 '("di" . dap-step-in)
 '("do" . dap-step-out)
 '("ds" . dap-disconnect)
 '("aa" . org-agenda)
 '("al" . org-agenda-list)
 '("ac" . org-capture)
)

(meow-motion-overwrite-define-key
 '("n" . meow-next)
 '("p" . meow-prev)
 '("h" . dired-single-up-directory)
 '("t" . dired-single-buffer))
#+end_src
** Better Editing
*** Set Delete Selection Mode
  Make the selected parts be deletable
  #+begin_src emacs-lisp
  ;; set delete selection mode
  (delete-selection-mode t)
  #+end_src
*** Make ESC as QUIT
  #+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  #+end_src
*** Color Rg
  #+begin_src emacs-lisp
  (use-package color-rg
    :straight nil
    :load-path "~/.emacs.d/site-packages/color-rg/")

  ;; (dw/leader-key-def
  ;;   "c" '(:ignore t :which-key "color-rg")
  ;;   "cid" 'color-rg-search-input
  ;;   "csd" 'color-rg-search-symbol
  ;;   "cip" 'color-rg-search-input-in-project
  ;;   "cic" 'color-rg-search-input-in-current-file
  ;;   "cit" 'color-rg-search-project-with-type)
  #+end_src
*** Multiple Cursors
  #+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind
    (("C-S-c C-S-c" . 'mc/edit-lines)
     ("C->" . 'mc/mark-next-like-this)
     ("C-<" . 'mc/mark-previous-like-this)
     ("C-S-c C-<" . 'mc/mark-all-like-this)))
  #+end_src
*** Iedit
#+begin_src emacs-lisp
(use-package iedit)
#+end_src
*** Evil-nerd-commenter
This program can be used *WITHOUT* evil-mode!
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :after meow
  ;; :bind
  ;; ("M-;" . 'evilnc-comment-or-uncomment-lines)
  ;; ("C-c l" . 'evilnc-quick-comment-or-uncomment-to-the-line)
  ;; ("C-c c" . 'evilnc-copy-and-comment-lines)
  ;; ("C-c p" . 'evilnc-comment-or-uncomment-paragraphs)
  :config
  (evilnc-default-hotkeys t)
  )
#+end_src
** Emacs Rime
#+begin_src emacs-lisp
(use-package rime
  :custom
  (default-input-method "rime")
  (rime-librime-root "~/.emacs.d/librime/dist")
  )
#+end_src
* Company
** Company Mode
 #+begin_src emacs-lisp
  (use-package company 
    :hook (lsp-mode . company-mode)
    ;; :bind 
    ;; (:map company-active-map
    ;;       ("<tab>". company-complete-selection))
    ;; (:map lsp-mode-map
    ;;       ("<tab>" . company-indent-or-complete-common)
    ;;       ("<M-n>" . company-select-next-or-abort)
    ;;       ("<M-p>" . company-select-previous-or-abort))
    :custom
    (company-tooltip-align-annotations t)
    ;; Number the candidates (use M-1, M-2 etc to select completions)
    (company-show-numbers t)
    ;; starts with 1 character
    (company-minimum-prefix-length 1)
    ;; Trigger completion immediately
    (company-idle-delay 0)
    ;; Back to top when reach the end
    (company-selection-wrap-around t)
    :config
    ;; (setq global-company-mode t)
    ;; Use tab key to cycle through suggestions.
    ;; ('tng' means 'tab and go')
    (company-tng-configure-default)
    ;;Completion based on AI
    (use-package company-tabnine
      :config
      (push '(company-capf :with company-tabnine :separate company-yasnippet :separete) company-backends))
    )
 #+end_src
** Company Box
 #+begin_src emacs-lisp
 ;; Add UI for Company
 (use-package company-box
   :hook (company-mode . company-box-mode)
   :config
   (setq company-box-icons-alist 'company-box-icons-all-the-icons))

 #+end_src
* Developing
** Programing tools
*** Smart Parens
  #+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
  #+end_src
*** Rainbow Brackets 
  #+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src
*** Hungry Delete
  #+begin_src emacs-lisp
  (use-package hungry-delete
    :hook (prog-mode . hungry-delete-mode))
  #+end_src
*** Indent Guide
  #+begin_src emacs-lisp
  (use-package indent-guide
    :after prog-mode
    :hook (prog-mode . indent-guide-mode))
  #+end_src
*** Format All
  #+begin_src emacs-lisp
  (use-package format-all
    :after prog-mode)
  #+end_src
*** quickrun.el
  #+begin_src emacs-lisp
  (use-package quickrun
    :after prog-mode
    :config
    ;; set python3 as default
    (quickrun-add-command "python" 
      '((:command . "python3") 
        (:exec . "%c %s") 
        (:tempfile . nil)) 
      :default "python"))

  ;; Set up Keybindings
  ;; (dw/leader-key-def
  ;;   "r"  '(:ignore t :which-key "quickrun")
  ;;   "rr" 'quickrun
  ;;   "ra" 'quickrun-with-arg
  ;;   "rs" 'quickrun-shell
  ;;   "rc" 'quickrun-compile-only
  ;;   "re" 'quickrun-region)
  #+end_src
*** Syntax checking with Flycheck
  #+begin_src emacs-lisp
    (use-package flycheck
      :defer t
      :hook (lsp-mode . flycheck-mode))
  #+end_src
*** Yasnippets
  #+begin_src emacs-lisp
  (use-package yasnippet
    :after prog-mode
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))

  ;; Snippets Collection
  (use-package yasnippet-snippets)

  ;; auto insert
  (use-package auto-yasnippet)

  ;; (dw/leader-key-def
  ;;   "a"  '(:ignore t :which-key "auto-snippets")
  ;;   "aw" 'aya-create
  ;;   "ay" 'aya-expand
  ;;   "ao" 'aya-open-line)
  #+end_src
** Lsp
*** LSP Mode
  #+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((sh-mode typescript-mode js-mode web-mode python-mode css-mode Latex-mode TeX-latex-mode) . lsp)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)
    (setq lsp-headerline-breadcrumb-segments nil)
    ;; (setq lsp-headerline-breadcrumb-enable-symbol-numbers t)
    (setq lsp-log-io nil)
    (setq lsp-idle-delay 0.500)
    (setq lsp-completion-provider :capf))

  ;; (dw/leader-key-def
  ;;   "l"  '(:ignore t :which-key "lsp")
  ;;   "ld" 'xref-find-definitions
  ;;   "lr" 'xref-find-references
  ;;   "ln" 'lsp-ui-find-next-reference
  ;;   "lp" 'lsp-ui-find-prev-reference
  ;;   "ls" 'counsel-imenu
  ;;   "le" 'lsp-ui-flycheck-list
  ;;   "lS" 'lsp-ui-sideline-mode
  ;;   "lX" 'lsp-execute-code-action)
  #+end_src

**** Lsp UI
  #+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-doc-position 'bottom)
    (setq lsp-ui-imenu-auto-refresh t)
    )

  (use-package lsp-ivy 
  :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs 
    :commands lsp-treemacs-errors-list)
  #+end_src
*** COMMENT Nox
#+begin_src emacs-lisp
(use-package nox
  :load-path "~/.emacs.d/site-packages/nox"
  :config
  (dolist (hook (list
		 'js-mode-hook
		 'js2-mode-hook
		 'typesript-mode-hook
		 'coffee-mode-hook
		 'web-mode-hook
		 'css-mode-hook
		 'python-mode-hook
		 'java-mode-hook
		 'sh-mode-hook
		 'c-mode-common-hook
		 'c-mode-hook
		 'c++-mode-hook
		 ))
    (add-hook hook '(lambda () (nox-ensure))))
	(setq nox-python-server "pyright")
  )
#+end_src
** Languages
*** Python
**** Pyright
  #+begin_src emacs-lisp
  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))
  #+end_src
**** pipenv
  #+begin_src emacs-lisp
  ;; Enable to control pipenv in Emacs
  (use-package pipenv
    :hook (python-mode . pipenv-mode)
    :init
    (setq
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended))
  #+end_src
**** pyenv
  #+begin_src emacs-lisp
  (use-package pyenv-mode
    :hook (python-mode . pyenv-mode)
    :config
    ;; auto activates the virtual environment if .python-version exists
    (use-package pyenv-mode-auto)
    ) 


  ;; (dw/leader-key-def
  ;;   "p"  '(:ignore t :which-key "pyenv")
  ;;   "pp" 'pyenv-mode
  ;;   "ps" 'pyenv-mode-set
  ;;   "pu" 'pyenv-mode-unset
  ;;   "pr" 'run-python)
  #+end_src
**** COMMENT shim
  #+begin_src emacs-lisp
  (use-package shim
    :load-path "~/.emacs.d/site-packages/shim/shim.el"
    :hook (python-mode . shim-mode)
    :config
    (shim-init-python))
  #+end_src
**** COMMENT auto-virtualenv
  #+begin_src emacs-lisp
  (use-package auto-virtualenv
    :hook 
    ((python-mode focus-in window-configuration-change) . auto-virtualenvwrapper-activate))
    ;; (add-hook 'python-mode-hook #'auto-virtualenvwrapper-activate)
    ;; (add-hook 'window-configuration-change-hook #'auto-virtualenvwrapper-activate)
    ;; (add-hook 'focus-in-hook #'auto-virtualenvwrapper-activate))
  #+end_src
*** TS/JS
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2))

  (defun dw/set-js-indentation ()
    (setq js-indent-level 2)
    (setq evil-shift-width js-indent-level)
    (setq-default tab-width 2))

  (use-package js2-mode
    :mode "\\.jsx?\\'")

  ;; Don't use built-in syntax checking
  (setq js2-mode-show-strict-warnings nil)

  ;; Set up proper indentation in JavaScript and JSON files
  (add-hook 'js2-mode-hook #'dw/set-js-indentation)
  (add-hook 'json-mode-hook #'dw/set-js-indentation)

  (use-package prettier-js
    :hook ((js2-mode . prettier-js-mode)
           (typescript-mode . prettier-js-mode))
    :config
    (setq prettier-js-show-errors nil))
#+end_src
*** CoffeeScript
#+begin_src emacs-lisp
(use-package coffee-mode
  :mode "\\.coffee\\'"
  :config
  ;; automatically clean up bad whitespace
  (setq whitespace-action '(auto-cleanup))
  ;; This gives you a tab of 2 spaces
  (custom-set-variables '(coffee-tab-width 2))
  
  (use-package sourcemap)
  ;; generating sourcemap by '-m' option. And you must set '--no-header' option
  (setq coffee-args-compile '("-c" "--no-header" "-m"))
  (add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)

  ;; If you want to remove sourcemap file after jumping corresponding point
  (defun my/coffee-after-compile-hook (props)
    (sourcemap-goto-corresponding-point props)
    (delete-file (plist-get props :sourcemap)))
  (add-hook 'coffee-after-compile-hook 'my/coffee-after-compile-hook)
  )

(use-package flymake-coffee
  :hook (coffee-mode . flymake-coffee)
  )
#+end_src
*** Web (HTML/CSS)
**** HTML and CSS
  #+begin_src emacs-lisp
  (use-package web-mode
    :mode "\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")

  ;; Impatient Html File
  (use-package impatient-mode)

  ;; Preview the html file
  (use-package skewer-mode
    :config
    (add-hook 'js2-mode-hook 'skewer-mode)
    (add-hook 'css-mode-hook 'skewer-css-mode)
    (add-hook 'html-mode-hook 'skewer-html-mode)
    (add-hook 'web-mode-hook 'skewer-html-mode))
  #+end_src
**** Emmet
  #+begin_src emacs-lisp
    (use-package emmet-mode
      :hook (web-mode . emmet-mode))
  #+end_src
*** Latex
**** latex-preview-pane
  Preview latex files as PDF in Emacs
  #+begin_src emacs-lisp
  (use-package latex-preview-pane
    :ensure t)
  #+end_src
**** AucTex
#+begin_src emacs-lisp
(straight-use-package 'auctex)
 #+end_src
**** CDLaTex
  #+begin_src emacs-lisp
  (use-package cdlatex
    :hook 
    (org-mode . org-cdlatex-mode)
    (LaTeX-mode . cdlatex-mode)
    (latex-mode . cdlatex-mode)
    )
  #+end_src
**** Lsp-Latex
  Need to download language server
  #+begin_src emacs-lisp
  (use-package lsp-latex
    :config
    (add-hook 'tex-mode-hook 'lsp)
    (add-hook 'latex-mode-hook 'lsp)
    (add-hook 'Latex-mode-hook 'lsp)
    (add-hook 'TeX-latex-mode-hook 'lsp))
  #+end_src
*** Swift
#+begin_src emacs-lisp
(use-package lsp-sourcekit
  :after lsp-mode
  :config
  (setq lsp-sourcekit-executable "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp"))

(use-package swift-mode
  :hook (swift-mode . (lambda () (lsp))))
#+end_src
*** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.yaml\\'")
#+end_src
*** R
#+begin_src emacs-lisp
(use-package ess)
#+end_src
*** Json
#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.json\\'")
#+end_src
** Dap Debug Mode
#+begin_src emacs-lisp
;; dap debug tools
(use-package dap-mode
  :after lsp-mode
  :config
  (require 'dap-python)
  (setq dap-auto-configure-features '(sessions locals controls tooltip)))


;; (dw/leader-key-def
;;   "d"  '(:ignore t :which-key "dap debug")
;;   "dd" 'dap-debug
;;   "da" 'dap-breakpoint-add
;;   "dsc" 'dap-breakpoint-delete
;;   "dsc" 'dap-breakpoinnt-delete-all
;;   "di" 'dap-step-in
;;   "do" 'dap-step-out
;;   "dn" 'dap-next)
#+end_src
** Term/Shells
*** Term Mode
#+begin_src emacs-lisp
(use-package term
  :config
  (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
  ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

  ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
  ;; (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  )

(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))
#+end_src
*** Eshell
#+begin_src emacs-lisp
(defun dw/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  ;; (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  ;; (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  ;; (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt)

(use-package eshell
  :hook (eshell-first-time-mode . dw/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("zsh" "vim")))

  (eshell-git-prompt-use-theme 'powerline))
#+end_src
*** Vterm
Vitual Termianl
#+begin_src shell
brew install libtool libvterm 
#+end_src
#+begin_src emacs-lisp
(use-package vterm
  :commands vterm
  :config
  ;; (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))
#+end_src
** Git
*** Magit
#+begin_src emacs-lisp
(use-package magit
  :defer t
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;; Add a super-convenient global binding for magit-status since
;; I use it 8 million times a day
(global-set-key (kbd "C-M-;") 'magit-status)
#+end_src
* Increase memory/garbage 
Make Emacs/lsp more smooth
#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
#+end_src

* Increase the amount of data which Emacs reads from the process
Same as above
#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
* COMMENT Finish Dumping
#+begin_src emacs-lisp
)
#+end_src
