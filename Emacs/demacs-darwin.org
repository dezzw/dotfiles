#+TITLE: DEmacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle  ~/.emacs.d/init.el :mkdirp yes
* Some improve in early-init
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
(setq gc-cons-threshold most-positive-fixnum)

(setq load-prefer-newer noninteractive)
#+end_src
* Increase the amount of data which Emacs reads from the process
Same as above
#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
* Increase memory/garbage 
Make Emacs/lsp more smooth
#+begin_src emacs-lisp
;; ( gc-cons-threshold 100000000)

(use-package gcmh
  :hook (after-init . gcmh-mode)
  :custom
  (gcmh-idle-delay 0.5) ;; doom is using 0.5, default is 15s
  (gcmh-high-cons-threshold (* 16 1024 1024)) ;; 16 MB
  )
#+end_src

* Native Compilation
 #+begin_src emacs-lisp
(setq comp-async-jobs-number 7
      comp-deferred-compilation t
	 comp-async-report-warnings-errors nil)
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
 #+end_src
* Package Management
** Straight.el
#+begin_src emacs-lisp
  (setq straight-vc-git-default-clone-depth 1)

  (setq straight-disable-native-compile
	(when (fboundp 'native-comp-available-p)
	  (not (native-comp-available-p))))

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Always use straight to install on systems other than Linux
  ;; (setq straight-use-package-by-default t)

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)
  ;; (setq use-package-verbose t)

  (if (daemonp)
      (setq use-package-always-demand t))

  (setq use-package-always-ensure t)


  (setq package-enable-at-startup nil)
#+end_src

* Graphic Based Plugins Setting
#+begin_src emacs-lisp
(setq gui-only-plugins-setting ())
(setq tui-only-plugins-setting ())
#+end_src
* Pathes
** Exact Path on Macos
 The package is help emacs to find exact path in the shell
#+begin_src emacs-lisp
;; Find Executable Path on OS X
(use-package exec-path-from-shell
  :init
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))
 #+end_src
** Update Load Path
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
;; Add my library path to load-path
(push "~/.dotfiles/Emacs/elisp" load-path)
(push "~/Documents/Org" load-path)
#+end_src
* Auto Doing something
** Stop Backup and "Auto-Save"
 Stop backup and auto-save (save as a backup) made by emacs
 #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
 ;; 关闭备份
 (setq make-backup-files nil
      auto-save-default nil)
 #+end_src
** Stop Auto-Change Vertical Scroll Size
 #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
 (setq auto-window-vscroll nil)
 #+end_src
** Auto-Reverting Changed Files
 auto allow the outside changes
 #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
 (global-auto-revert-mode 1)
 #+end_src
** Auto-Tangle emacs.org File
Tangle (form a new file) on save
 #+begin_src emacs-lisp
 ;; Since we don't want to disable org-confirm-babel-evaluate all
 ;; of the time, do it around the after-save-hook
 (defun dw/org-babel-tangle-dont-ask ()
   ;; Dynamic scoping to the rescue
   (let ((org-confirm-babel-evaluate nil))
     (org-babel-tangle)))

 (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask
                                               'run-at-end 'only-in-org-mode)))
 #+end_src
** Auto-Saving Changed Files
The package make emacs auto save the files
 #+begin_src emacs-lisp
 (use-package super-save
   :diminish super-save-mode
   :custom
   (super-save-auto-save-when-idle t)
   :config
   (super-save-mode +1))
 #+end_src
* UI Setup
** Hide Useless UI
 #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
 (setq inhibit-startup-message t)

 (scroll-bar-mode -1)        ; Disable visible scrollbar
 (tool-bar-mode -1)          ; Disable the toolbar
 (tooltip-mode -1)           ; Disable tooltips
 (set-fringe-mode 10)

 (menu-bar-mode -1)          ; Disable the menu bar


 (setq ring-bell-function 'ignore)
 #+end_src
** Frame Transparency and Maximize Windows
 #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
 (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
 (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
 (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
 (add-to-list 'default-frame-alist '(fullscreen . maximized))
 #+end_src
** Line Number
 #+begin_src emacs-lisp
 ;; Enalbe column number
 (column-number-mode)
 
 ;; Enable liner number
 (global-display-line-numbers-mode t)
 
 ;; Disable line numbers for some modes
 (dolist (mode '(org-mode-hook
                 term-mode-hook
                 vterm-mode-hook
                 shell-mode-hook
                 eshell-mode-hook))
   (add-hook mode (lambda () (display-line-numbers-mode 0))))
 #+end_src
** Fonts
 #+begin_src emacs-lisp
 (defun dw/set-font-faces ()
   (message "Setting faces!")
   ;; set font
   (set-face-attribute 'default nil :font "Victor Mono" :height 140)

   ;; Set the fixed pitch face
   (set-face-attribute 'fixed-pitch nil :font "Victor Mono" :height 140)

   ;; Set the variable pitch face
   (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 150 :weight 'regular))
 #+end_src
** Fonts Ligature
#+begin_src emacs-lisp
  (push '(use-package ligature
	   :ensure nil
	   :straight (ligature.el :type git :host github :repo "mickeynp/ligature.el")
	   :config
	   ;; Enable the "www" ligature in every possible major mode
	   (ligature-set-ligatures 't '("www"))
	   ;; Enable traditional ligature support in eww-mode, if the
	   ;; `variable-pitch' face supports it
	   (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
	   ;; Enable all Cascadia Code ligatures in programming modes
	   (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
						":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
						"!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
						"<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
						"<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
						"..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
						"~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
						"[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
						">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
						"<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
						"##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
						"?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
						"\\\\" "://"))
	   ;; Enables ligature checks globally in all buffers. You can also do it
	   ;; per mode with `ligature-mode'.
	   (global-ligature-mode t)) gui-only-plugins-setting)
#+end_src
** Icons Support 
 #+begin_src emacs-lisp
 (push '(use-package all-the-icons
    :custom
    (all-the-icons-dired-monochrome t)) gui-only-plugins-setting)
 #+end_src
** Themes
 #+begin_src emacs-lisp
 (use-package doom-themes
   :config
   (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
   (doom-themes-treemacs-config)

   ;; (doom-themes-org-config)
   )

(load-theme 'doom-one t)
 #+end_src
** COMMENT Change Theme Based On System Appearance
#+begin_src emacs-lisp
(if (not (display-graphic-p))
    (load-theme 'doom-one t))

(if (or (display-graphic-p) (not (string= (daemonp) "tty")))
    (defun dw/apply-theme (appearance)
      "Load theme, taking current system APPEARANCE into consideration."
      (mapc #'disable-theme custom-enabled-themes)
      (pcase appearance
	('light (load-theme 'doom-solarized-light t))
	('dark (load-theme 'doom-one t))))
  )
#+end_src
** Modeline 
 #+begin_src emacs-lisp
 (use-package doom-modeline
   :init (doom-modeline-mode 1)
   :custom
   (doom-modeline-window-width-limit fill-column)
   (doom-modeline-icon (display-graphic-p))
   )
 #+end_src
** Dashbard
 #+begin_src emacs-lisp
  (use-package page-break-lines) 
  
  (use-package dashboard
    :custom
    ;; Set the banner
    (dashboard-startup-banner "~/.dotfiles/Emacs/dashboard/banner.txt")
    (dashboard-center-content t)
    (dashboard-items '((recents  . 7)
                       (projects . 5)
                       (agenda . 3)
                       ))
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-set-init-info t)
    (dashboard-week-agenda nil)
    (dashboard-agenda-release-buffers t)
    :config
    (dashboard-setup-startup-hook)
    )
 #+end_src
** Nyan Mode
#+begin_src emacs-lisp
(push '(use-package nyan-mode
	 :defer t
	 :custom
	 (nyan-mode t)
	 (nyan-animate-nyancat t)
	 (nyan-wavy-trail t)
	 ) gui-only-plugins-setting)
#+end_src
** Highlight TODOs
#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode prog-mode  lsp-mode) . hl-todo-mode)
  :config
  (setq hl-todo-keyword-faces
      '(("TODO"   . "#FF0000")
        ("FIXME"  . "#FF0000")
        ("DEBUG"  . "#A020F0")
        ("NEXT" . "#FF4500")
	("TBA" . "#61d290")
        ("UNCHECK"   . "#1E90FF")))
  )
#+end_src
** Highligh Numbers
#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook ((prog-mode  lsp-mode) . highlight-numbers-mode))

#+end_src
** UI in Deamon
#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
		(add-hook 'ns-system-appearance-change-functions #'dw/apply-theme)
		(dashboard-setup-startup-hook)
                (with-selected-frame frame
                  (dw/set-font-faces))
		(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
		))
  ;; (add-hook 'ns-system-appearance-change-functions #'dw/apply-theme)
  (if (display-graphic-p)
      (dw/set-font-faces)
    )
  )
#+end_src
** Smooth Scolling
#+begin_src emacs-lisp
(use-package smooth-scrolling
  :disabled
  :defer t
  :config
  (smooth-scrolling-mode 1))

(pixel-scroll-precision-mode 1)
#+end_src
* Workspace
** Perspective.el
#+begin_src emacs-lisp
(use-package perspective
  :demand t
  :bind (("C-M-k" . persp-switch)
         ("C-M-n" . persp-next)
         ("C-x k" . persp-kill-buffer*))
  :custom
  (persp-initial-frame-name "Main")
  :config
  ;; Running `persp-mode' multiple times resets the perspective list...
  (unless (equal persp-mode t)
    (persp-mode)))
#+end_src
* Window Management
** Ace Window
   Use =C-x o= to active =ace-window= to swap the windows (less than two windows), or using following arguments (more than two):
- =x= - delete window
- =m= - swap windows
- =M= - move window
- =c= - copy window
- =j= - select buffer
- =n= - select the previous window
- =u= - select buffer in the other window
- =c= - split window fairly, either vertically or horizontally
- =v= - split window vertically
- =b= - split window horizontally
- =o= - maximize current window
- =?= - show these command bindings
#+begin_src emacs-lisp
(use-package ace-window
  :bind ("C-x o" . ace-window)
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
** Edwina
#+begin_src emacs-lisp
(use-package edwina
  :disabled
  :config
  (setq display-buffer-base-action '(display-buffer-below-selected))
  (edwina-setup-dwm-keys)
  (edwina-mode 1))
#+end_src
* File Management
** Dired
 #+begin_src emacs-lisp
 (use-package dired
   :ensure nil
   :commands (dired dired-jump)
   :bind (("C-x C-j" . dired-jump)))

 (use-package dired-single
   :commands (dired dired-jump))

 (push '(use-package all-the-icons-dired
          :hook (dired-mode . all-the-icons-dired-mode)) gui-only-plugins-setting)

 (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode))

 (use-package diredfl
    :hook (dired-mode . diredfl-mode))

 (use-package dired-posframe
  :bind ("C-*" . dired-posframe-show))
 #+end_src
* Keybinding Management
** Keybinding Panel (which-key)
 #+begin_src emacs-lisp
 (use-package which-key
   :init (which-key-mode)
   :diminish which-key-mode
   :config
   (setq which-key-idle-delay 0.3))
 #+end_src
 * Project Management
* Project Managemennt
** Projectile
 #+begin_src emacs-lisp
 (use-package projectile
   :diminish projectile-mode
   :defer 1
   :config (projectile-mode)
   :bind-keymap
   ("C-c p" . projectile-command-map)
   :init
   (when (file-directory-p "~/Documents/Projects/Code")
     (setq projectile-project-search-path '("~/Documents/Projects/Code")))
   (setq projectile-switch-project-action #'projectile-dired))
 #+end_src
* Completion System
** Completions with Vertico
#+begin_src emacs-lisp
(defun dw/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a word"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
      (backward-kill-word arg)))

(use-package vertico
  :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . dw/minibuffer-backward-kill))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))
#+end_src
** Preserve Minibuffer History with savehist-mode
#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :straight t
    :config
    (setq history-length 25)
    (savehist-mode 1))
#+end_src
** Improved Candidate Filtering with Orderless
#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** Completions in Regions with Corfu
#+begin_src emacs-lisp
(use-package corfu
  :bind (:map corfu-map
         ("C-j" . corfu-next)
         ("C-k" . corfu-previous)
         ("C-f" . corfu-insert))
  :custom
  (corfu-cycle t)
  :config
  (corfu-global-mode))
#+end_src
** Consult Commands
#+begin_src emacs-lisp
(defun dw/get-project-root ()
  (when (fboundp 'projectile-project-root)
    (projectile-project-root)))

(use-package consult
  :demand t
  :bind (("C-s" . consult-line)
         ("C-M-l" . consult-imenu)
         ("C-M-j" . persp-switch-to-buffer*)
         :map minibuffer-local-map
         ("C-r" . consult-history))
  :custom
  (consult-project-root-function #'dw/get-project-root)
  (completion-in-region-function #'consult-completion-in-region))

(use-package consult-dir
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file))
  :custom
  (consult-dir-project-list-function nil))

;; Thanks Karthik!
(with-eval-after-load 'eshell-mode
  (defun eshell/z (&optional regexp)
    "Navigate to a previously visited directory in eshell."
    (let ((eshell-dirs (delete-dups (mapcar 'abbreviate-file-name
                                            (ring-elements eshell-last-dir-ring)))))
      (cond
       ((and (not regexp) (featurep 'consult-dir))
        (let* ((consult-dir--source-eshell `(:name "Eshell"
                                                   :narrow ?e
                                                   :category file
                                                   :face consult-file
                                                   :items ,eshell-dirs))
               (consult-dir-sources (cons consult-dir--source-eshell consult-dir-sources)))
          (eshell/cd (substring-no-properties (consult-dir--pick "Switch directory: ")))))
       (t (eshell/cd (if regexp (eshell-find-previous-directory regexp)
                       (completing-read "cd: " eshell-dirs))))))))
#+end_src
** Completion Annotations with Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src
** Embark
#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  
  ;; Show Embark actions via which-key
  (setq embark-action-indicator
        (lambda (map)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator))


;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
* Helpful function
** Helpful Function Description
 #+begin_src emacs-lisp
 (use-package helpful
   :commands (helpful-callable helpful-variable helpful-command helpful-key)
   :bind
   ([remap describe-function] . helpful-function)
   ([remap describe-command] . helpful-command)
   ([remap describe-variable] . helpful-variable)
   ([remap describe-key] . helpful-key))
 #+end_src

* Org Mode
** Config Basic Org mode
 #+begin_src emacs-lisp
   (defun dw/org-mode-setup ()
     (org-indent-mode)
     (variable-pitch-mode 1)
     (visual-line-mode 1))
 
   (use-package org
     :hook (org-mode . dw/org-mode-setup)
     :config
     (setq org-html-head-include-default-style nil)
     (setq org-ellipsis " ▾"
           org-hide-emphasis-markers t
           org-src-fontify-natively t
           org-src-tab-acts-natively t
           org-edit-src-content-indentation 0
           org-hide-block-startup nil
           org-src-preserve-indentation nil
           org-startup-folded 'content
           org-cycle-separator-lines 2)
 
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
     
     (setq org-html-htmlize-output-type nil)
 
    ;; config for images in org
     (auto-image-file-mode t)
     (setq org-image-actual-width nil)
     ;; default image width
     (setq org-image-actual-width '(300))
 
     (setq org-export-with-sub-superscripts nil)
 
     ;; 不要自动创建备份文件
     (setq make-backup-files nil)
  
     (with-eval-after-load "meow"
       (meow-leader-define-key
        '("a" . org-agenda))
       )
 )
 #+end_src
** Apperance of Org
*** Bullets
 #+begin_src emacs-lisp
 ;; change bullets for headings
 (use-package org-bullets
   :after org
   :hook (org-mode . org-bullets-mode)
   :custom
   (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
 #+end_src
*** Fonts
 #+begin_src emacs-lisp
(push '(with-eval-after-load 'org
   ;; Make sure org faces is available
   (require 'org-faces)
   ;; Make sure org-indent face is available
   (require 'org-indent)
   ;; Set Size and Fonts for Headings
   (dolist (face '((org-level-1 . 1.2)
                   (org-level-2 . 1.1)
                   (org-level-3 . 1.05)
                   (org-level-4 . 1.0)
                   (org-level-5 . 1.0)
                   (org-level-6 . 1.0)
                   (org-level-7 . 1.0)
                   (org-level-8 . 1.0)))
     (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

   ;; Ensure that anything that should be fixed-pitch in Org files appears that way
   (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
   (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
   ) gui-only-plugins-setting)
 #+end_src
*** Set Margins for Modes
 #+begin_src emacs-lisp
 (defun dw/org-mode-visual-fill ()
   (setq visual-fill-column-width 100
         visual-fill-column-center-text t)
   (visual-fill-column-mode 1))

 (use-package visual-fill-column
   :hook (org-mode . dw/org-mode-visual-fill))
 #+end_src
*** Properly Align Tables
 #+begin_src emacs-lisp
 (push '(use-package valign
          :hook (org-mode . valign-mode)
          ) gui-only-plugins-setting)
 #+end_src
*** Auto-show Markup Symbols
#+begin_src emacs-lisp
(use-package org-appear
  :hook (org-mode . org-appear-mode))
#+end_src
** Org Export
#+begin_src emacs-lisp
(with-eval-after-load "org-export-dispatch"
  ;; Edited from http://emacs.stackexchange.com/a/9838
  (defun dw/org-html-wrap-blocks-in-code (src backend info)
    "Wrap a source block in <pre><code class=\"lang\">.</code></pre>"
    (when (org-export-derived-backend-p backend 'html)
      (replace-regexp-in-string
       "\\(</pre>\\)" "</code>\n\\1"
       (replace-regexp-in-string "<pre class=\"src src-\\([^\"]*?\\)\">"
				 "<pre>\n<code class=\"\\1\">" src))))

  (require 'ox-html)

  (add-to-list 'org-export-filter-src-block-functions
               'dw/org-html-wrap-blocks-in-code)
  )
#+end_src
** Org Babel
*** Load Org Babel
#+begin_src emacs-lisp
(with-eval-after-load "org"
  (use-package ob-browser
    :defer t)

  (with-eval-after-load "ob"
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (latex . t)
       (java . t)
       (C . t)
       (js . t)
       (browser . t)
       (python . t)
       (R .t)))
    )

  (setq org-confirm-babel-evaluate nil)
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  )
#+end_src
*** Src Block Templates
 #+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
 (with-eval-after-load 'org
   (require 'org-tempo)

   (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
   (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
   (add-to-list 'org-structure-template-alist '("java" . "src java"))
   (add-to-list 'org-structure-template-alist '("srcc" . "src C"))
   (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
   (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
   (add-to-list 'org-structure-template-alist '("js" . "src js"))
   (add-to-list 'org-structure-template-alist '("css" . "src css"))
   (add-to-list 'org-structure-template-alist '("html" . "src browser :out"))
   (add-to-list 'org-structure-template-alist '("py" . "src python :results output :exports both"))
   (add-to-list 'org-structure-template-alist '("la" . "latex"))
   (add-to-list 'org-structure-template-alist '("r" . "src R"))
   ;; (add-to-list 'org-structure-template-alist '("d" . "src ditaa :file ../images/.png :cmdline -E"))
  )
 #+end_src
** Org download
 #+begin_src emacs-lisp
 (use-package org-download
   :disabled
   ;;将截屏功能绑定到快捷键：Ctrl + Shift + Y
   :bind ("C-S-y" . org-download-screenshot)
   :config
   (require 'org-download)
   ;; Drag and drop to Dired
   (add-hook 'dired-mode-hook 'org-download-enable))
 #+end_src
** Org Roam
#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/Documents/Org/Notes")
  (org-roam-completion-everywhere t)
  (org-roam-completion-system 'default)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today)
	 :map org-mode-map
	 ("C-M-i" . completion-at-point)
	 )
  :config
  (org-roam-db-autosync-mode)
  ;; (org-roam-setup)
  (require 'org-roam-protocol)
  )
#+end_src
** Org Agenda
#+begin_src emacs-lisp
(with-eval-after-load "org"
  (setq planner-path "~/Documents/Org/Planner/")


  (defun dw/update-agenda-files()
    (dolist (file (directory-files planner-path))
      (when (string-match-p ".*\.org$" file)
	(setq org-agenda-files (cons (concat planner-path file) org-agenda-files)))))

  (dw/update-agenda-files)
  
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  ;; Custom TODO states and Agendas
  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "TBA(b)" "|" "DONE(d!)")
	  ))

  (setq org-tag-alist
	'((:startgroup)
	  ;; Put mutually exclusive tags here
	  (:endgroup)
	  ("review" . ?r)
	  ("assignment" . ?a)
	  ("test" . ?t)
	  ("quiz" . ?q)
	  ("final" . ?f)
	  ("pratice" . ?p)
	  ("emacs" . ?e)
	  ("note" . ?n)
	  ("idea" . ?i)))


  (use-package org-super-agenda
    :hook (org-agenda-mode . org-super-agenda-mode)
    :init
    (setq org-agenda-skip-scheduled-if-done t
          org-agenda-skip-deadline-if-done t
          org-agenda-compact-blocks t
	  org-agenda-start-with-log-mode t
          org-agenda-start-day "+0d"
	  org-agenda-include-diary t
	  org-agenda-time-leading-zero t
	  org-agenda-span 1)


    (setq org-agenda-custom-commands
	  '(("D" "Dashboard"
             ((agenda "" ((org-agenda-span 'day)

			  (org-super-agenda-groups
			   '((:name "Today"
                                    :time-grid t
                                    :date today
                                    :scheduled today
                                    :order 1)))))
              (alltodo "" ((org-agenda-overriding-header "")
			   (org-super-agenda-groups
                            '((:name "Next to do"
                                     :todo "NEXT"
                                     :order 1)
                              (:name "Important"
                                     :priority "A"
                                     :order 6)
                              (:name "Due Today"
                                     :deadline today
                                     :order 2)
                              (:name "Due Soon"
                                     :deadline future
                                     :order 8)
                              (:name "Overdue"
                                     :deadline past
                                     :order 7)
                              (:name "Assignments"
                                     :tag "assignment"
                                     :order 10)
			      (:name "Tests/Quiz"
				     :tag ("test" "quiz")
				     :order 10)
			      (:name "Final Exam"
				     :tag "final"
				     :order  9)
                              (:name "Projects"
                                     :tag "Project"
                                     :order 14)
                              (:name "Emacs"
                                     :tag "Emacs"
                                     :order 13)
                              (:name "To read"
                                     :tag "Read"
                                     :order 30)
                              (:name "trivial"
                                     :priority<= "C"
                                     :tag ("Trivial" "Unimportant")
                                     :todo ("SOMEDAY" )
                                     :order 90)
                              ))))))
	    ("A" "Assignments"
	     ((agenda "" ((org-agenda-span 'day)
			  (org-super-agenda-groups
			   '((:name "Today"
				    :time-grid t
				    :and (:tag "assignment" :deadline today)
				    )
			     (:discard (:anything t))))))
	      (tags "assignment" ((org-agenda-overriding-header "")
				  (org-super-agenda-groups
				   '((:name "Due Today"
					    :and (:tag "assignment" :deadline today)
					    )
				     (:name "Next to do"
					    :and (:todo "NEXT" :tag "assignment")
					    :order 2)
				     (:name "Due Soon"
					    :and (:tag "assignment" :deadline future)
					    :order 3)
				     (:name "Overdue"
					    :and (:tag "assignment" :deadline past)
					    :order 99)
				     (:discard (:anything t))))))))
	    ("T" "Tests/Quiz"
	     ((agenda "" ((org-agenda-span 'day)
			  (org-agenda-include-deadlines nil)
			  (org-super-agenda-groups
			   '((:name "Today"
				    :and (:scheduled today :tag "test")
				    :time-grid t)
			     (:discard (:anything t))))))
	      (tags "\\(?:final\\|quiz\\|test\\)" ((org-agenda-overriding-header "")
						   (org-super-agenda-groups
						    '((:name "Tests"
							     :and (:tag "test" :scheduled future)
							     )
						      (:name "Quiz"
							     :and (:tag "quiz" :scheduled future)
							     )
						      (:name "Final Exam"
							     :and (:tag "final" :scheduled future)
							     )
						      (:discard (:anything t))))))))
	    )
	  )
    )


  ;; Refiling
  (setq org-refile-targets
	'(("~/Documents/Org/Planner/Archive.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; Capture Templates
  (defun dw/read-file-as-string (path)
    (with-temp-buffer
      (insert-file-contents path)
      (buffer-string)))

  (setq org-capture-templates
	`(("t" "Tasks / Projects")
	  ("tt" "Task" entry (file+olp "~/Documents/Org/Planner/Tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)))

  ;; Habit Tracking
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
  )
#+end_src
* Markdown Mode
** Mardown Mode
 #+begin_src emacs-lisp
 (use-package markdown-mode
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
 #+end_src
** Edit Code Block
 #+begin_src emacs-lisp
 (use-package edit-indirect
   :commands markdown-edit-code-block)
 #+end_src
* Notes Managements
** Deft
#+begin_src emacs-lisp
(use-package deft
  :commands (deft)
  :config (setq deft-directory "~/Documents/Org/Notes"
                deft-recursive t
                deft-extensions '("md" "org"))

  ;;https://github.com/jrblevin/deft/issues/75#issuecomment-905031872
  (defun cm/deft-parse-title (file contents)
    "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
    (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
      (if begin
	  (string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
	(deft-base-filename file))))
  
  (advice-add 'deft-parse-title :override #'cm/deft-parse-title)
  
  (setq deft-strip-summary-regexp
	(concat "\\("
		"[\n\t]" ;; blank
		"\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
		"\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
		"\\)"))
  )
#+end_src
* Editing
** Meow
*** Qwerty Layout Setting
#+begin_src emacs-lisp
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . meow-motion-origin-command)
   '("k" . meow-motion-origin-command)
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("C" . meow-change-save)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("F" . meow-find-expand)
   '("g" . meow-cancel)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("N" . meow-pop-search)
   '("o" . meow-block)
   '("O" . meow-block-expand)
   '("p" . meow-yank)
   '("P" . meow-yank-pop)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("T" . meow-till-expand)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("V" . meow-kmacro-matches)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-kmacro-lines)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("Z" . meow-pop-all-selection)
   '("&" . meow-query-replace)
   '("%" . meow-query-replace-regexp)
   '("'" . repeat)
   '("\\" . quoted-insert)
   '("<escape>" . meow-last-buffer)))

(provide 'init-meow-qwerty)
#+end_src
*** Main Setting
#+begin_src emacs-lisp
;; For Qwerty
(require 'init-meow-qwerty)

(use-package meow
  :demand t
  :init
  (meow-global-mode 1)
  :config
  ;; meow-setup 用于自定义按键绑定，可以直接使用下文中的示例
  (meow-setup)
  ;; 如果你需要在 NORMAL 下使用相对行号（基于 display-line-numbers-mode）
  (meow-setup-line-number)
  ;;:bind ("" . meow-insert-exit)
  (add-to-list 'meow-mode-state-list '(inferior-emacs-lisp-mode . normal))
  (add-to-list 'meow-mode-state-list '(org-agenda-mode . normal)))

(meow-leader-define-key
 '("SPC" . execute-extended-command)
 '("f" . find-file)
 '("b" . switch-to-buffer)
 '("qr" . quickrun)
 '("wo" . ace-window)
 '("wd" . ace-delete-window)
 '("wt" . treemacs-select-window)
 '("dd" . dap-debug))

(require 'open-files)

(meow-motion-overwrite-define-key
 '("h" . dired-single-up-directory)
 '("l" . dired-single-buffer))
#+end_src
** Better Editing
*** Set Delete Selection Mode
Make the selected parts be deletable
  #+begin_src emacs-lisp
  ;; set delete selection mode
  (delete-selection-mode t)
  #+end_src
*** Make ESC as QUIT
  #+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  #+end_src
*** Multiple Cursors
  #+begin_src emacs-lisp
  (use-package multiple-cursors
    :commands (mc/edit-lines mc/mark-next-like-this mc/mark-previous-like-this mc/mark-all-like-this)
    :bind
    (("C-S-c C-S-c" . 'mc/edit-lines)
     ("C->" . 'mc/mark-next-like-this)
     ("C-<" . 'mc/mark-previous-like-this)
     ("C-S-c C-<" . 'mc/mark-all-like-this)))
  #+end_src
*** Iedit
#+begin_src emacs-lisp
(use-package iedit
  :after lsp)
#+end_src
*** Evil-nerd-commenter
This program can be used *WITHOUT* evil-mode!
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :commands (evilnc-comment-or-uncomment-lines)
  :bind
  ("M-;" . 'evilnc-comment-or-uncomment-lines)
  ("C-c l" . 'evilnc-quick-comment-or-uncomment-to-the-line)
  ("C-c c" . 'evilnc-copy-and-comment-lines)
  ("C-c p" . 'evilnc-comment-or-uncomment-paragraphs)
  )
#+end_src
*** Avy
#+begin_src emacs-lisp
(use-package avy
  :commands (avy-goto-char avy-goto-word-0 avy-goto-line))

(meow-leader-define-key
 '("tc" . avy-goto-char)
 '("tw" . avy-goto-word-0)
 '("tl" . avy-goto-line)
 )
#+end_src
* Company
** Company Mode
 #+begin_src emacs-lisp
 (use-package company 
   :hook ((lsp-mode prog-mode conf-mode) . company-mode)
   :custom
   (company-tooltip-align-annotations t)
   ;; ;; Number the candidates (use M-1, M-2 etc to select completions)
   (company-show-numbers t)
   ;; ;; starts with 1 character
   (company-minimum-prefix-length 1)
   ;; ;; Trigger completion immediately
   (company-idle-delay 0.2)
   ;; ;; Back to top when reach the end
   (company-selection-wrap-around t)
   :config
   ;; Use tab key to cycle through suggestions.
   ;; ('tng' means 'tab and go')
   ;; (company-tng-configure-default)
   ;; (require 'company_init)
   )

 ;;Completion based on AI 
 (use-package company-tabnine
   :after lsp
   :config
   (push '(company-capf :with company-tabnine :separate company-yasnippet :separete) company-backends))

 #+end_src
** Company Box
 #+begin_src emacs-lisp
  ;; Add UI for Company
 (push '(use-package company-box
          :hook (company-mode . company-box-mode)
          :config
          (setq company-box-icons-alist 'company-box-icons-all-the-icons)) gui-only-plugins-setting)
#+end_src
** Company Quickhelp
#+begin_src emacs-lisp
(use-package company-quickhelp
  :hook (company-mode . company-quickhelp-mode))
#+end_src
** Company Statistics
#+begin_src emacs-lisp
 (use-package company-statistics
   :config
   (company-statistics-mode))
#+end_src
* Citre
#+begin_src emacs-lisp
(defun dw/get-project-root ()
  (when (fboundp 'projectile-project-root)
    (projectile-project-root)))

(use-package citre
  :commands (citre-jump citre-ace-peek)
  :init
  ;; This is needed in `:init' block for lazy load to work.
  (require 'citre-config)
  ;; Bind your frequently used commands.
  :bind (("C-x c j" . 'citre-jump)
	   ("C-x c J" . 'citre-jump-back)
	   ("C-x c p" .  'citre-ace-peek))
  :custom
  ;; Set this if you use project management plugin like projectile.  It's
  ;; only used to display paths relatively, and doesn't affect actual use.
  (citre-project-root-function #'dw/get-project-root)
  (citre-use-project-root-when-creating-tags t)
  (citre-prompt-language-for-ctags-command t)
  (citre-auto-enable-citre-mode-modes '(prog-mode))
  )
#+end_src
* Developing
** Developing tools
*** Hightlight Parens
#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src
*** Smart Parens
  #+begin_src emacs-lisp
  (use-package smartparens
    :hook ((prog-mode lsp-mode) . smartparens-mode)
    :init
    (require 'smartparens-config)
    :config
    (define-key smartparens-mode-map (kbd "M-r") #'sp-rewrap-sexp)    
    (define-key smartparens-mode-map (kbd "M-s") #'sp-unwrap-sexp)
    (define-key smartparens-mode-map (kbd "M-[") #'sp-wrap-square)
    (define-key smartparens-mode-map (kbd "M-{") #'sp-wrap-curly)
    (define-key smartparens-mode-map (kbd "C-)") #'sp-forward-slurp-sexp)
    (define-key smartparens-mode-map (kbd "C-}") #'sp-forward-barf-sexp)
    )
  #+end_src
*** Rainbow Brackets 
  #+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((prog-mode lsp-mode) . rainbow-delimiters-mode))
  #+end_src
*** Rainbow Mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook ((org-mode prog-mode lsp-mode) . rainbow-mode))
#+end_src
*** Hungry Delete
  #+begin_src emacs-lisp
  (use-package hungry-delete
    :hook ((prog-mode lsp-mode) . hungry-delete-mode))
  #+end_src
*** Indent Guide
  #+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook ((prog-mode lsp-mode) . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-delay 0)
    (highlight-indent-guides-method 'character))
  #+end_src
*** aggressive-indent
#+begin_src emacs-lisp
(use-package aggressive-indent
  :hook (prog-mode . aggressive-indent-mode))
#+end_src
*** Format All
  #+begin_src emacs-lisp
  (use-package format-all
    :hook ((prog-mode lsp-mode) . format-all-mode)
    :commands (format-all-ensure-formatter format-all-buffer))
  #+end_src
*** quickrun.el
  #+begin_src emacs-lisp
  (use-package quickrun
    :commands (quickrun)
    :config
    ;; set python3 as default
    (quickrun-add-command "python" 
      '((:command . "python3") 
        (:exec . "%c %s") 
        (:tempfile . nil)) 
      :default "python"))
  #+end_src
*** Syntax checking with Flycheck
  #+begin_src emacs-lisp
    (use-package flycheck
      :hook (lsp-mode . flycheck-mode))
  #+end_src
*** Yasnippets
  #+begin_src emacs-lisp
  (use-package yasnippet
    :defer t
    :hook ((org-mode lsp-mode) . yas-minor-mode)
    :config
    (setq yas-snippet-dirs
      '("~/.dotfiles/Emacs/snippets"))
    (yas-reload-all))
  
  ;; Snippets Collection
  (use-package yasnippet-snippets
    :after yasnippet)
  
  ;; auto insert
  (use-package auto-yasnippet
    :disabled
    :after yasnippet)
  #+end_src
*** Minimap
#+begin_src emacs-lisp
(use-package minimap
  :commands (minimap-mode)
  :custom
  (minimap-window-location 'right))
#+end_src
*** Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :commands (treemacs))

(use-package treemacs-all-the-icons
  :disabled
  :after treemacs)
#+end_src
*** Undo-Tree
#+begin_src emacs-lisp
(use-package undo-tree
  :config
  (global-undo-tree-mode 1))
#+end_src
** Lsp
*** Main Setting
  #+begin_src emacs-lisp 
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (((sh-mode typescript-mode js2-mode web-mode css-mode Latex-mode TeX-latex-mode c-mode cc-mode) . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :init
    (setq lsp-keymap-prefix "C-c l")
    :custom
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-signature-auto-activate nil)
    (lsp-signature-render-documentation nil)
    (lsp-log-io nil)
    (lsp-idle-delay 0.500)
    (lsp-completion-provider :capf)
    :config
    (setq lsp-use-plists t)
    (add-to-list 'lsp-language-id-configuration '(scss-mode . "css"))
    (add-to-list 'lsp-language-id-configuration '(less-css-mode . "css")))
  #+end_src
*** Lsp UI
  #+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-sideline-enable t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-imenu-auto-refresh t))

  (use-package lsp-ivy
    :disabled
    :after lsp
    :commands lsp-ivy-workspace-symbol)

  (use-package lsp-treemacs
    :after lsp
    :commands lsp-treemacs-errors-list)
  #+end_src
** Languages
*** Python
**** Pyright
  #+begin_src emacs-lisp
  (use-package lsp-pyright
    ;; :after python-mode
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp-deferred))))
  #+end_src
**** pyenv
  #+begin_src emacs-lisp
  (use-package pyenv-mode
    :disabled
    :hook (python-mode . pyenv-mode))

  ;; auto activates the virtual environment if .python-version exists
  (use-package pyenv-mode-auto
    :disabled
    :after pyenv-mode)
  #+end_src
*** Web (HTML/CSS/JS...)
**** JS/TS
#+begin_src emacs-lisp
(use-package nvm
  :after (typescript-mode js2-mode))

(use-package typescript-mode
  :mode "\\.ts\\'"
  :config
  (setq typescript-indent-level 2))

(defun dw/set-js-indentation ()
  (setq js-indent-level 2)
  (setq evil-shift-width js-indent-level)
  (setq-default tab-width 2))

(use-package js2-mode
  :mode "\\.m?js\\'"
	:config

	;; Don't use built-in syntax checking
	(setq js2-mode-show-strict-warnings nil)

	;; Set up proper indentation in JavaScript
	(add-hook 'js2-mode-hook #'dw/set-js-indentation)
	)

(use-package rjsx-mode
  :mode "\\.jsx\\'"
  )

(use-package prettier-js
	:disabled
  :hook ((js2-mode . prettier-js-mode)
         (typescript-mode . prettier-js-mode))
  :config
  (setq prettier-js-show-errors nil))
#+end_src
**** CoffeeScript
#+begin_src emacs-lisp
(use-package coffee-mode
  :mode "\\.coffee\\'"
  :config
  ;; automatically clean up bad whitespace
  (setq whitespace-action '(auto-cleanup))
  ;; This gives you a tab of 2 spaces
  (custom-set-variables '(coffee-tab-width 2))
  
  (use-package sourcemap)
  ;; generating sourcemap by '-m' option. And you must set '--no-header' option
  (setq coffee-args-compile '("-c" "--no-header" "-m"))
  (add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)

  ;; If you want to remove sourcemap file after jumping corresponding point
  (defun my/coffee-after-compile-hook (props)
    (sourcemap-goto-corresponding-point props)
    (delete-file (plist-get props :sourcemap)))
  (add-hook 'coffee-after-compile-hook 'my/coffee-after-compile-hook)
  )

(use-package flymake-coffee
  :hook (coffee-mode . flymake-coffee)
  )
#+end_src
**** HTML
  #+begin_src emacs-lisp
  (use-package web-mode
    :mode "\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")

  ;; Preview the html file
  (use-package skewer-mode
    :after web-mode
    :config
    (add-hook 'js2-mode-hook 'skewer-mode)
    (add-hook 'css-mode-hook 'skewer-css-mode)
    (add-hook 'html-mode-hook 'skewer-html-mode)
    (add-hook 'web-mode-hook 'skewer-html-mode))
  #+end_src
**** Emmet
  #+begin_src emacs-lisp
    (use-package emmet-mode
      :hook (web-mode . emmet-mode))
  #+end_src
**** SCSS/SASS
#+begin_src emacs-lisp
(use-package scss-mode
  :mode "\\.scss\\'"
  :custom
  (scss-compile-at-save t)
  (scss-output-directory "../css")
  (scss-sass-command "sass --no-source-map")
  )

#+end_src
*** Json
#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :config
	;; Set up proper indentation in JSON
  (add-hook 'json-mode-hook #'dw/set-js-indentation))
#+end_src
*** C/C++
#+begin_src emacs-lisp
(use-package ccls
  :after (c-mode c++-mode))

(use-package modern-cpp-font-lock
  :hook (c++-mode . modern-c++-font-lock-mode))

(use-package cmake-mode)
#+end_src
*** Java
#+begin_src emacs-lisp
(use-package lsp-java
  :hook (java-mode . lsp-deferred)
  )
#+end_src
*** Latex
**** latex-preview-pane
  Preview latex files as PDF in Emacs
  #+begin_src emacs-lisp
  (use-package latex-preview-pane
    :commands (latex-preview-pane-mode latex-preview-pane-update))
  #+end_src
**** AucTex
#+begin_src emacs-lisp
;; (straight-use-package 'auctex)
 #+end_src
**** CDLaTex
  #+begin_src emacs-lisp
  (use-package cdlatex
    :hook 
    (org-mode . org-cdlatex-mode)
    (LaTeX-mode . cdlatex-mode)
    (latex-mode . cdlatex-mode)
    )
  #+end_src
**** Xenops
#+begin_src emacs-lisp
(use-package xenops
  :hook ((latex-mode LaTeX-mode org-mode) . xenops-mode)
  :config
  (setq xenops-math-image-scale-factor 2.0) )

#+end_src
*** Swift
#+begin_src emacs-lisp
(use-package swift-mode
  :mode "\\.swift\\'"
  :hook (swift-mode . (lambda () (lsp-deferred))))

(use-package lsp-sourcekit
  :after swift-mode
  :config
  (setq lsp-sourcekit-executable "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp"))
#+end_src
*** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.yaml\\'")
#+end_src
*** Shell
#+begin_src emacs-lisp
(setq sh-indentation 4)
#+end_src
*** R
#+begin_src emacs-lisp
(use-package ess
  :mode "\\.R\\'")
#+end_src
** Dap Debug Mode
#+begin_src emacs-lisp
;; dap debug tools
(use-package dap-mode
  :commands dap-debug
  :custom
  (dap-auto-configure-features '(sessions locals controls tooltip))
  :config
  ;; Set up python debugging
  (require 'dap-python)

  ;; Set up chrome debugging
  (require 'dap-chrome)
  (dap-chrome-setup)

  ;; Set up node debugging
  (require 'dap-node)
  (dap-node-setup)

  (require 'dap-java)
  )
#+end_src
** Term/Shells
*** Vterm
Vitual Termianl
#+begin_src emacs-lisp
;; (use-package vterm
;;   :commands vterm
;;   :config
;;   (setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
;;   (setq vterm-max-scrollback 10000))

;; Copy from https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-shell.el
;; Better term
;; @see https://github.com/akermu/emacs-libvterm#installation
(when (and module-file-suffix           ; dynamic module
           (executable-find "cmake")
           (executable-find "libtool")
           (executable-find "make"))
  (use-package vterm
    :defer 1
    :init
    (setq vterm-always-compile-module t)

    (with-no-warnings
      (when (posframe-workable-p)
        (defvar vterm-posframe--frame nil)
        (defun vterm-posframe-toggle ()
          "Toggle `vterm' child frame."
          (interactive)
          (let ((buffer (vterm--internal #'ignore 100))
                (width  (max 80 (/ (frame-width) 2)))
                (height (/ (frame-height) 2)))
            (if (frame-live-p vterm-posframe--frame)
                (progn
                  (posframe-delete-frame buffer)
                  (setq vterm-posframe--frame nil))
              (setq vterm-posframe--frame
                    (posframe-show
                     buffer
                     :poshandler #'posframe-poshandler-frame-center
                     :left-fringe 8
                     :right-fringe 8
                     :width width
                     :height height
                     :min-width width
                     :min-height height
                     :internal-border-width 3
                     :internal-border-color (face-foreground 'font-lock-comment-face nil t)
                     :background-color (face-background 'tooltip nil t)
                     :accept-focus t)))))
        (bind-key "C-`" #'vterm-posframe-toggle)))))


(use-package multi-vterm
  :commands multi-vterm)

(use-package vterm-toggle
  :commands vterm-toggle)

(meow-leader-define-key
 '("tt" . vterm-toggle)
 '("tm" . multi-vterm)
 '("tp" . vterm-posframe-toggle)
 )
#+end_src
*** Aweshell
#+begin_src emacs-lisp
(use-package aweshell
  :ensure nil
  :straight (aweshell.el :type git :host github :repo "manateelazycat/aweshell")
  :commands (aweshell-new aweshell-dedicated-toggle)
  :init
  (setq eshell-directory-name "~/.dotfiles/Emacs/eshell/"
        eshell-aliases-file (expand-file-name "~/.dotfiles/Emacs/eshell/alias")))

(with-eval-after-load "meow"
  (meow-leader-define-key
   '("s" . aweshell-dedicated-toggle)))
#+end_src
*** eshell
#+begin_src emacs-lisp
(use-package eshell-vterm
  :after (eshell aweshell)
  :config
  (eshell-vterm-mode)
  (defalias 'eshell/v 'eshell-exec-visual))
#+end_src
** Tmux
*** Emamux
#+begin_src emacs-lisp
(push '(use-package emamux
	   :bind ("C-z" . emamux:keymap)
	   ;; :config
	   ;; (global-set-key (kbd "C-z") emamux:keymap)
	   ) tui-only-plugins-setting)
#+end_src
*** Tmux-pane
#+begin_src emacs-lisp
(push '(use-package tmux-pane
      :disabled
      :config
      (tmux-pane-mode)
      ) tui-only-plugins-setting)
#+end_src
** Git
*** Magit
#+begin_src emacs-lisp
(use-package magit
  :commands (magit magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;; Add a super-convenient global binding for magit-status since
;; I use it 8 million times a day
(global-set-key (kbd "C-M-;") 'magit-status)
#+end_src
*** Magit-Delta
Highlight diff by using delta
#+begin_src emacs-lisp
(use-package magit-delta
  :hook (magit-mode . magit-delta-mode))
#+end_src
** LeetCode Client
#+begin_src emacs-lisp
(use-package leetcode
  :commands (leetcode start-leetcode)
  :custom
  (leetcode-prefer-language "python3")
  (leetcode-prefer-sql "mysql")
  (leetcode-save-solutions t)
  (leetcode-directory "~/Documents/leetcode"))

(defun start-leetcode()
    (interactive)
    (global-display-line-numbers-mode -1)
    (display-line-numbers-mode -1)
    (leetcode))

(defun quit-leetcode()
  (interactive)
  (leetcode-quit)
  (global-line-numebrs-mode t))
#+end_src
* Nix
** Nix Mode
#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src
** Nix Options
#+begin_src emacs-lisp
(use-package nixos-options
  :after nix-mode)

(use-package company-nixos-options
  :after nix-mode
  :config
  (add-to-list 'company-backends 'company-nixos-options))
#+end_src
** Nix Sandbox
#+begin_src emacs-lisp
(use-package nix-sandbox)
#+end_src
* Utilities
** Clipboard managers
#+begin_src emacs-lisp
(use-package cliphist
	:commands (cliphist-paste-item cliphist-select-item)
	)
#+end_src
** Highlight the diff
#+begin_src emacs-lisp
(use-package diff-hl
  :hook (dired-mode . diff-hl-dired-mode-unless-remote)
  :hook (magit-post-refresh . diff-hl-magit-post-refresh)
  :hook (prog-mode . diff-hl-mode)
  :config
  ;; use margin instead of fringe
  (diff-hl-margin-mode))
#+end_src
** Use Trash in Emacs
#+begin_src emacs-lisp
(use-package osx-trash
  :defer 1
  :config
  (when (eq system-type 'darwin)
  (osx-trash-setup))
  (setq delete-by-moving-to-trash t))
#+end_src
** FZF
#+begin_src emacs-lisp
(use-package fzf
  :commands (fzf)
  )
#+end_src
** Clipetty
Clipetty is a minor mode for terminal (TTY) users that sends text that you kill in Emacs to your Operating System's clipboard
#+begin_src emacs-lisp
(push '(use-package clipetty
      :hook (after-init . global-clipetty-mode)
      ) tui-only-plugins-setting)
#+end_src
** Emacs Everywhere
#+begin_src emacs-lisp
(if (daemonp)
    (use-package emacs-everywhere)
)
#+end_src
** Wucuo
#+begin_src emacs-lisp
(use-package wucuo
  :hook ((prog-mode text-mode) . #'wucuo-start))
#+end_src
* Pass
** pass-store.el
#+begin_src emacs-lisp
(use-package password-store
  :commands (password-store-copy password-store-insert)
  :config
  (setq password-store-password-length 12))

(use-package auth-source-pass
  :disabled
  :config
  (auth-source-pass-enable))
#+end_src
* Direnv
#+begin_src emacs-lisp
(use-package direnv
  :config
  (direnv-mode))
#+end_src
* Load Plugings Based On Graphic Setting
#+begin_src emacs-lisp
;; GUI Only Plugins
(if (or (display-graphic-p) (and (daemonp) (not (string= (daemonp) "tty"))))
    (dolist (gui-plugins gui-only-plugins-setting)
      (eval gui-plugins)))

;; TUI Only Plugins
(if (or (not (display-graphic-p)) (string= (daemonp) "tty"))
    (dolist (tui-plugins tui-only-plugins-setting)
      (eval tui-plugins)))
#+end_src

