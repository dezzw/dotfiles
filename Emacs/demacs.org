#+TITLE: DEmacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
* Some improve in early-init
  #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (setq gc-cons-threshold most-positive-fixnum)

  ;; Copy from https://github.com/willbush/system/blob/master/emacs/early-init.el
  (defconst IS-MAC     (eq system-type 'darwin))
  (defconst IS-LINUX   (eq system-type 'gnu/linux))

  ;; Doom currently uses 16 MiB and Spacemacs is using 100 MB. I'm going to try 64
  ;; MiB to see how it goes.
  (defconst GC-CONS-THRESHOLD 67108860)


  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  (setq ring-bell-function 'ignore)

  ;; Set default font
  (set-face-attribute 'default nil
		      :family "Operator Mono"
		      :height 160
		      :weight 'normal
		      :width 'normal)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
		      :family "Operator Mono"
		      :height 160
		      :weight 'normal
		      :width 'normal)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
		      :family "Cantarell"
		      :height 160
		      :weight 'regular)


  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t)

  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))

  ;; (set-frame-parameter (selected-frame) 'alpha-backgroud 80)
  ;; (setq default-frame-alist '((alpha-background . 80)))

  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (setq package-enable-at-startup nil)

  (unless (featurep 'straight)
    ;; Bootstrap straight.el
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))


  (eval-when-compile
    (require 'setup))

  ;; hide the welcome buffer
  (setq inhibit-splash-screen t)

  ;; Set `doom-themes' early to prevent non-stylized UI flash.
  (straight-use-package 'doom-themes)
  (setup  (:require doom-themes)
    (load-theme 'doom-xcode t)

    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)

    (doom-themes-org-config))

  ;; Set `doom-modeline' early to prevent non-stylized UI flash.
  ;; Note: `doom-modeline' requires M-x all-the-icons-install-fonts.
  (setup (:require doom-modeline)
    (size-indication-mode 1)
    (column-number-mode 1)

    (:hook-into after-init-hook)
    (:option doom-modeline-icon nil ;; icons' position does not work properly
	     ;; doom-modeline-major-mode-icon nil
	     ;; doom-modeline-lsp nil
	     ;; doom-modeline-buffer-file-name-style 'truncate-upto-root 
	     doom-modeline-buffer-file-name-style 'relative-from-project
	     doom-modeline-buffer-encoding 'nondefault))

  (setup (:require hide-mode-line)
    (:hook-into eaf-mode))

  ;; A dependency that dashboard has.
  ;; (setup (:require page-break-lines))

  ;; (setup (:require dashboard)
  ;;   (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

  ;;   (:option dashboard-startup-banner "~/.dotfiles/Emacs/dashboard/banner.txt"
  ;; 	   dashboard-banner-logo-title nil
  ;; 	   dashboard-center-content t
  ;; 	   dashboard-set-heading-icons t
  ;; 	   dashboard-set-init-info t
  ;; 	   dashboard-set-file-icons t
  ;; 	   dashboard-items '((recents  . 5)
  ;; 			     (projects . 5)))
  ;;   (dashboard-setup-startup-hook))

  (setup (:require posframe))

  (setup (:require exec-path-from-shell)
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize)))

  ;; Add my library path to load-path
  (push "~/.dotfiles/Emacs/elisp" load-path)
  (push "~/Documents/Org" load-path)

  (when (string> emacs-version "29")
    (pixel-scroll-precision-mode 1))

  #+end_src
* Startup Setting 
  #+begin_src emacs-lisp
  (defconst IS-GUI (or (display-graphic-p) (and (daemonp) (not (string= (daemonp) "tty")))))
  (defconst IS-TTY (or (not (display-graphic-p)) (and (daemonp) (string= (daemonp) "tty"))))

  ;; Copy from https://github.com/willbush/system/blob/master/emacs/init.el
  ;; A big contributor to startup times is garbage collection. We up the gc
  ;; threshold to temporarily prevent it from running, then reset it later using a
  ;; hook and controlling after that with `gcmh-mode'.
  (setq gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 0.6)

  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)

  ;; Set the right directory to store the native comp cache
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

  ;; Keep a ref to the actual file-name-handler
  (defvar default-file-name-handler-alist file-name-handler-alist)

  ;; Set the file-name-handler to nil (because regexing is cpu intensive)
  (setq file-name-handler-alist nil)

  ;; Reset file-name-handler-alist after initialization
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-threshold GC-CONS-THRESHOLD
		    gc-cons-percentage 0.1
		    file-name-handler-alist default-file-name-handler-alist)))

  (setup (:require gcmh)
    (:hook-into after-init-hook)
    (:option gcmh-idle-delay 5
	     gcmh-high-cons-threshold GC-CONS-THRESHOLD)
    (add-function :after after-focus-change-function #'gcmh-idle-garbage-collect))

  (global-auto-revert-mode 1)
  (recentf-mode 1)

  (setq make-backup-files nil
	auto-save-default nil)

  (delete-selection-mode t)

  (setup (:require super-save)
    (:option super-save-auto-save-when-idle t)
    (super-save-mode +1))

  #+end_src

* Setup
** :daley
   #+begin_src emacs-lisp
   (setup-define :delay
     (lambda (&rest time)
       `(run-with-idle-timer ,(or time 1)
			     nil ;; Don't repeat
			     (lambda () (require ',(setup-get 'feature)))))
     :documentation "Delay loading the feature until a certain amount of idle time has passed.")  
   #+end_src

** :disabled
   #+begin_src emacs-lisp
   (setup-define :disabled
     (lambda ()
       `,(setup-quit))
     :documentation "Always stop evaluating the body.")
   #+end_src

** :load-after
   #+begin_src emacs-lisp
   (setup-define :load-after
     (lambda (features &rest body)
       (let ((body `(progn
		      (require ',(setup-get 'feature))
		      ,@body)))
	 (dolist (feature (if (listp features)
			      (nreverse features)
			    (list features)))
	   (setq body `(with-eval-after-load ',feature ,body)))
	 body))
     :documentation "Load the current feature after FEATURES."
     :indent 1)
   #+end_src

** :straight
   #+begin_src emacs-lisp
   (setup-define :straight
     (lambda (recipe)
       `(unless (straight-use-package ',recipe)
	  ,(setup-quit)))
     :documentation
     "Install RECIPE with `straight-use-package'.
   This macro can be used as HEAD, and will replace itself with the
   first RECIPE's package."
     :repeatable t
     :shorthand (lambda (sexp)
		  (let ((recipe (cadr sexp)))
		    (if (consp recipe)
			(car recipe)
		      recipe))))
   #+end_src

* Editing
** Meow
*** Layout Setting
    #+begin_src emacs-lisp
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-dvorak)
      (meow-leader-define-key
       ;; '("n" . meow-motion-origin-command)
       ;; '("p" . meow-motion-origin-command)
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-motion-overwrite-define-key
       ;; custom keybinding for motion state
       ;; '("n" . meow-next)
       ;; '("p" . meow-prev)
       '("<escape>" . ignore))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("<" . meow-beginning-of-thing)
       '(">" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-line)
       '("E" . meow-goto-line)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-join)
       '("k" . meow-kill)
       '("l" . meow-till)
       '("m" . meow-mark-word)
       '("M" . meow-mark-symbol)
       '("n" . meow-next)
       '("N" . meow-next-expand)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-prev)
       '("P" . meow-prev-expand)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-search)
       '("t" . meow-right)
       '("T" . meow-right-expand)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-next-word)
       '("W" . meow-next-symbol)
       '("x" . meow-save)
       '("X" . meow-sync-grab)
       '("y" . meow-yank)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . ignore)))

    #+end_src
*** Main Setting
    #+begin_src emacs-lisp
    ;; For Qwerty
    (setup (:require meow)
      (meow-global-mode 1)
      ;; meow-setup 用于自定义按键绑定，可以直接使用下文中的示例
      (meow-setup)
      ;; 如果你需要在 NORMAL 下使用相对行号（基于 display-line-numbers-mode）
      (meow-setup-line-number)
      ;;:bind ("" . meow-insert-exit)
      (add-to-list 'meow-mode-state-list '(inferior-emacs-lisp-mode . normal))
      (add-to-list 'meow-mode-state-list '(org-agenda-mode . normal)))

    (meow-leader-define-key
     '("SPC" . execute-extended-command)
     '("f" . find-file)
     '("b" . persp-switch-to-buffer*)
     '("k" . persp-kill-buffer*)
     '("i" . persp-ibuffer)
     '("a" . org-agenda))
    #+end_src
** Editing Tools
*** Hungry Delete
    #+begin_src emacs-lisp
    (setup (:require hungry-delete)
      (:hook-into prog-mode lsp-mode))
    #+end_src
*** Evil-nerd-commenter
    #+begin_src emacs-lisp
    (setup (:require evil-nerd-commenter)
      (:global "M-;" evilnc-comment-or-uncomment-lines))
    #+end_src
*** Avy
    #+begin_src emacs-lisp
    (setup (:require avy)
      (meow-leader-define-key
       '("tc" . avy-goto-char)
       '("tw" . avy-goto-word-0)
       '("tl" . avy-goto-line)))
    #+end_src
* Workspace
** COMMENT Persp-mode
   #+begin_src emacs-lisp
   (setup (:require persp-mode)
     (:option persp-keymap-prefix (kbd "C-x p")
	      persp-nil-name "default"
	      persp-set-last-persp-for-new-frames nil
	      persp-kill-foreign-buffer-behaviour 'kill
	      persp-auto-resume-time -1)
     ;; Running `persp-mode' multiple times resets the perspective list...
     (unless (equal persp-mode t)
       (persp-mode)))
   #+end_src
** Perspective-el
   #+begin_src emacs-lisp
   (setup (:straight perspective)
     (:option persp-initial-frame-name "Main"
	      persp-state-default-file (concat user-emacs-directory ".emacs.desktop"))

     (add-hook 'kill-emacs-hook #'persp-state-save)
     ;; Running `persp-mode' multiple times resets the perspective list...
     (unless (equal persp-mode t)
       (persp-mode)))
   #+end_src
* UI Setting
** Line Numbers
   #+begin_src emacs-lisp
   ;; Enable liner number
   (global-display-line-numbers-mode t)

   ;; Disable line numbers for some modes
   (dolist (mode '(org-mode-hook
		   term-mode-hook
		   vterm-mode-hook
		   shell-mode-hook
		   eshell-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))

   #+end_src

** COMMENT Fonts Ligature
   #+begin_src emacs-lisp
   (setup (:straight ligature :host github :repo "mickeynp/ligature.el")
     ;; Enable the "www" ligature in every possible major mode
     (ligature-set-ligatures 't '("www"))
     ;; Enable traditional ligature support in eww-mode, if the
     ;; `variable-pitch' face supports it
     (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
     ;; Enable all Cascadia Code ligatures in programming modes
     (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
					  ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
					  "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
					  "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
					  "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
					  "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
					  "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
					  "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
					  ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
					  "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
					  "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
					  "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
					  "\\\\" "://"))
     ;; Enables ligature checks globally in all buffers. You can also do it
     ;; per mode with `ligature-mode'.
     (global-ligature-mode t))
   #+end_src

** Nyan
   #+begin_src emacs-lisp
   (if IS-GUI
       (setup (:require nyan-mode)
	 (:option nyan-mode t
		  nyan-animate-nyancat t
		  nyan-wavy-trail t)))
   #+end_src

** Highlight TODOs
   #+begin_src emacs-lisp
   (setup (:require hl-todo)
     (:hook-into org-mode prog-mode)
     (:option hl-todo-keyword-faces
	      '(("TODO"   . "#FF0000")
		("FIXME"  . "#FF0000")
		("DEBUG"  . "#A020F0")
		("NEXT" . "#FF4500")
		("TBA" . "#61d290")
		("UNCHECK"   . "#1E90FF"))))

   #+end_src

** Highligh numbers
   #+begin_src emacs-lisp
   (setup (:require highlight-numbers)
     (:hook-into prog-mode))
   #+end_src

** Highlight the diff
   #+begin_src emacs-lisp
   (setup (:require diff-hl)
     (global-diff-hl-mode))
   #+end_src

** Highlight the current buffer
   #+begin_src emacs-lisp
   (setup (:require beacon)
     (beacon-mode 1))
   #+end_src
** Tree-Sitter
   #+begin_src emacs-lisp
   (setup (:straight tree-sitter)
     (global-tree-sitter-mode)
     (add-hook 'lsp-mode-hook #'tree-sitter-hl-mode))

   (setup (:straight tree-sitter-langs))
   #+end_src

* Auto-Tangle Org File
  Tangle (form a new file) on save
  #+begin_src emacs-lisp
  ;; Since we don't want to disable org-confirm-babel-evaluate all
  ;; of the time, do it around the after-save-hook
  (defun dw/org-babel-tangle-dont-ask ()
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask
						'run-at-end 'only-in-org-mode)))
  #+end_src
* Window Management
** Ace Window
   Use =C-x o= to active =ace-window= to swap the windows (less than two windows), or using following arguments (more than two):
   - =x= - delete window
   - =m= - swap windows
   - =M= - move window
   - =c= - copy window
   - =j= - select buffer
   - =n= - select the previous window
   - =u= - select buffer in the other window
   - =c= - split window fairly, either vertically or horizontally
   - =v= - split window vertically
   - =b= - split window horizontally
   - =o= - maximize current window
   - =?= - show these command bindings
   #+begin_src emacs-lisp
   (setup (:require ace-window)
     (:global "C-x o" ace-window)
     (:option aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
     (meow-leader-define-key
      '("wo" . ace-window)
      '("wd" . ace-delete-window)
      '("ws" . ace-swap-window)
      ))
   #+end_src
** COMMENT Edwina
   #+begin_src emacs-lisp
   (use-package edwina
		:disabled
		:config
		(setq display-buffer-base-action '(display-buffer-below-selected))
		(edwina-setup-dwm-keys)
		(edwina-mode 1))
   #+end_src
** Window History with winner-mode
   #+begin_src emacs-lisp
   (setup winner
     (winner-mode)
     (meow-leader-define-key
      '("wu" . winner-undo)
      '("wU" . winner-redo)))
   #+end_src
** Popper
   #+begin_src emacs-lisp
   (setup (:straight popper)
     (:also-load popper-echo)
     (:option popper-reference-buffers
	      '("\\*Messages\\*"
		"Output\\*$"
		"\\*Async Shell Command\\*"
		help-mode
		compilation-mode
		"^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
		"^\\*shell.*\\*$"  shell-mode  ;shell as a popup
		"^\\*term.*\\*$"   term-mode   ;term as a popup
		"^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
		))
     (:global "C-`" popper-toggle-latest
	      "M-`" popper-cycle
	      "C-M-`" popper-toggle-type)
     (popper-mode +1)
     (popper-echo-mode +1))
   #+end_src
** Keybinds to Manage Windows
   #+begin_src emacs-lisp
   (meow-leader-define-key
    '("wh" . split-window-below)
    '("wv" . split-window-right)
    )
   #+end_src
* File Management
** Dired
   #+begin_src emacs-lisp
   (setup dired
     (:also-load dired-hide-dotfiles diredfl)
     (:global "C-x C-j" dired-jump)
     (:option dired-dwim-target t))

   ;; (setup all-the-icons-dired
   ;; 	(:hook-into dired-mode))

   (setup dired-hide-dotfiles
     (:hook-into dired-mode)
     (:with-map dired-mode-map
       (:bind "." dired-hide-dotfiles-mode)))

   (setup diredfl
     (:hook-into dired-mode))
   #+end_src
** Dirvish
   #+begin_src emacs-lisp
   (setup (:straight dirvish)
     (:also-load dirvish-peek)
     (dirvish-override-dired-mode)
     ;; (dirvish-peek-mode)
     )
   #+end_src
** Treemacs
   #+begin_src emacs-lisp
   (setup (:require treemacs)
     (meow-leader-define-key
      '("wt" . treemacs-select-window)))
   #+end_src

* which-key
  #+begin_src emacs-lisp
  (setup (:require which-key)
    (:option which-key-idle-delay 0.3)
    (which-key-mode))

  #+end_src
* Org Mode
** Config Basic Org mode
   #+begin_src emacs-lisp
   ;; (defun dw/org-mode-setup ()
   ;;   (org-indent-mode)
   ;;   (variable-pitch-mode 1)
   ;;   (visual-line-mode 1))

   (setup (:require org)
     (:also-load org-tempo)
     ;; (:hook dw/org-mode-setup)
     (setq org-html-head-include-default-style nil
	   ;; org-ellipsis " ▾"
	   org-adapt-indentation t
	   org-hide-emphasis-markers t
	   org-src-fontify-natively t
	   org-src-tab-acts-natively t
	   org-edit-src-content-indentation 0
	   org-hide-block-startup nil
	   org-src-preserve-indentation nil
	   org-startup-folded 'content
	   org-cycle-separator-lines 2)

     ;; (setq org-modules
     ;; 	'(org-crypt
     ;; 	  org-habit
     ;; 	  org-bookmark
     ;; 	  org-eshell
     ;; 	  org-irc))

     (org-indent-mode)
     (variable-pitch-mode 1)
     (visual-line-mode 1)

     (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

     (setq org-html-htmlize-output-type nil)

     ;; config for images in org
     (auto-image-file-mode t)
     (setq org-image-actual-width nil)
     ;; default image width
     (setq org-image-actual-width '(300))

     (setq org-export-with-sub-superscripts nil)

     ;; 不要自动创建备份文件
     (setq make-backup-files nil))

   #+end_src
** Apperance of Org
*** Bullets
    #+begin_src emacs-lisp
    ;; change bullets for headings
    (setup (:require org-superstar)
      (:load-after org)
      (:hook-into org-mode)
      (:option org-superstar-remove-leading-stars t
	       org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
    #+end_src
*** COMMENT Fonts
    #+begin_src emacs-lisp
    (setup org-faces
      ;; Make sure org and org-indent face is available
      (:also-load org-indent org-faces)
      (:when-loaded

	;; Set Size and Fonts for Headings
	(dolist (face '((org-level-1 . 1.2)
			(org-level-2 . 1.1)
			(org-level-3 . 1.05)
			(org-level-4 . 1.0)
			(org-level-5 . 1.0)
			(org-level-6 . 1.0)
			(org-level-7 . 1.0)
			(org-level-8 . 1.0)))
	  (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

	;; Ensure that anything that should be fixed-pitch in Org files appears that way
	(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
	(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
	(set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
	(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
	(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
	(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
	(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
	(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)


	;; Get rid of the background on column views
	(set-face-attribute 'org-column nil :background nil)
	(set-face-attribute 'org-column-title nil :background nil)))
    #+end_src
*** Set Margins for Modes
    #+begin_src emacs-lisp
    (setup (:require visual-fill-column)
      (:hook-into org-mode)
      (:option visual-fill-column-width 110
	       visual-fill-column-center-text t))
    #+end_src
*** Properly Align Tables
    #+begin_src emacs-lisp
    (setup (:require valign)
      (:hook-into org-mode))
    #+end_src
*** Auto-show Markup Symbols
    #+begin_src emacs-lisp
    (setup (:require org-appear)
      (:hook-into org-mode))
    #+end_src
** Org Export
   #+begin_src emacs-lisp
   (with-eval-after-load "org-export-dispatch"
     ;; Edited from http://emacs.stackexchange.com/a/9838
     (defun dw/org-html-wrap-blocks-in-code (src backend info)
       "Wrap a source block in <pre><code class=\"lang\">.</code></pre>"
       (when (org-export-derived-backend-p backend 'html)
	 (replace-regexp-in-string
	  "\\(</pre>\\)" "</code>\n\\1"
	  (replace-regexp-in-string "<pre class=\"src src-\\([^\"]*?\\)\">"
				    "<pre>\n<code class=\"\\1\">" src))))

     (require 'ox-html)

     (add-to-list 'org-export-filter-src-block-functions
		  'dw/org-html-wrap-blocks-in-code)
     )
   #+end_src
** Org Babel
*** Load Org Babel
    #+begin_src emacs-lisp
    (with-eval-after-load "ob"
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
	 (C . t)
	 (shell . t)
	 (python . t)
	 (R .t)))

      (setq org-confirm-babel-evaluate nil))
    #+end_src
*** Src Block Templates
    #+begin_src emacs-lisp
    ;; This is needed as of Org 9.2
    (setup org-tempo
      (:when-loaded
	(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
	(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	(add-to-list 'org-structure-template-alist '("li" . "src lisp"))
	(add-to-list 'org-structure-template-alist '("cc" . "src C"))
	(add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
	(add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
	(add-to-list 'org-structure-template-alist '("js" . "src js"))
	(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
	(add-to-list 'org-structure-template-alist '("py" . "src python :results output :exports both"))
	(add-to-list 'org-structure-template-alist '("r" . "src R")))
      (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
      (add-to-list 'org-structure-template-alist '("json" . "src json")))
    #+end_src
** Org Roam
   #+begin_src emacs-lisp
   (setup (:require org-roam)
     (setq org-roam-v2-ack t)

     (:option org-roam-directory "~/Documents/Org/Notes"
	      org-roam-completion-everywhere t
	      org-roam-completion-system 'default)
     (:when-loaded
       (org-roam-db-autosync-mode))

     (:global "C-c o l" org-roam-buffer-toggle
	      "C-c o f" org-roam-node-find
	      "C-c o c" org-roam-dailies-capture-today
	      "C-c o g" org-roam-graph)
     (:bind "C-c o i" org-roam-node-insert
	    "C-c o I" org-roam-insert-immediate)
     )
   #+end_src
** Org Agenda
   #+begin_src emacs-lisp
   (with-eval-after-load "org-agenda"

     ;; (setq planner-path "~/Documents/Org/Planner/")


     ;; (defun dw/update-agenda-files()
     ;;   (dolist (file (directory-files planner-path))
     ;;     (when (string-match-p ".*\.org$" file)
     ;; 	(setq org-agenda-files (cons (concat planner-path file) org-agenda-files)))))

     ;; (dw/update-agenda-files)

     (if IS-MAC
	 (setq org-agenda-files '("~/Documents/Org/Planner")))

     (setq org-agenda-start-with-log-mode t)
     (setq org-log-done 'time)
     (setq org-log-into-drawer t)

     ;; Custom TODO states and Agendas
     (setq org-todo-keywords
	   '((sequence "TODO(t)" "NEXT(n)" "TBA(b)" "|" "DONE(d!)")
	     ))

     (setq org-tag-alist
	   '((:startgroup)
	     ;; Put mutually exclusive tags here
	     (:endgroup)
	     ("review" . ?r)
	     ("assignment" . ?a)
	     ("lab" . ?l)
	     ("test" . ?t)
	     ("quiz" . ?q)
	     ("pratice" . ?p)
	     ("emacs" . ?e)
	     ("note" . ?n)
	     ("idea" . ?i)))


     (setup (:require org-super-agenda)
       (:hook-into org-agenda-mode)
       (:option org-agenda-skip-scheduled-if-done t
		org-agenda-skip-deadline-if-done t
		org-agenda-include-deadlines t
		org-agenda-include-diary t
		org-agenda-block-separator nil
		org-agenda-compact-blocks t
		org-agenda-start-with-log-mode t)

       (setq org-agenda-custom-commands
	     '(("d" "Dashboard"
		((agenda "" ((org-agenda-span 'day)

			     (org-super-agenda-groups
			      '((:name "Today"
				       :time-grid t
				       :date today
				       :scheduled today
				       :order 1)
				(:name "Due Soon"
				       :deadline future
				       :order 2)
				(:discard (:anything t))))))
		 (alltodo "" ((org-agenda-overriding-header "")
			      (org-super-agenda-groups
			       '((:name "Overdue"
					:deadline past
					:order 1)
				 (:name "Assignments"
					:tag "assignment"
					:order 2)
				 (:name "Labs"
					:tag "lab"
					:order 3)
				 (:name "Quizs"
					:tag "quiz"
					:order 4)
				 (:name "Tests/Exam"
					:tag "test"
					:order  5)
				 (:name "Projects"
					:tag "Project"
					:order 14)
				 (:name "Emacs"
					:tag "Emacs"
					:order 13)
				 (:discard (:anything t)))))))))))

     ;; Refiling
     (setq org-refile-targets
	   '(("~/Documents/Org/Planner/Archive.org" :maxlevel . 1)))

     ;; Save Org buffers after refiling!
     (advice-add 'org-refile :after 'org-save-all-org-buffers)

     ;; Capture Templates
     (defun dw/read-file-as-string (path)
       (with-temp-buffer
	 (insert-file-contents path)
	 (buffer-string)))

     (setq org-capture-templates
	   `(("t" "Tasks / Projects")
	     ("tt" "Task" entry (file+olp "~/Documents/Org/Planner/Tasks.org" "Inbox")
	      "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1))))
   #+end_src
* Projectile
  #+begin_src emacs-lisp
  (setup (:require projectile)
    (when (file-directory-p "~/Documents/Projects/Code")
      (setq projectile-project-search-path '("~/Documents/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired)

    (projectile-mode)

    (:global "C-M-p" projectile-find-file
	     "C-c p" projectile-command-map))
  #+end_src
* Completion System
** COMMENT Company
*** Company Mode
    #+begin_src emacs-lisp
    (setup (:require company)
      (:hook-into lsp-mode prog-mode conf-mode)
      (:option company-tooltip-align-annotations t
	       ;; Number the candidates (use M-1, M-2 etc to select completions)
	       company-show-numbers t
	       ;; starts with 1 character
	       company-minimum-prefix-length 1
	       ;; Trigger completion immediately
	       company-idle-delay 0.2
	       ;; Back to top when reach the end
	       company-selection-wrap-around t))

    ;;Completion based on AI 
    (setup company-tabnine
      (:when-loaded
	(push '(company-capf :with company-tabnine :separate company-yasnippet :separete) company-backends)))


    #+end_src
*** Company Box
    #+begin_src emacs-lisp
    ;; Add UI for Company
    (setup (:require company-box)
      (:hook-into company-mode)
      (:option company-box-icons-alist 'company-box-icons-all-the-icons))
    #+end_src
*** Company Quickhelp
    #+begin_src emacs-lisp
    (setup (:require company-quickhelp)
      (:hook-into company-mode))
    #+end_src
*** Company Statistics
    #+begin_src emacs-lisp
    (setup (:require company-statistics)
      (company-statistics-mode))
    #+end_src
** Corfu
   #+begin_src emacs-lisp
   (setup (:require corfu)
     (:option
      ;; Optional customizations
      corfu-cycle t                ;; Enable cycling for `corfu-next/previous'
      corfu-auto t                 ;; Enable auto completion
      ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
      corfu-quit-no-match t        ;; Automatically quit if there is no match
      corfu-preview-current nil    ;; Disable current candidate preview
      corfu-echo-documentation nil ;; Disable documentation in the echo area
      corfu-auto-prefix 2)
     (:with-map corfu-map
       (:bind [tab] corfu-next
	      [backtab] corfu-previous
	      "<escape>" corfu-quit))
     (corfu-global-mode)
     )
   ;; corfu backend
   (setup (:require cape)
     (add-to-list 'completion-at-point-functions #'cape-file)
     ;; (add-to-list 'completion-at-point-functions #'cape-tex)
     ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
     ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
     )

   ;; Enable Corfu completion UI
   ;; (straight-use-package '(corfu-doc :type git :host github :repo "galeo/corfu-doc"))
   (setup (:straight (corfu-doc :type git :host github :repo "galeo/corfu-doc"))
     (:hook-into corfu-mode))

   ;; (setup (:pkg svg-lib :type built-in)) ;; built-in has little icons
   (setup (:require kind-icon)
     (:load-after corfu)
     (:option kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
     (:when-loaded
       (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
       ))
   #+end_src
** Vertico
   #+begin_src emacs-lisp
   (defun dw/minibuffer-backward-kill (arg)
     "When minibuffer is completing a file name delete up to parent
   folder, otherwise delete a word"
     (interactive "p")
     (if minibuffer-completing-file-name
	 ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
	 (if (string-match-p "/." (minibuffer-contents))
	     (zap-up-to-char (- arg) ?/)
	   (delete-minibuffer-contents))
       (delete-word (- arg))))

   (setup (:require vertico)
     (vertico-mode)
     (:with-map vertico-map
       (:bind "C-j" vertico-next
	      "C-k" vertico-previous
	      "C-f" vertico-exit))
     (:with-map minibuffer-local-map
       (:bind "M-h" dw/minibuffer-backward-kill))
     (:option vertico-cycle t))
   #+end_src
** Preserve Minibuffer History with savehist-mode
   #+begin_src emacs-lisp
   (setup (:straight savehist)
     (savehist-mode 1)
     (:option history-length 25))
   #+end_src
** Improved Candidate Filtering with Orderless
   #+begin_src emacs-lisp
   (setup (:require orderless)
     (:option completion-styles '(orderless)
	      completion-category-defaults nil
	      completion-category-overrides '((file (styles . (partial-completion))))))
   #+end_src
** Consult Commands
   #+begin_src emacs-lisp
   (setup (:require consult)
     (:global "C-s" consult-line
	      "C-M-l" consult-imenu
	      "C-M-j" persp-switch-to-buffer*)

     (:with-map minibuffer-local-map
       (:bind "C-r" consult-history))

     (defun dw/get-project-root ()
       (when (fboundp 'projectile-project-root)
	 (projectile-project-root)))

     (:option consult-project-root-function #'dw/get-project-root
	      completion-in-region-function #'consult-completion-in-region))

   (setup (:require consult-dir)
     (:global "C-x C-d" consult-dir)
     (:with-map vertico-map
       (:bind "C-x C-d" consult-dir
	      "C-x C-j" consult-dir-jump-file))
     (:option consult-dir-project-list-function nil))
   #+end_src
** Completion Annotations with Marginalia
   #+begin_src emacs-lisp
   (setup (:require marginalia)
     (:option marginalia-annotators '(marginalia-annotators-heavy
				      marginalia-annotators-light
				      nil))
     (marginalia-mode))
   #+end_src
** Embark
   #+begin_src emacs-lisp
   (setup (:require embark-consult)
     (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode)
     )

   (setup (:require embark)
     (:also-load embark-consult)
     (:global "C-." embark-act)

     ;; Show Embark actions via which-key
     (setq embark-action-indicator
	   (lambda (map)
	     (which-key--show-keymap "Embark" map nil nil 'no-paging)
	     #'which-key--hide-popup-ignore-command)
	   embark-become-indicator embark-action-indicator))

  #+end_src

** Citre
   #+begin_src emacs-lisp
   (setup (:straight citre)
     (:also-load citre-config)
     (:global "C-x c j" citre-jump
	      "C-x c J" citre-jump-back
	      "C-x c p" citre-ace-peek
	      "C-x c u" citre-update-this-tags-file)

     (defun dw/get-project-root ()
       (when (fboundp 'projectile-project-root)
	 (projectile-project-root)))

     (:option citre-readtags-program "/etc/profiles/per-user/dez/bin/readtags"
	      citre-ctags-program "/etc/profiles/per-user/dez/bin/ctags"
	      citre-project-root-function #'dw/get-project-root
	      ;; Set this if you want to always use one location to create a tags file.
	      citre-default-create-tags-file-location 'global-cache

	      citre-use-project-root-when-creating-tags t
	      citre-prompt-language-for-ctags-command t
	      citre-auto-enable-citre-mode-modes '(prog-mode)))
   #+end_src

* Helpful Function Description
  #+begin_src emacs-lisp
  (setup (:require helpful)
    (:option counsel-describe-function-function #'helpful-callable
	     counsel-describe-variable-function #'helpful-variable)
    (:global [remap describe-function] helpful-function
	     [remap describe-symbol] helpful-symbol
	     [remap describe-variable] helpful-variable
	     [remap describe-command] helpful-command
	     [remap describe-key] helpful-key))
  #+end_src
 
* Developing
** Developing Tools
*** Smartparens
    #+begin_src emacs-lisp
    (setup (:require smartparens)
      (:also-load smartparens-config)
      (:hook-into prog-mode lsp-mode org-mode)
      (:bind "M-r" sp-rewrap-sexp    
	     "M-s" p-unwrap-sexp
	     "M-[" p-wrap-square
	     "M-{" p-wrap-curly
	     "C-)" p-forward-slur-sexp
	     "C-}" p-forward-barfsexp))
    #+end_src
*** Rainbow Brackets 
    #+begin_src emacs-lisp
    (setup (:require rainbow-delimiters)
      (:hook-into lsp-mode prog-mode))
    #+end_src
*** Rainbow Mode
    #+begin_src emacs-lisp
    (setup (:require rainbow-mode)
      (:hook-into org-mode prog-mode lsp-mode))
    #+end_src
*** Indent Guide
    #+begin_src emacs-lisp
    (setup (:require highlight-indent-guides)
      (:hook-into prog-mode lsp-mode)
      (:option highlight-indent-guides-delay 0
	       highlight-indent-guides-method 'character))
    #+end_src
*** aggressive-indent
    #+begin_src emacs-lisp
    (setup (:require aggressive-indent)
      (:hook-into emacs-lisp-mode lisp-mode python-mode))
    #+end_src
*** Format All
    #+begin_src emacs-lisp
    (setup (:require format-all)
      (:hook-into prog-mode lsp-mode))
    #+end_src
*** quickrun.el
    #+begin_src emacs-lisp
    (setup (:require quickrun)
      ;; set python3 as default
      (quickrun-add-command "python" 
	'((:command . "python3") 
	  (:exec . "%c %s") 
	  (:tempfile . nil)) 
	:default "python")
      (:when-loaded
	(meow-leader-define-key
	 '("qq" . quickrun)
	 '("qs" . quickrun-shell))))
    #+end_src

*** Minimap
    #+begin_src emacs-lisp
    (setup (:require minimap)
      ;; (:hook-into prog-mode lsp-mode)
      (:option minimap-window-location 'right))
    #+end_src
*** Undo-Tree
    #+begin_src emacs-lisp
    (setup (:require undo-tree)
      (global-undo-tree-mode 1))
    #+end_src

** Languages
*** COMMENT Python
    #+begin_src emacs-lisp
    (setup (:require lsp-pyright)
      (add-hook 'python-mode-hook  #'(lambda ()
				       (require 'lsp-pyright)
				       (lsp-deferred))))
    #+end_src
*** Web (HTML/CSS/JS...)
**** JS/TS
     #+begin_src emacs-lisp
     (setup (:require typescript-mode)
       (:file-match "\\.ts\\'")
       (setq typescript-indent-level 2))

     (defun dw/set-js-indentation ()
       (setq-default js-indent-level 2)
       (setq-default tab-width 2))

     (setup (:require js2-mode)
       (:file-match "\\.jsx?\\'")

       ;; Use js2-mode for Node scripts
       (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

       ;; Don't use built-in syntax checking
       (setq js2-mode-show-strict-warnings nil)

       ;; Set up proper indentation in JavaScript and JSON files
       (add-hook 'js2-mode-hook #'dw/set-js-indentation)
       (add-hook 'json-mode-hook #'dw/set-js-indentation))


     (setup (:require rjsx-mode)
       (:file-match "\\.jsx\\'"))

     #+end_src
**** CoffeeScript
     #+begin_src emacs-lisp
     (setup (:require coffee-mode)
       (:file-match "\\.coffee\\'")
       (:also-load sourcemap flymake-coffee)
       ;; automatically clean up bad whitespace
       (setq whitespace-action '(auto-cleanup))
       ;; This gives you a tab of 2 spaces
       (custom-set-variables '(coffee-tab-width 2))

       ;; generating sourcemap by '-m' option. And you must set '--no-header' option
       (setq coffee-args-compile '("-c" "--no-header" "-m"))
       (add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)

       ;; If you want to remove sourcemap file after jumping corresponding point
       (defun my/coffee-after-compile-hook (props)
	 (sourcemap-goto-corresponding-point props)
	 (delete-file (plist-get props :sourcemap)))
       (add-hook 'coffee-after-compile-hook 'my/coffee-after-compile-hook))

     (setup flymake-coffee
       (:hook-into coffee-mode))
     #+end_src
**** HTML
     #+begin_src emacs-lisp
     (setup (:require web-mode)
       (:also-load emmet-mode)
       (:file-match "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")
       (setq-default web-mode-code-indent-offset 2)
       (setq-default web-mode-markup-indent-offset 2)
       (setq-default web-mode-attribute-indent-offset 2))

     #+end_src
**** Emmet
     #+begin_src emacs-lisp
     (setup emmet-mode
       (:hook-into web-mode))
     #+end_src
**** SCSS/SASS
     #+begin_src emacs-lisp
     (setup (:require scss-mode)
       (:file-match "\\.scss\\'")
       (:option scss-compile-at-save t
		scss-output-directory "../css"
		scss-sass-command "sass --no-source-map"))

     #+end_src
*** C/C++
    #+begin_src emacs-lisp
    (setup (:require ccls)
      (:also-load modern-cpp-font-lock))

    (setup modern-cpp-font-lock
      (:hook-into c++-mode))
    #+end_src
*** Java
    #+begin_src emacs-lisp
    (setup (:require lsp-java)
      (add-hook 'java-mode-hook #'lsp))
    #+end_src
*** Nix
    #+begin_src emacs-lisp
    (setup (:require nix-mode)
      (:file-match "\\.nix\\'")
      (:also-load nixos-options nix-sandbox nix-update))
    #+end_src
*** Common Lisp
    #+begin_src emacs-lisp
    (setup (:require slime)
      (:file-match "\\.lisp\\'"))
    #+end_src
*** Latex
**** CDLaTex
     #+begin_src emacs-lisp
     (setup (:require cdlatex)
       (:hook-into LaTeX-mode latex-mode)
       (add-hook 'org-mode-hook #'org-cdlatex-mode))
     #+end_src
**** Xenops
     #+begin_src emacs-lisp
     (if IS-GUI
	 (setup (:require xenops)
	   (:hook-into latex-mode LaTeX-mode org-mode)
	   (:option xenops-math-image-scale-factor 2.0)))

     #+end_src
*** Yaml
    #+begin_src emacs-lisp
    (setup (:require yaml-mode)
      (:file-match "\\.ya?ml\\'"))
    #+end_src
*** R
    #+begin_src emacs-lisp
    (setup (:require ess)
      (:file-match "\\.R\\'"))
    #+end_src
*** Markdown
    #+begin_src emacs-lisp
    (setup (:require markdown-mode)
      (:also-load edit-indirect)
      (:option markdown-command "multimarkdown"))
    #+end_src
** COMMENT Lsp-mode
*** Main Setting
    #+begin_src emacs-lisp
    ;; when using nix to install, cannot find lsp-lens--enable ERROR
    ;; try to use straight to install to fix
    (setup (:straight lsp-mode)
      (setq lsp-keymap-prefix "C-c l")	     
      (:hook lsp-enable-which-key-integration)
      (:hook-into c-mode c++-mode sh-mode)
      (:option lsp-headerline-breadcrumb-enable nil
	       lsp-signature-auto-activate nil
	       lsp-signature-render-documentation nil
	       lsp-log-io nil
	       lsp-idle-delay 0.500
	       lsp-completion-provider :capf)
      (add-to-list 'lsp-language-id-configuration '(scss-mode . "css"))
      (add-to-list 'lsp-language-id-configuration '(less-css-mode . "css")))

    #+end_src
*** Lsp UI
    #+begin_src emacs-lisp
    (setup (:require lsp-ui)
      (:hook-into lsp-mode)
      (:also-load lsp-treemacs)
      (:option lsp-ui-sideline-enable t
	       lsp-ui-sideline-show-hover t
	       lsp-ui-doc-position 'bottom
	       lsp-ui-imenu-auto-refresh t))
    #+end_src
*** Dap Debug Mode
    #+begin_src emacs-lisp
    ;; dap debug tools
    (setup (:straight dap-mode)
      (:load-after lsp)
      (:also-load dap-python dap-node dap-java)
      (:option dap-auto-configure-features '(sessions locals controls tooltip)))
    #+end_src
** eglot
   #+begin_src emacs-lisp
   (setup (:straight eldoc-box)
     (add-hook 'eglot--managed-mode-hook #'eldoc-box-hover-at-point-mode t))
   (setup (:straight eglot))
   #+end_src
** COMMENT Flycheck
   #+begin_src emacs-lisp
   (setup (:require flycheck)
     (:hook-into lsp-mode))
   #+end_src
** Yasnippets
   #+begin_src emacs-lisp
   (setup (:require yasnippet)
     (:option yas-snippet-dirs '("~/.dotfiles/Emacs/snippets"))
     (yas-global-mode 1))

   ;; Snippets Collection
   (setup (:require yasnippet-snippets)
     (:load-after yasnippet))
   #+end_src

* Direnv
  #+begin_src emacs-lisp
  (setup (:require direnv)
    (:when-loaded
      (direnv-mode)))
  #+end_src
* Term/Shells
** Vterm
   #+begin_src emacs-lisp
   ;; Copy from https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-shell.el
   ;; Better term
   ;; @see https://github.com/akermu/emacs-libvterm#installation
   (setup (:require vterm)
     ;; (with-no-warnings
     ;;   (when (posframe-workable-p)
     ;; 	(defvar vterm-posframe--frame nil)
     ;; 	(defun vterm-posframe-toggle ()
     ;; 	  "Toggle `vterm' child frame."
     ;; 	  (interactive)
     ;; 	  (let ((buffer (vterm--internal #'ignore 100))
     ;; 		(width  (max 80 (/ (frame-width) 2)))
     ;; 		(height (/ (frame-height) 2)))
     ;; 	    (if (frame-live-p vterm-posframe--frame)
     ;; 		(progn
     ;; 		  (posframe-delete-frame buffer)
     ;; 		  (setq vterm-posframe--frame nil))
     ;; 	      (setq vterm-posframe--frame
     ;; 		    (posframe-show
     ;; 		     buffer
     ;; 		     :poshandler #'posframe-poshandler-frame-center
     ;; 		     :left-fringe 8
     ;; 		     :right-fringe 8
     ;; 		     :width width
     ;; 		     :height height
     ;; 		     :min-width width
     ;; 		     :min-height height
     ;; 		     :internal-border-width 3
     ;; 		     :internal-border-color (face-foreground 'font-lock-comment-face nil t)
     ;; 		     :background-color (face-background 'tooltip nil t)
     ;; 		     :accept-focus t)))))
     ;; 	(:global "C-`" vterm-posframe-toggle)))

     (:option vterm-max-scrollback 10000))


   (setup (:require multi-vterm))

   (meow-leader-define-key
    '("tm" . multi-vterm)
    ;; '("tp" . vterm-posframe-toggle)
    )
   #+end_src
** eshell
   #+begin_src emacs-lisp
   (setup (:require eshell)

     (setq eshell-directory-name "~/.dotfiles/Emacs/eshell/"
	   eshell-aliases-file (expand-file-name "~/.dotfiles/Emacs/eshell/alias"))

     (:global "C-c m" eshell))

   (setup (:require eshell-prompt-extras)
     (progn
       (setq eshell-highlight-prompt nil
	     epe-git-dirty-char " Ϟ"
	     ;; epe-git-dirty-char "*"
	     eshell-prompt-function 'epe-theme-dakrone)))

   (setup (:require eshell-up)
     (:load-after eshell)
     (:option eshell-up-ignore-case nil))

   (setup (:require eshell-syntax-highlighting)
     (:load-after esh-mode)
     (eshell-syntax-highlighting-global-mode +1))

   (setup (:require esh-autosuggest)
     (:hook-into eshell-mode)
     (:option esh-autosuggest-delay 0.5)
     (set-face-foreground 'company-preview-common "#4b5668")
     (set-face-background 'company-preview nil))

   (setup (:require eshell-vterm)
     (:load-after eshell)
     (eshell-vterm-mode)
     (defalias 'eshell/v 'eshell-exec-visual))

   (setup (:require eshell-toggle)
     (:global "C-M-'" eshell-toggle)
     (:option eshell-toggle-size-fraction 3
	      eshell-toggle-use-projectile-root t
	      eshell-toggle-run-command nil))
   #+end_src
* Tmux
** Emamux
   #+begin_src emacs-lisp
   (setup (:require emamux)
     (:only-if IS-TTY)
     (global-set-key (kbd "C-z") emamux:keymap))
   #+end_src
** Tmux-pane
   #+begin_src emacs-lisp
   (setup (:require tmux-pane)
     (:disabled)
     (:only-if IS-TTY)
     (tmux-pane-mode))
   #+end_src
* Git
** Magit
   #+begin_src emacs-lisp
   (setup (:require magit)
     (:also-load magit-delta)
     (:global "C-M-;" magit-status)
     (:option magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   #+end_src
** Magit-Delta
   Highlight diff by using delta
   #+begin_src emacs-lisp
   (setup magit-delta
     (:hook-into magit-mode))
   #+end_src
* Utilities
** Clipboard managers
   #+begin_src emacs-lisp
   (setup (:require cliphist)
     (:only-if IS-LINUX))
   #+end_src

** Use Trash in Emacs
   #+begin_src emacs-lisp
   (setup (:require osx-trash)
     (:only-if IS-MAC)
     (when (eq system-type 'darwin)
       (osx-trash-setup))
     (setq delete-by-moving-to-trash t))
   #+end_src

* Pass
** pass-store.el
   #+begin_src emacs-lisp
   (setup (:require password-store)
     (:option password-store-password-length 12))
   #+end_src
* EAF
  #+begin_src emacs-lisp
  (add-to-list 'load-path "~/.dotfiles/Emacs/site-lisp/emacs-application-framework/")
  (if IS-GUI
      (setup (:require eaf)
	(:also-load eaf-browser)
	(:option eaf-browser-continue-where-left-off t
		 eaf-browser-enable-adblocker t
		 browse-url-browser-function 'eaf-open-browser)
	(defalias 'browse-web #'eaf-open-browser)))
  #+end_src
* Tramp
  #+begin_src emacs-lisp
  (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
  (setq tramp-default-method "ssh")
  (setq tramp-shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>].* *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
  (setq tramp-verbose 6)
  #+end_src
* EXWM
  #+begin_src emacs-lisp
  (setup (:require exwm)
    (require 'exwm-config)
    (exwm-config-default)
    (require 'exwm-randr)

    (setq exwm-randr-workspace-output-plist '(0 "eDP"))
    (add-hook 'exwm-randr-screen-chenge-hook
	      (lambda ()
		(start-process-shell-command
		 "xrandr" nil "xrandr --output eDP --mode 1920x1080 --pos 0x0 --rotate normal")))
    (exwm-randr-enable)
    (setq display-time-day-and-date t)
    (add-hook 'exwm-init-hook
	      (lambda ()
		(dashboard-refresh-buffer)
		(display-battery-mode +1) ;; Display battery info (if available).
		(display-time-mode +1)))  ;; Display the time in the modeline.
    )
  
  (setpu (:straight dmenu))
  #+end_src
