#+TITLE: DEmacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Some improve in early-init
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
;; -*- coding: utf-8; lexical-binding: t; -*-
(setq read-process-output-max (* 102400 10240))
(setq process-adaptive-read-buffering nil)
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)


;; Copy from https://github.com/willbush/system/blob/master/emacs/early-init.el
(defconst IS-MAC     (eq system-type 'darwin))
(defconst IS-LINUX   (eq system-type 'gnu/linux))

;; Windows And Frames Setting
;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

(setq make-backup-files       nil
      auto-save-default       nil
      inhibit-startup-message t
      inhibit-splash-screen   t
      ring-bell-function      'ignore)

(dolist (mode
         '(tool-bar-mode
           tooltip-mode
           scroll-bar-mode
           blink-cursor-mode))
  (funcall mode 0))

(setq default-frame-alist '((fullscreen . maximized)
                            ;; (alpha-background . 80)
			    ;; (alpha . 90)
			    (undecorated . t)
			    (menu-bar-lines . 0)
			    (tool-bar-lines . 0)
			    (horizontal-scroll-bars . nil)
			    (vertical-scroll-bars . nil)))

(setq package-enable-at-startup nil)

(unless (featurep 'straight)
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage)))

(straight-use-package 'setup)
(eval-when-compile
  (require 'setup))

(straight-use-package 'all-the-icons)

;; Set `doom-themes' early to prevent non-stylized UI flash.
(straight-use-package 'doom-themes)
(setup  (:require doom-themes)
  ;; (load-theme 'doom-xcode t)
  (load-theme 'doom-one t)

  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)

  (doom-themes-org-config)
  )

;; Set `doom-modeline' early to prevent non-stylized UI flash.
;; Note: `doom-modeline' requires M-x all-the-icons-install-fonts.
(straight-use-package 'doom-modeline)
(setup (:require doom-modeline)
  (:hook size-indication-mode)
  (:hook column-number-mode)

  (:hook-into after-init-hook)
  (unless after-init-time
    ;; prevent flash of unstyled modeline at startup
    (setq-default mode-line-format nil))
  ;; Set these early so they don't trigger variable watchers
  (setq doom-modeline-bar-width 3
        doom-modeline-github nil
        doom-modeline-mu4e nil
        doom-modeline-persp-name nil
	doom-modeline-lsp nil
        doom-modeline-minor-modes nil
        doom-modeline-major-mode-icon nil
        doom-modeline-buffer-file-name-style 'relative-from-project
        ;; Only show file encoding if it's non-UTF-8 and different line endings
        ;; than the current OSes preference
        doom-modeline-buffer-encoding 'nondefault
        doom-modeline-default-eol-type
        (cond (IS-MAC 2)
              (0))))
  ;; handled in UI Setting
  ;; (when (daemonp)
  ;;   (setq doom-modeline-icon t)))

(straight-use-package 'posframe)

(when (string> emacs-version "29")
  (pixel-scroll-precision-mode 1))

(if IS-MAC
    (progn
      (setq frame-resize-pixelwise  t)
      (menu-bar-mode t)))

(fset 'yes-or-no-p 'y-or-n-p)

#+end_src
* Setup
#+begin_src emacs-lisp
;; -*- coding: utf-8; lexical-binding: t; -*-
#+end_src
** :daley
#+begin_src emacs-lisp
(setup-define :delay
  (lambda (&rest time)
    `(run-with-idle-timer ,(or time 2)
			  nil ;; Don't repeat
			  (lambda () (require ',(setup-get 'feature)))))
  :documentation "Delay loading the feature until a certain amount of idle time has passed.")  
#+end_src

** :disabled
#+begin_src emacs-lisp
(setup-define :disabled
  (lambda ()
    `,(setup-quit))
  :documentation "Always stop evaluating the body.")
#+end_src

** :load-after
#+begin_src emacs-lisp
(setup-define :load-after
  (lambda (features &rest body)
    (let ((body `(progn
		   (require ',(setup-get 'feature))
		   ,@body)))
      (dolist (feature (if (listp features)
			   (nreverse features)
			 (list features)))
	(setq body `(with-eval-after-load ',feature ,body)))
      body))
  :documentation "Load the current feature after FEATURES."
  :indent 1)
#+end_src

** :straight
#+begin_src emacs-lisp
(setup-define :straight
  (lambda (recipe)
    `(unless (straight-use-package ',recipe)
       ,(setup-quit)))
  :documentation
  "Install RECIPE with `straight-use-package'.
This macro can be used as HEAD, and will replace itself with the
first RECIPE's package."
  :repeatable t
  :shorthand (lambda (sexp)
	       (let ((recipe (cadr sexp)))
		 (if (consp recipe)
		     (car recipe)
		   recipe))))
#+end_src

** :load-from
#+begin_src emacs-lisp
(setup-define :load-from
  (lambda (path)
    `(let ((path* (expand-file-name ,path)))
       (if (file-exists-p path*)
           (add-to-list 'load-path path*)
         ,(setup-quit))))
  :documentation "Add PATH to load path.
This macro can be used as NAME, and it will replace itself with
the nondirectory part of PATH.
If PATH does not exist, abort the evaluation."
  :shorthand (lambda (args)
               (intern
                (file-name-nondirectory
                 (directory-file-name (cadr args))))))
#+end_src
* Startup Setting 
#+begin_src emacs-lisp
(defconst IS-GUI (or (display-graphic-p) (and (daemonp) (not (string= (daemonp) "tty")))))
(defconst IS-TTY (or (not (display-graphic-p)) (and (daemonp) (string= (daemonp) "tty"))))

;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

;; Set the right directory to store the native comp cache
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))


(setup (:straight exec-path-from-shell)
  (:option exec-path-from-shell-arguments '("-l"))
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

(setup (:straight gcmh)
  (:delay)
  (gcmh-mode t))

(setup (:straight super-save)
  (:delay)
  (:option super-save-auto-save-when-idle t
	   super-save-remote-files nil
	   super-save-exclude '(".gpg"))
  (:when-loaded
    ;; add integration with ace-window
    (add-to-list 'super-save-triggers 'ace-window)
    ;; save when back to meow normal state
    (add-to-list 'super-save-triggers 'meow-insert-exit)
    ;; save on find-file
    (add-to-list 'super-save-hook-triggers 'find-file-hook)
    (super-save-mode +1)))

(global-auto-revert-mode 1)
(recentf-mode 1)
(delete-selection-mode t)
#+end_src
* Keyboard Bindings
** Editing Tools
*** Hungry Delete
#+begin_src emacs-lisp
(setup (:straight hungry-delete)
  (global-hungry-delete-mode))
#+end_src
*** Undo
#+begin_src emacs-lisp
(setup (:straight undo-fu))
(setup (:straight undo-fu-session)
  (global-undo-fu-session-mode))

(setup (:straight vundo))
#+end_src
*** Avy
#+begin_src emacs-lisp
(setup (:straight avy)
  (:option  avy-timeout-seconds 0.3))
#+end_src
*** Evil-nerd-commenter
#+begin_src emacs-lisp
(setup (:straight evil-nerd-commenter)
  (:global "M-;" evilnc-comment-or-uncomment-lines))
#+end_src
*** Spelling Checking
#+begin_src emacs-lisp
(setq flyspell-issue-message-flag nil)
(setq ispell-program-name "hunspell")
;; reset the hunspell so it STOPS querying locale!
;; "en_US" is the key to lookup in `ispell-local-dictionary-alist`
(setq ispell-local-dictionary "en_US")
;; two dictionaries "en_US" and "zh_CN" are used. Feel free to remove "zh_CN"
;; If `ispell-local-dictionary-alist' is nil, `ispell-local-dictionary' is passed
;; to hunpsell cli program as dictionary.
(setq ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US" "zh_CN") nil utf-8)))
;; new variable `ispell-hunspell-dictionary-alist' is defined in Emacs
;; If it's nil, Emacs tries to automatically set up the dictionaries.
(when (boundp 'ispell-hunspell-dictionary-alist)
  (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist))

(setup (:straight wucuo))
#+end_src
*** Symbol pairs (embrace.el)
#+begin_src emacs-lisp
(setup (:straight '(embrace :type git :host github :repo "cute-jumper/embrace.el"
			    :fork (:host github :repo "alexluigit/embrace.el")))
  (:option embrace-default-pairs
	   '((?r . ("(" . ")"))
             (?R . ("( " . " )"))
             (?c . ("{" . "}"))
             (?C . ("{ " . " }"))
             (?\[ . ("[" . "]"))
             (?\] . ("[ " . " ]"))
             (?a . ("<" . ">"))
             (?A . ("< " . " >"))
             (?s . ("\"" . "\""))
             (?\' . ("\'" . "\'"))
             (?` . ("`" . "`")))))
#+end_src
** ESC Cancels All
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Meow 
#+begin_src emacs-lisp
(setup (:straight meow)
  (require 'meow)
  (defun meow-setup ()
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     '("0" . delete-window)
     '("1" . delete-other-windows)
     '("2" . split-window-below)
     '("3" . split-window-right)
     '("a" . org-agenda)
     '("b" . switch-to-buffer)
     '("f" . find-file)
     '("h" . embrace-commander)
     '("q" . quickrun)
     '("?" . describe-keymap)
     '(";" . evilnc-comment-or-uncomment-lines)
     '("/" . embrace-commander)
     '("," . beginning-of-buffer)
     '("." . end-of-buffer))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . avy-goto-char-timer)
     '("T" . avy-resume)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))

  (:option meow-use-clipboard t)
  (meow-setup)
  (meow-setup-indicator)
  (meow-global-mode 1)

  ;; Use jk to escape from insert state to normal state
  (defvar meow-two-char-escape-sequence "jk")
  (defvar meow-two-char-escape-delay 0.5)
  (defun meow--two-char-exit-insert-state (s)
    "Exit meow insert state when pressing consecutive two keys.

S is string of the two-key sequence."
    (when (meow-insert-mode-p)
      (let ((modified (buffer-modified-p))
            (undo-list buffer-undo-list))
	(insert (elt s 0))
	(let* ((second-char (elt s 1))
               (event
		(if defining-kbd-macro
                    (read-event nil nil)
		  (read-event nil nil meow-two-char-escape-delay))))
          (when event
            (if (and (characterp event) (= event second-char))
		(progn
                  (backward-delete-char 1)
                  (set-buffer-modified-p modified)
                  (setq buffer-undo-list undo-list)
                  (meow-insert-exit))
              (push event unread-command-events)))))))
  (defun meow-two-char-exit-insert-state ()
    "Exit meow insert state when pressing consecutive two keys."
    (interactive)
    (meow--two-char-exit-insert-state meow-two-char-escape-sequence))
  (define-key meow-insert-state-keymap (substring meow-two-char-escape-sequence 0 1)
    #'meow-two-char-exit-insert-state))
#+end_src
** which-key
#+begin_src emacs-lisp
(setup (:straight which-key)
  (:option which-key-idle-delay 0.3)
  (which-key-mode))

#+end_src
* Workspace
#+begin_src emacs-lisp
(setup (:straight perspective)
  (:option persp-initial-frame-name "Main"
	   persp-state-default-file (concat user-emacs-directory ".emacs.desktop"))
  (setq persp-mode-prefix-key (kbd "C-x p"))

  (add-hook 'kill-emacs-hook #'persp-state-save)
  ;; Running `persp-mode' multiple times resets the perspective list...
  (unless (equal persp-mode t)
    (persp-mode)))
;; Windows/buffers sets shared among frames + save/load.
;; (setup (:straight persp-mode)
;;   (:option persp-keymap-prefix (kbd "C-x p")
;; 	   persp-nil-name "Main"
;; 	   persp-set-last-persp-for-new-frames nil
;; 	   persp-auto-resume-time -1.0
;; 	   persp-kill-foreign-buffer-behaviour 'kill

;; 	   persp-autokill-buffer-on-remove 'kill-weak)
  
;;   (add-hook 'window-setup-hook #'(lambda () (persp-mode 1)))

;;   ;; Eshell integration
;;   (persp-def-buffer-save/load
;;    :mode 'eshell-mode :tag-symbol 'def-eshell-buffer
;;    :save-vars '(major-mode default-directory))

;;   ;; Shell integration
;;   (persp-def-buffer-save/load
;;    :mode 'shell-mode :tag-symbol 'def-shell-buffer
;;    :mode-restore-function (lambda (_) (shell))
;;    :save-vars '(major-mode default-directory)))

;; (setup (:straight workgroups2)
;;   (:delay)
;;   (:option wg-prefix-key (kbd "C-c z")
;; 	   wg-session-file "~/.emacs.d/.emacs_workgroups"
;; 	   workgroups-mode 1))
#+end_src

* UI Setting
** Fonts
#+begin_src emacs-lisp
;; Set default font
(defun dw/set-fonts()
  (interactive)
  (set-face-attribute 'default nil
		      :font "Maple Mono NF"
		      ;; :font "Operator Mono SSm Lig"
		      :weight 'regular
		      :height 140)

  ;; Set the fixed pitch face
  ;; (set-face-attribute 'fixed-pitch nil
  ;; 		    :font "Operator Mono SSm Lig"
  ;; 		    :weight 'light
  ;; 		    :height 140)
  
  ;; Set the variable pitch face
  ;; (set-face-attribute 'variable-pitch nil
  ;; 		    :font "Operator Mono SSm Lig"
  ;; 		    :height 140
  ;; 		    :weight 'light)
  )


(dw/set-fonts)
 (when (daemonp)
    (dw/set-fonts))


(setup (:straight '(ligature :host github :repo "mickeynp/ligature.el"))
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
				       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
				       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
				       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
				       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
				       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
				       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
				       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
				       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
				       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
				       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
				       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
				       "\\\\" "://"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))

(setup (:straight unicode-fonts)
  (unicode-fonts-setup))
#+end_src

** Line Numbers
#+begin_src emacs-lisp
;; Enable liner number
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
		term-mode-hook
		vterm-mode-hook
		shell-mode-hook
		eshell-mode-hook
		xwidget-webkit-mode-hook
		doc-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** COMMENT Nyan
#+begin_src emacs-lisp
(if IS-GUI
    (setup (:straight nyan-mode)
      (:delay)
      (:option nyan-mode nil
	       nyan-animate-nyancat t
	       nyan-wavy-trail t)))
#+end_src

** COMMENT Parrot
#+begin_src emacs-lisp
(setup (:straight parrot)
  (:delay)
  (setq parrot-num-rotations nil))
#+end_src
** Highlight TODOs
#+begin_src emacs-lisp
(setup (:straight hl-todo)
  (:hook-into org-mode)
  (:option hl-todo-keyword-faces
	   '(("TODO"   . "#FF0000")
	     ("FIXME"  . "#FF0000")
	     ("DEBUG"  . "#A020F0")
	     ("NEXT" . "#FF4500")
	     ("TBA" . "#61d290")
	     ("UNCHECK"   . "#1E90FF")))
  (global-hl-todo-mode))

#+end_src

** COMMENT Highligh numbers
#+begin_src emacs-lisp
(setup (:straight highlight-numbers)
  (dolist (hook dw/prog-mode-hook)
    (add-hook hook 'highlight-numbers-mode)))
#+end_src

** Highlight the diff
#+begin_src emacs-lisp
(setup (:straight diff-hl)
  (global-diff-hl-mode))
#+end_src

** Tree-Sitter
#+begin_src emacs-lisp
(straight-use-package 'tree-sitter)
(straight-use-package 'tree-sitter-langs)

(setup tree-sitter
  (:delay)
  (require 'tree-sitter)
  (require 'tree-sitter-langs)
  
  (add-hook 'c-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'python-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'js2-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'typescritpt-mode-hook #'tree-sitter-hl-mode)

  (global-tree-sitter-mode))
#+end_src

** UI Setting
#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (dw/set-fonts))))
  (if (display-graphic-p)
      (dw/set-fonts)))
#+end_src
* Auto-Tangle Org File
Tangle (form a new file) on save
#+begin_src emacs-lisp
;; Since we don't want to disable org-confirm-babel-evaluate all
;; of the time, do it around the after-save-hook
(defun dw/org-babel-tangle-dont-ask ()
  ;; Dynamic scoping to the rescue
  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle)))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask
					      'run-at-end 'only-in-org-mode)))
#+end_src
* Window Management
** Ace Window
Use =C-x o= to active =ace-window= to swap the windows (less than two windows), or using following arguments (more than two):
- =x= - delete window
- =m= - swap windows
- =M= - move window
- =c= - copy window
- =j= - select buffer
- =n= - select the previous window
- =u= - select buffer in the other window
- =c= - split window fairly, either vertically or horizontally
- =v= - split window vertically
- =b= - split window horizontally
- =o= - maximize current window
- =?= - show these command bindings
  #+begin_src emacs-lisp
  (setup (:straight ace-window)
    (:global "C-x o" ace-window)
    (:option aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
  #+end_src
** Window History with winner-mode
#+begin_src emacs-lisp
(setup winner
  (winner-mode))
#+end_src
** Popper
#+begin_src emacs-lisp
(setup (:straight popper)
  (:also-load popper-echo)
  (:option popper-reference-buffers
	   '("\\*Messages\\*"
	     "Output\\*$"
	     "\\*Async Shell Command\\*"
	     help-mode
	     compilation-mode
	     ;; "^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
	     "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
	     "^\\*term.*\\*$"   term-mode   ;term as a popup
	     "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
	     ))
  (:global "C-`" popper-toggle-latest
	   "M-`" popper-cycle
	   "C-M-`" popper-toggle-type)
  (popper-mode +1)
  (popper-echo-mode +1))
#+end_src
* File Management
** Dired
#+begin_src emacs-lisp
(setup dired
  (:also-load dired-x)
  (:option dired-listing-switches "-g --almost-all --human-readable --time-style=long-iso --group-directories-first --no-group"
	   dired-dwim-target t
	   dired-hide-details-hide-symlink-targets nil
	   dired-mouse-drag-files t                   ; added in Emacs 29
	   mouse-drag-and-drop-region-cross-program t ; added in Emacs 29
	   dired-kill-when-opening-new-dired-buffer t ; added in Emacs 28 dired-recursive-copies 'always)
	   dired-recursive-deletes 'always
	   delete-by-moving-to-trash t)
  (with-eval-after-load 'dired-x
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..*$"))))

(setup (:straight dired-hide-dotfiles)
  (:hook-into dired-mode)
  (:with-map dired-mode-map
    (:bind "." dired-hide-dotfiles-mode)))
#+end_src
** Dirvish
#+begin_src emacs-lisp
(setup (:straight dirvish)
  (dirvish-override-dired-mode))
#+end_src
* Org Mode
** Config Basic Org mode
#+begin_src emacs-lisp
(defun dw/org-mode-setup ()
  (org-indent-mode)
  (visual-line-mode 1))

(setup (:straight org)
  (:hook dw/org-mode-setup)		
  (setq org-html-head-include-default-style nil
	;; org-ellipsis " ▾"
	org-adapt-indentation t
	org-hide-emphasis-markers t
	org-src-fontify-natively t
	org-src-tab-acts-natively t
	org-edit-src-content-indentation 0
	org-hide-block-startup nil
	org-src-preserve-indentation nil
	org-startup-folded 'content
	org-cycle-separator-lines 2)

  (setq org-html-htmlize-output-type nil)

  ;; config for images in org
  (auto-image-file-mode t)
  (setq org-image-actual-width nil)
  ;; default image width
  (setq org-image-actual-width '(300))

  (setq org-export-with-sub-superscripts nil)
  )
#+end_src
** Apperance of Org   
*** Fonts and Bullets
#+begin_src emacs-lisp
;; change bullets for headings
(setup (:straight org-superstar)
  (:load-after org)
  (:hook-into org-mode)
  (:option org-superstar-remove-leading-stars t
	   org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

;; (setup org-faces
;;   ;; Make sure org-indent face is available
;;   (:also-load org-indent)
;;   (:when-loaded
;;     ;; Increase the size of various headings
;;     (set-face-attribute 'org-document-title nil :font "SF Pro" :weight 'bold :height 1.3)

;;     (dolist (face '((org-level-1 . 1.15)
;;                     (org-level-2 . 1.1)
;;                     (org-level-3 . 1.05)
;;                     (org-level-4 . 1.0)
;;                     (org-level-5 . 1.0)
;;                     (org-level-6 . 1.0)
;;                     (org-level-7 . 1.0)
;;                     (org-level-8 . 1.0)))
;;       (set-face-attribute (car face) nil :font "SF Pro" :weight 'medium :height (cdr face)))

;;     ;; Ensure that anything that should be fixed-pitch in Org files appears that way
;;     (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
;;     (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
;;     (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
;;     (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
;;     (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
;;     (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
;;     (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
;;     (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
;;     (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

;;     ;; Get rid of the background on column views
;;     (set-face-attribute 'org-column nil :background nil)
;;     (set-face-attribute 'org-column-title nil :background nil)))
#+end_src
*** Set Margins for Modes
#+begin_src emacs-lisp
(setup (:straight visual-fill-column)
  (:hook-into org-mode)
  (:option visual-fill-column-width 120
	   visual-fill-column-center-text t))
#+end_src
*** Properly Align Tables
#+begin_src emacs-lisp
(setup (:straight valign)
  (:hook-into org-mode))
#+end_src
*** Auto-show Markup Symbols
#+begin_src emacs-lisp
(setup (:straight org-appear)
  (:hook-into org-mode))
#+end_src
** Org Export
#+begin_src emacs-lisp
(with-eval-after-load "org-export-dispatch"
  ;; Edited from http://emacs.stackexchange.com/a/9838
  (defun dw/org-html-wrap-blocks-in-code (src backend info)
    "Wrap a source block in <pre><code class=\"lang\">.</code></pre>"
    (when (org-export-derived-backend-p backend 'html)
      (replace-regexp-in-string
       "\\(</pre>\\)" "</code>\n\\1"
       (replace-regexp-in-string "<pre class=\"src src-\\([^\"]*?\\)\">"
				 "<pre>\n<code class=\"\\1\">" src))))

  (require 'ox-html)

  (add-to-list 'org-export-filter-src-block-functions
	       'dw/org-html-wrap-blocks-in-code)
  )
#+end_src
** Org Babel
*** Load Org Babel
#+begin_src emacs-lisp
(with-eval-after-load "ob"
  (straight-use-package '(ob-racket
			  :type git :host github :repo "hasu/emacs-ob-racket"
			  :files ("*.el" "*.rkt")))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     (shell . t)
     (python . t)
     (racket . t)
     ))

  (setq org-confirm-babel-evaluate nil))
#+end_src
*** Src Block Templates
#+begin_src emacs-lisp
;; This is needed as of Org 9.2
(setup (:require org-tempo)
  (:when-loaded
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("cc" . "src C"))
    (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("js" . "src js"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python :results output :exports both"))
    (add-to-list 'org-structure-template-alist '("r" . "src R"))
    (add-to-list 'org-structure-template-alist '("rkt" . "src racket"))
    (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))
    (add-to-list 'org-structure-template-alist '("sql" . "src sql-mode"))))
#+end_src
** Org Agenda
#+begin_src emacs-lisp
(with-eval-after-load "org-agenda"

  (if IS-MAC
      (setq org-agenda-files '("~/Documents/Org/Planner")))


  ;; Custom TODO states and Agendas
  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "TBA(b)" "|" "DONE(d!)")))

  (setq org-tag-alist
	'((:startgroup)
	  ;; Put mutually exclusive tags here
	  (:endgroup)
	  ("review" . ?r)
	  ("assignment" . ?a)
	  ("lab" . ?l)
	  ("test" . ?t)
	  ("quiz" . ?q)
	  ("pratice" . ?p)
	  ("emacs" . ?e)
	  ("note" . ?n)
	  ("idea" . ?i)))


  (setup (:straight org-super-agenda)
    (:hook-into org-agenda-mode)
    (:option org-agenda-skip-scheduled-if-done t
	     org-agenda-skip-deadline-if-done t
	     org-agenda-include-deadlines t
	     org-agenda-include-diary t
	     org-agenda-block-separator nil
	     org-agenda-compact-blocks t
	     org-log-done 'time
	     org-log-into-drawer t
	     org-agenda-start-with-log-mode t)

    (setq org-agenda-custom-commands
	  '(("d" "Dashboard"
	     ((agenda "" ((org-agenda-span 'day)

			  (org-super-agenda-groups
			   '((:name "Today"
				    :time-grid t
				    :date today
				    :scheduled today
				    :order 1)
			     (:name "Due Soon"
				    :deadline future
				    :order 2)
			     (:discard (:anything t))))))
	      (alltodo "" ((org-agenda-overriding-header "")
			   (org-super-agenda-groups
			    '((:name "Overdue"
				     :deadline past
				     :order 1)
			      (:name "Assignments"
				     :tag "assignment"
				     :order 2)
			      (:name "Labs"
				     :tag "lab"
				     :order 3)
			      (:name "Quizs"
				     :tag "quiz"
				     :order 4)
			      (:name "Tests/Exam"
				     :tag "test"
				     :order  5)
			      (:name "Projects"
				     :tag "Project"
				     :order 14)
			      (:name "Emacs"
				     :tag "Emacs"
				     :order 13)
			      (:discard (:anything t)))))))))))

  ;; Refiling
  (setq org-refile-targets
	'(("~/Documents/Org/Planner/Archive.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; Capture Templates
  (defun dw/read-file-as-string (path)
    (with-temp-buffer
      (insert-file-contents path)
      (buffer-string)))

  (setq org-capture-templates
	`(("t" "Tasks / Projects")
	  ("tt" "Task" entry (file+olp "~/Documents/Org/Planner/Tasks.org" "Inbox")
	   "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1))))
#+end_src
** Org Roam
#+begin_src emacs-lisp
(setup (:straight org-roam)

  (:option org-roam-directory "~/Documents/Org/Notes"
	   org-roam-database-connecter 'splite-builtin
	   org-roam-completion-everywhere t
	   org-roam-completion-system 'default)
  (:when-loaded
    (org-roam-db-autosync-mode))

  (:global "C-c o l" org-roam-buffer-toggle
	   "C-c o f" org-roam-node-find
	   "C-c o c" org-roam-dailies-capture-today
	   "C-c o g" org-roam-graph)
  (:bind "C-c o i" org-roam-node-insert
	 "C-c o I" org-roam-insert-immediate))

(setup (:straight org-roam-ui)
  (:option org-roam-ui-sync-theme t
	   org-roam-ui-follow t
	   org-roam-ui-update-on-save t
	   org-roam-ui-open-on-start t))
#+end_src
* Completion System
** Vertico Marginalia Consult Orderless Embark
#+Begin_src emacs-lisp
(setup (:straight vertico marginalia consult consult-dir orderless embark embark-consult savehist)
  ;; Vertico
  (:option vertico-cycle t
           vertico-mode t)

  ;; Marginalia
  (:option marginalia-annotators '(marginalia-annotators-heavy
				   marginalia-annotators-light
				   nil)
	   marginalia-mode t)
  
  (:bind-into minibuffer-local-map
    "M-A" marginalia-cycle)
  
  ;; Consult
  (:global [remap switch-to-buffer] #'consult-buffer
           [remap goto-line] #'consult-goto-line
           [remap imenu] #'consult-imenu
           [remap project-switch-to-buffer] #'consult-project-buffer
           "M-s g" (if (executable-find "rg")
                       #'consult-ripgrep
                     #'consult-grep)
           "M-s d" consult-find
           "M-s l" consult-line
           "M-s m" consult-mark
           "M-s o" consult-outline
           "M-s f" consult-flymake)
  (:with-map minibuffer-local-map
    (:bind "C-r" consult-history))
  (:option xref-show-xrefs-function #'consult-xref
           xref-show-definitions-function #'consult-xref)

  ;; Consult-dir
  (:global "C-x C-d" consult-dir)
  (:with-map vertico-map
    (:bind "C-x C-d" consult-dir
	   "C-x C-j" consult-dir-jump-file))
  (:option consult-dir-project-list-function nil)

  
  ;; Orderless
  (:option completion-styles  '(orderless basic flex)
	   completion-category-defaults nil
	   completion-category-overrides '((file (styles . (partial-completion)))))

  ;; Savehist
  (:option history-length 25)

  ;; Embark
  (:global "C-." embark-act)
  (:with-map minibuffer-local-map
    (:bind "C-." embark-act
	   "C-," embark-become))

  ;; Embark-consult
  (add-hook #'embark-collect-mode-hook 'consult-preview-at-point-mode))
#+end_src
** Yasnippets
#+begin_src emacs-lisp
(setup (:straight yasnippet)
  (:delay)
  (require 'yasnippet)
  (:option yas-snippet-dirs '("~/.dotfiles/Emacs/snippets"))
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode))
;; (add-hook 'org-mode-hook #'yas-minor-mode))
#+end_src

** Citre
#+begin_src emacs-lisp
(setup (:straight citre)
  (:also-load citre-config)
  (:global "C-x c j" citre-jump
	   "C-x c J" citre-jump-back
	   "C-x c p" citre-ace-peek
	   "C-x c u" citre-update-this-tags-file)

  (defun dw/get-project-root ()
    (when (fboundp 'projectile-project-root)
      (projectile-project-root)))

  (:option citre-readtags-program "/etc/profiles/per-user/dez/bin/readtags"
	   citre-ctags-program "/etc/profiles/per-user/dez/bin/ctags"
	   citre-project-root-function #'dw/get-project-root
	   ;; Set this if you want to always use one location to create a tags file.
	   citre-default-create-tags-file-location 'global-cache

	   citre-use-project-root-when-creating-tags t
	   citre-prompt-language-for-ctags-command t
	   citre-auto-enable-citre-mode-modes '(prog-mode)))
#+end_src

** Corfu
#+begin_src emacs-lisp
(setup (:straight corfu corfu-doc cape kind-icon tempel)

  ;; corfu
  (:also-load dabbrev)
  (:load-from (expand-file-name "straight/build/corfu/extensions" user-emacs-directory))
  (:require corfu-history corfu-info)
  (:option
   corfu-cycle t                ;; Enable cycling for `corfu-next/previous'
   corfu-auto t                 ;; Enable auto completion
   corfu-quit-at-boundary t     ;; Automatically quit at word boundary
   corfu-quit-no-match t        ;; Automatically quit if there is no match
   corfu-preview-current nil    ;; Disable current candidate preview
   ;; corfu-echo-documentation nil ;; Disable documentation in the echo area
   corfu-echo-documentation 0.25
   corfu-preselect-first nil
   ;; corfu-auto-delay 0.2
   corfu-auto-prefix 1
   ;; corfu-excluded-modes dw/prog-mode
   )
  
  (:with-map corfu-map
    (:bind
     [tab] corfu-next
     [backtab] corfu-previous
     "<escape>" corfu-quit))

  (when (or (daemonp) (not (display-graphic-p)))
    (progn
      (global-corfu-mode)
      (corfu-history-mode)
      (corfu-doc-mode)))

  ;; cape
  (:option cape-dabbrev-min-length 3)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)

  ;;kind-icon
  (:option kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  (:when-loaded
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  ;; tempel
  (:option tempel-path "~/.dotfiles/Emacs/templates")
  (global-tempel-abbrev-mode))

(if IS-TTY
    (progn
      (straight-use-package
       '(popon :type git :repo "https://codeberg.org/akib/emacs-popon.git"))
      (straight-use-package
       '(corfu-terminal :type git :repo "https://codeberg.org/akib/emacs-corfu-terminal.git"))
      (require 'corfu-terminal)
      (corfu-terminal-mode +1)
      (straight-use-package
       '(corfu-doc-terminal :type git :repo "https://codeberg.org/akib/emacs-corfu-doc-terminal.git"))
      (corfu-doc-terminal-mode +1)))
#+end_src
* Helpful Function Description
#+begin_src emacs-lisp
(setup (:straight helpful)
  (:option counsel-describe-function-function #'helpful-callable
	   counsel-describe-variable-function #'helpful-variable)
  (:global [remap describe-function] helpful-function
	   [remap describe-symbol] helpful-symbol
	   [remap describe-variable] helpful-variable
	   [remap describe-command] helpful-command
	   [remap describe-key] helpful-key))
#+end_src
 
* Developing
** Developing Tools
*** Brackets 
#+begin_src emacs-lisp
(electric-indent-mode 1)
(electric-pair-mode 1)
(electric-quote-mode -1)

(setup (:require rainbow-delimiters)
  (:hook-into prog-mode))
#+end_src
*** Indent
#+begin_src emacs-lisp
(setup (:straight highlight-indent-guides)
  (require 'highlight-indent-guides)
  (:option highlight-indent-guides-auto-enabled nil
	   highlight-indent-guides-delay 0
	   highlight-indent-guides-method 'character)
  
  (set-face-background 'highlight-indent-guides-odd-face "darkgray")
  (set-face-background 'highlight-indent-guides-even-face "dimgray")
  (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
  (:hook-into prog-mode))

;;(setup (:straight aggressive-indent)
;;  (:hook-into emacs-lisp-mode lisp-mode python-mode))
#+end_src
*** Rainbow Mode
#+begin_src emacs-lisp
(setup (:straight rainbow-mode)
  (:hook-into web-mode js2-mode emacs-lisp-mode))
#+end_src
*** Format All
#+begin_src emacs-lisp
(setup (:straight format-all)
  (:delay)
  (:hook-into prog-mode))
#+end_src
*** quickrun.el
#+begin_src emacs-lisp
(setup (:straight quickrun)
  ;; set python3 as default
  (quickrun-add-command "python" 
    '((:command . "python3") 
      (:exec . "%c %s") 
      (:tempfile . nil))
    :default "python"))
#+end_src

*** Text Folding
#+begin_src emacs-lisp
;; (setup (:straight origami)
;;   (:load-after prog-mode)
;;   (:hook-into prog-mode))
(with-eval-after-load 'prog-mode
  (add-hook #'prog-mode-hook 'hs-minor-mode))
#+end_src

*** COMMENT Flycheck
#+begin_src emacs-lisp
(setup (:straight flycheck)
  (:hook-into lsp-bridge-mode))

(setup (:straight flycheck-inline)
  (:load-after flycheck)
  (:hook-into flycheck-mode))
#+end_src

*** Front-end For Interacting With External Debuggers
#+begin_src emacs-lisp
(straight-use-package 'realgud)
#+end_src
** Languages
*** Python
#+begin_src emacs-lisp
(setup (:straight lsp-pyright))

(setup (:straight jupyter))

(setup (:straight ein))
#+end_src
*** Web (HTML/CSS/JS...)
**** JS/TS
#+begin_src emacs-lisp
(setup (:straight typescript-mode)
  (:file-match "\\.ts\\'")
  (setq typescript-indent-level 2))

(defun dw/set-js-indentation ()
  (setq-default js-indent-level 2)
  (setq-default tab-width 2))

(setup (:straight js2-mode)
  (:file-match "\\.jsx?\\'")

  ;; Use js2-mode for Node scripts
  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

  ;; Don't use built-in syntax checking
  (setq js2-mode-show-strict-warnings nil)

  ;; Set up proper indentation in JavaScript and JSON files
  (add-hook 'js2-mode-hook #'dw/set-js-indentation)
  (add-hook 'json-mode-hook #'dw/set-js-indentation))


(setup (:straight rjsx-mode)
  (:file-match "\\.jsx\\'"))

(setup (:straight add-node-modules-path)
  (eval-after-load 'js2-mode
    '(add-hook 'js2-mode-hook #'add-node-modules-path))
  (eval-after-load 'typescript-mode
    '(add-hook 'typescript-mode-hook #'add-node-modules-path)))
#+end_src
**** CoffeeScript
#+begin_src emacs-lisp
(setup (:straight coffee-mode)
  (:file-match "\\.coffee\\'")
  (:also-load sourcemap flymake-coffee)
  ;; automatically clean up bad whitespace
  (setq whitespace-action '(auto-cleanup))
  ;; This gives you a tab of 2 spaces
  (custom-set-variables '(coffee-tab-width 2))

  ;; generating sourcemap by '-m' option. And you must set '--no-header' option
  (setq coffee-args-compile '("-c" "--no-header" "-m"))
  (add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)

  ;; If you want to remove sourcemap file after jumping corresponding point
  (defun my/coffee-after-compile-hook (props)
    (sourcemap-goto-corresponding-point props)
    (delete-file (plist-get props :sourcemap)))
  (add-hook 'coffee-after-compile-hook 'my/coffee-after-compile-hook))

(setup (:straight flymake-coffee)
  (:hook-into coffee-mode))
#+end_src
**** HTML
#+begin_src emacs-lisp
(setup (:straight web-mode)
  ;; (:file-match "(\\.\\(html?\\|ejs\\)\\'")
  (:file-match "\\.html?\\'")
  (setq-default web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-attribute-indent-offset 2))

;; 1. Start the server with `httpd-start'
;; 2. Use `impatient-mode' on any buffer
(setup (:straight impatient-mode))
(setup (:straight skewer-mode))
#+end_src
**** Emmet
#+begin_src emacs-lisp
(setup (:straight emmet-mode)
  (:hook-into web-mode css-mode))
#+end_src
**** SCSS/SASS
#+begin_src emacs-lisp
(setup (:straight scss-mode)
  (:file-match "\\.scss\\'")
  (:option scss-compile-at-save t
	   scss-output-directory "../css"
	   scss-sass-command "sass --no-source-map"))

#+end_src
*** C/C++
#+begin_src emacs-lisp
(setup c
  (:option c-default-style "gnu"))
#+end_src
*** Java
#+begin_src emacs-lisp
;; (setup (:straight lsp-java))
#+end_src
*** Nix
#+begin_src emacs-lisp
(straight-use-package 'nixos-options)
(straight-use-package 'nix-sandbox)
(straight-use-package 'nix-update)
(setup (:straight nix-mode)
  (:file-match "\\.nix\\'")
  (:also-load nixos-options nix-sandbox nix-update))
#+end_src
*** Docker
#+begin_src emacs-lisp
(setup (:straight docker)
  (:delay))

(setup (:straight dockerfile-mode)
  (:file-match "Dockerfile\\'"))

(setup (:straight docker-tramp)
  (:delay))
#+end_src
*** Common Lisp
#+begin_src emacs-lisp
;; (setup (:straight slime)
;;        (:file-match "\\.lisp\\'"))

(setup (:straight sly)
  (:file-match "\\.lisp\\'"))
#+end_src
*** Racket
#+begin_src emacs-lisp
(setup (:straight racket-mode)
  (:file-match "\\.rkt\\'")
  (add-hook 'racket-mode-hook #'(lambda ()
				  (setq-local lsp-bridge-mode nil)
				  (setq-local corfu-mode t)
				  (setq-local eldoc-mode nil)))
  (add-hook 'racket-mode-hook #'racket-xp-mode))
#+end_src
*** Haskell
#+begin_src emacs-lisp
(setup (:straight haskell-mode)
  (:file-match "\\.hs\\'"))

(eval-after-load 'lsp
  (straight-use-package 'lsp-haskell))

(add-hook 'haskell-mode-hook #'(lambda ()
				 (setq-local lsp-bridge-mode nil)
				 (setq-local corfu-mode t)))

#+end_src
*** Latex
**** CDLaTex
#+begin_src emacs-lisp
(straight-use-package 'auctex)
(setup (:straight cdlatex)
  (:hook-into LaTeX-mode latex-mode)
  (add-hook 'org-mode-hook #'org-cdlatex-mode))
#+end_src
**** Xenops
#+begin_src emacs-lisp
(if IS-GUI
    (setup (:straight xenops)
      (:hook-into latex-mode LaTeX-mode org-mode)
      (:option xenops-math-image-scale-factor 2.0)))

#+end_src
*** Yaml
#+begin_src emacs-lisp
(setup (:straight yaml-mode)
  (:file-match "\\.ya?ml\\'"))
#+end_src
*** R
#+begin_src emacs-lisp
(setup (:straight ess)
  (add-to-list 'auto-mode-alist
	       (cons "\\.R\\'" 'R-mode)))
#+end_src
*** Markdown
#+begin_src emacs-lisp
(setup (:straight markdown-mode)
  (straight-use-package 'edit-indirect)
  (:option markdown-command "multimarkdown"))
#+end_src
*** SQL
#+begin_src emacs-lisp
(eval-after-load 'sql-mode
	(setup (:straight ob-sql-mode)))
#+end_src
** eglot
#+begin_src emacs-lisp
(setup (:straight eldoc-box)
  (add-hook 'eglot--managed-mode-hook #'eldoc-box-hover-at-point-mode t))
(setup (:straight eglot)
  (setq eglot-events-buffer-size 0))
#+end_src
** Lsp-mode
#+begin_src emacs-lisp
;; (setup (:straight lsp-mode)
;;   (:option lsp-headerline-breadcrumb-enable nil)

;; (setq lsp-completion-provider :none)
;; (defun corfu-lsp-setup ()
;;   (setq-local completion-styles '(orderless)
;; 							completion-category-defaults nil))
;; (add-hook 'lsp-mode-hook #'corfu-lsp-setup)

;;   (:when-loaded
;;     (:option
;;      lsp-signature-auto-activate nil
;;      lsp-signature-render-documentation nil
;;      lsp-log-io nil
;;      lsp-idle-delay 0.500)))

(straight-use-package 'lsp-mode)
(setq lsp-headerline-breadcrumb-enable nil)
(require 'lsp-mode)

(setq lsp-completion-provider :none)
(defun corfu-lsp-setup ()
  (setq-local completion-styles '(orderless)
							completion-category-defaults nil))
(add-hook 'lsp-mode-hook #'corfu-lsp-setup)

(eval-after-load 'lsp-mode
	(setq lsp-signature-auto-activate nil
				lsp-signature-render-documentation nil
				lsp-log-io nil
				lsp-idle-delay 0.500))


(setup (:require lsp-ui)
  (:load-after lsp-mode)
  (:hook-into lsp-mode)
  (:also-load lsp-treemacs)
  (:when-loaded
    (setq lsp-ui-sideline-enable t
					lsp-ui-sideline-show-hover nil
					lsp-ui-doc-position 'bottom
					lsp-ui-imenu-auto-refresh t)
    (lsp-ui-doc-show)))

;; dap debug tools
(setup (:straight dap-mode)
  (:load-after lsp-mode)
  (:when-loaded
    (:option dap-auto-configure-features '(sessions locals controls tooltip))
    (require 'dap-node)
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)))
#+end_src
** Lsp-bridge
#+begin_src emacs-lisp
(when (and (not (daemonp)) (display-graphic-p))
  (setup lsp-bridge
    (:load-from "~/.dotfiles/Emacs/site-lisp/lsp-bridge/")
    (:delay)
    (require 'lsp-bridge)

    (:option
     acm-enable-search-words nil
     acm-enable-icon t
     acm-enable-tabnine-helper t
     lsp-bridge-complete-manually nil
     lsp-bridge-c-lsp-server "clangd"
     lsp-bridge--mode-line-format nil)
    
    (global-lsp-bridge-mode)
    
    ;; 融合 `lsp-bridge' `find-function' 以及 `dumb-jump' 的智能跳转
    (defun lsp-bridge-jump ()
      (interactive)
      (cond
       ((eq major-mode 'emacs-lisp-mode)
	(let ((symb (function-called-at-point)))
	  (when symb
            (find-function symb))))
       (lsp-bridge-mode
	(lsp-bridge-find-def))
       (t
	(require 'dumb-jump)
	(dumb-jump-go))))

    (defun lsp-bridge-jump-back ()
      (interactive)
      (cond
       (lsp-bridge-mode
	(lsp-bridge-return-from-def))
       (t
	(require 'dumb-jump)
	(dumb-jump-back))))))

#+end_src
* Direnv
#+begin_src emacs-lisp
;; (setup (:straight direnv)
;; 	(direnv-mode))

(setup (:straight envrc)
  (defun dw/maybe-enable-envrc-global-mode ()
    "Enable `envrc-global-mode' if `direnv' is installed."
    (when (executable-find "direnv")
      (envrc-global-mode)))

  (with-eval-after-load 'envrc
    (define-key envrc-mode-map (kbd "C-c e") 'envrc-command-map))
  (add-hook 'after-init-hook 'dw/maybe-enable-envrc-global-mode))
#+end_src
* Term/Shells
** Vterm
#+begin_src emacs-lisp
;; Copy from https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-shell.el
;; Better term
;; @see https://github.com/akermu/emacs-libvterm#installation
(setup (:straight vterm)
  (with-no-warnings
    (when (posframe-workable-p)
      (defvar vterm-posframe--frame nil)
      (defun vterm-posframe-toggle ()
	"Toggle `vterm' child frame."
	(interactive)
	(let ((buffer (vterm--internal #'ignore 100))
	      (width  (max 80 (/ (frame-width) 2)))
	      (height (/ (frame-height) 2)))
	  (if (frame-live-p vterm-posframe--frame)
	      (progn
		(posframe-delete-frame buffer)
		(setq vterm-posframe--frame nil))
	    (setq vterm-posframe--frame
		  (posframe-show
		   buffer
		   :poshandler #'posframe-poshandler-frame-center
		   :left-fringe 8
		   :right-fringe 8
		   :width width
		   :height height
		   :min-width width
		   :min-height height
		   :internal-border-width 3
		   :internal-border-color (face-foreground 'font-lock-comment-face nil t)
		   :background-color (face-background 'tooltip nil t)
		   :accept-focus t)))))
      (:global "C-`" vterm-posframe-toggle)))

  (:option vterm-max-scrollback 10000))


(setup (:straight multi-vterm))
#+end_src
** eshell
#+begin_src emacs-lisp
(setup (:straight eshell)

  (setq eshell-directory-name "~/.dotfiles/Emacs/eshell/")
  ;; eshell-aliases-file (expand-file-name "~/.dotfiles/Emacs/eshell/alias"))

  (if (executable-find "exa")
      (defalias 'eshell/ls 'exa))

  (:global "C-c m" eshell))

(setup (:straight eshell-prompt-extras)
  (with-eval-after-load "esh-opt"
    (autoload 'epe-theme-lambda "eshell-prompt-extras")
    (setq eshell-highlight-prompt nil
	  eshell-prompt-function 'epe-theme-lambda)))

(setup (:straight eshell-up)
  (:load-after eshell)
  (:option eshell-up-ignore-case nil))

(setup (:straight eshell-syntax-highlighting)
  (:load-after esh-mode)
  (eshell-syntax-highlighting-global-mode +1))

;; bit slowly but mainly to avoid requiring company so far
;; (setup (:straight esh-autosuggest)
;;        (:hook-into eshell-mode)
;;        (:option esh-autosuggest-delay 0.5))

(setup (:straight esh-help)
  (setup-esh-help-eldoc))

(setup (:straight eshell-vterm)
  (:load-after eshell)
  (eshell-vterm-mode)
  (defalias 'eshell/v 'eshell-exec-visual))

(setup (:straight eshell-toggle)
  (:global "C-M-s" eshell-toggle)
  (:option eshell-toggle-size-fraction 3
	   eshell-toggle-use-projectile-root t
	   eshell-toggle-run-command nil))
#+end_src
* Git
** Magit
#+begin_src emacs-lisp
(setup (:straight magit)
  (:delay)
  (:also-load magit-delta)
  (:global "C-M-;" magit-status)
  (:option magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Magit-Delta
Highlight diff by using delta
#+begin_src emacs-lisp
(setup (:straight magit-delta)
  (:hook-into magit-mode))
#+end_src

* Pass
** pass-store.el
#+begin_src emacs-lisp
(setup (:straight password-store)
  (:option password-store-password-length 12))
#+end_src
* PDF Tools
#+begin_src emacs-lisp
(setup (:require pdf-tools)
  (:delay))
#+end_src
* Leetcode
#+begin_src emacs-lisp
(setup (:straight leetcode)
  (setq leetcode-prefer-language "javascript")
  (setq leetcode-prefer-sql "mysql")
  (setq leetcode-save-solutions t)
  (setq leetcode-directory "~/Documents/leetcode")
  (add-hook 'leetcode-solution-mode-hook
            (lambda() (flycheck-mode -1))))
#+end_src
* EAF
#+begin_src emacs-lisp
(if IS-GUI
    (unless (daemonp)
      (add-to-list 'load-path "/Users/dez/.dotfiles/Emacs/site-lisp/emacs-application-framework/")
      (setup (:require eaf)
	(:delay)
	(:also-load eaf-browser eaf-git)
	(:option
	 eaf-start-python-process-when-require nil
	 eaf-browser-continue-where-left-off t
	 eaf-browser-enable-adblocker t
	 browse-url-browser-function 'eaf-open-browser)

	(defalias 'browse-web #'eaf-open-browser))))
#+end_src
* Tramp
#+begin_src emacs-lisp
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
(setq tramp-default-method "ssh"
      tramp-default-user "wangpe90"
      tramp-default-host "dh2026pc25.utm.utoronto.ca")
(setq recentf-exclude `(,tramp-file-name-regexp
                        "COMMIT_EDITMSG")
      tramp-auto-save-directory temporary-file-directory
      backup-directory-alist (list (cons tramp-file-name-regexp nil)))
#+end_src
* IRC
#+begin_src emacs-lisp
(setq erc-server "irc.libera.chat"
      erc-nick "dezzw"    ; Change this!
      erc-user-full-name "Desmond Wang"  ; And this!
      erc-track-shorten-start 8
      erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
      erc-kill-buffer-on-part t
      erc-auto-query 'bury)

(setup (:straight circe)
  (setq circe-network-options
	'(("irc.libera.chat"
           :tls t
	   :port 6697
           :nick "dezzw"
	   :sasl-username "dezzw"
	   :sasl-password "Irc0x577063"
           :channels ("#emacs-circe")
           ))))
#+end_src

