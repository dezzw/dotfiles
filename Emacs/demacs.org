#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
#+TITLE: DEmacs Configuration

* Early Init
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  ;; -*- coding: utf-8; lexical-binding: t; -*-
  (require 'cl-lib)

  (setq read-process-output-max (* 1024 1024))
  ;; Adjust garbage collection thresholds during startup, and thereafter
  (let ((normal-gc-cons-threshold (* 20 1024 1024))
	(init-gc-cons-threshold (* 128 1024 1024)))
    (setq gc-cons-threshold init-gc-cons-threshold)
    (add-hook 'emacs-startup-hook
	      (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))

  (defconst IS-MAC (eq system-type 'darwin))

  (setq package-enable-at-startup nil)

  ;; Windows And Frames Setting
  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t)

  (setq make-backup-files       nil
	auto-save-default       nil
	inhibit-startup-message t
	inhibit-splash-screen   t
	ring-bell-function      'ignore)

  (dolist (mode
	   '(tool-bar-mode
	     tooltip-mode
	     scroll-bar-mode
	     blink-cursor-mode))
    (funcall mode 0))

  (setq default-frame-alist '((fullscreen . maximized)
			      ;; (alpha . 90)
			      (undecorated . t)
			      (menu-bar-lines . 0)
			      (tool-bar-lines . 0)
			      (horizontal-scroll-bars . nil)
			      (vertical-scroll-bars . nil)))

  (unless (version< emacs-version "29")
    (pixel-scroll-precision-mode 1))

  (if IS-MAC
      (progn
	(setq frame-resize-pixelwise  t)
	(menu-bar-mode t)))

  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
* Startup Setting 
#+begin_src emacs-lisp
;; Copy from https://github.com/willbush/system/blob/master/emacs/early-init.el

(defconst IS-GUI (or (display-graphic-p) (and (daemonp) (not (string= (daemonp) "tty")))))
(defconst IS-TTY (or (not (display-graphic-p)) (and (daemonp) (string= (daemonp) "tty"))))

(setq native-comp-deferred-compilation-deny-list nil)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq use-package-verbose t)
(when (daemonp)
  (setq use-package-always-demand t))

;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)
;; Set the right directory to store the native comp cache
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

(use-package doom-themes
  :straight (doom-themes :type git :host github :repo "doomemacs/themes"
			 :fork (:host github :repo "dezzw/emacs-doom-themes"))
  :init
  (load-theme 'doom-one t))

(use-package doom-modeline
  :straight t
  :hook
  ((after-init . doom-modeline-mode)
   (doom-modeline-mode . size-indication-mode)
   (doom-modeline-mode . column-number-mode))
  :config
  (unless after-init-time
    ;; prevent flash of unstyled modeline at startup
    (setq-default mode-line-format nil))
  ;; Set these early so they don't trigger variable watchers
  (setq doom-modeline-bar-width 3
	doom-modeline-github nil
	doom-modeline-mu4e nil
	doom-modeline-persp-name nil
	doom-modeline-lsp nil
	doom-modeline-minor-modes nil
	doom-modeline-major-mode-icon nil
	doom-modeline-buffer-file-name-style 'relative-from-project
	;; Only show file encoding if it's non-UTF-8 and different line endings
	;; than the current OSes preference
	doom-modeline-buffer-encoding 'nondefault
	doom-modeline-default-eol-type
	(cond (IS-MAC 2)
	      (0))))

(use-package gcmh
  :straight t
  :hook (after-init . gcmh-mode)
  :custom
  ;; doom is using 0.5, default is 15s
  (gcmh-idle-delay 0.5)
  ;; 16 MB
  (gcmh-high-cons-threshold (* 16 1024 1024)))

(use-package exec-path-from-shell
  :straight t
  :demand t
  :custom
  (exec-path-from-shell-arguments '("-l"))
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

(use-package super-save
  :straight t
  :custom
  (super-save-auto-save-when-idle t)
  (super-save-remore-files nil)
  (super-save-exclude '(".gpg"))
  :config
  ;; add integration with ace-window
  (add-to-list 'super-save-triggers 'ace-window)
  ;; save when back to meow normal state
  (add-to-list 'super-save-triggers 'evil-normal-state)
  (add-to-list 'super-save-triggers 'evil-force-normal-state)
  ;; save on find-file
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  (super-save-mode +1))

(use-package recentf
  :custom
  (recentf-max-saved-items 1000)
  (recentf-exclude `("/tmp/" "/ssh:" ,(concat user-emacs-directory "lib/.*-autoloads\\.el\\'")))
  :config
  (recentf-mode))

(use-package midnight
  :defer 10
  :custom
  (midnight-period 7200)
  :config
  (midnight-mode))

(global-auto-revert-mode 1)
(delete-selection-mode t)

(straight-use-package 'posframe)
(straight-use-package 'all-the-icons)

(use-package nerd-icons
  :straight t)
#+end_src
* Keyboard Bindings
** Editing Tools
*** Undo
#+begin_src emacs-lisp
(use-package vundo
  :straight t
  :commands (vundo))
#+end_src
*** Hungry Delete
#+begin_src emacs-lisp
(use-package hungry-delete
  :straight t
  :hook (prog-mode . hungry-delete-mode)
  :custom
  (hungry-delete-join-reluctantly t))
#+end_src
*** Avy
#+begin_src emacs-lisp
(use-package avy
  :straight t
  :bind ("C-," . avy-goto-char-timer)
  :custom
  (avy-all-windows nil)
  (avy-all-windows-alt t)
  (avy-timeout-seconds 0.3))
#+end_src

*** Spelling Checking
#+begin_src emacs-lisp
;; (use-package jinx  
;;   :hook (emacs-startup . global-jinx-mode))

(use-package flyspell
  :diminish
  :hook ((prog-mode . flyspell-prog-mode)
         (flyspell-mode . (lambda ()
                            (dolist (key '("C-;" "C-."))
                              (unbind-key key flyspell-mode-map)))))
  :custom
  (flyspell-issue-message-flag nil)
  (ispell-program-name "enchant-2")
  (ispell-dictionary "english"))
#+end_src
** ESC Cancels All
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Evil
#+begin_src emacs-lisp
(defun dw/evil-hook ()
  (dolist (mode '(custom-mode
		  eshell-mode
		  git-rebase-mode
		  erc-mode
		  circe-server-mode
		  circe-chat-mode
		  circe-query-mode
		  sauron-mode
		  term-mode))
  (add-to-list 'evil-emacs-state-modes mode)))

(use-package evil
  :straight t
  :demand t
  :hook (evil-mode . 'dw/evil-hook)
  :init
  ;; Pre-load configuration
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  (setq evil-undo-system 'undo-redo)
  :bind

  :config
  ;; Activate the Evil
  (evil-mode 1)

  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  ;; Clear the binding of C-k so that it doesn't conflict with Corfu
  (define-key evil-insert-state-map (kbd "C-k") nil)

  (evil-set-initial-state 'messages-buffer-mode 'normal))

(use-package evil-nerd-commenter
  :straight t
  :commands (evilnc-comment-or-uncomment-lines)
  :bind
  ("M-;" . 'evilnc-comment-or-uncomment-lines))

(use-package evil-escape
  :straight t
  :after evil
  :custom
  (evil-escape-key-sequence "jk")
  :config
  (evil-escape-mode 1))

(use-package evil-visualstar
  :straight t
  :defer 2
  :config
  (global-evil-visualstar-mode))

(use-package evil-surround
  :straight t
  :defer 2
  :config
  (global-evil-surround-mode 1))

(use-package evil-multiedit
  :straight t
  :defer 2
  :config
  (evil-multiedit-default-keybinds))

(use-package evil-mc
  :straight t
  :commands (evil-mc-make-cursor-here
	     evil-mc-make-all-cursors
	     evil-mc-pause-cursors
	     evil-mc-resume-cursors
	     evil-mc-make-and-goto-first-cursor
	     evil-mc-make-and-goto-last-cursor
	     evil-mc-make-cursor-in-visual-selection-beg
	     evil-mc-make-cursor-in-visual-selection-end
	     evil-mc-make-cursor-move-next-line
	     evil-mc-make-cursor-move-prev-line
	     evil-mc-make-cursor-at-pos
	     evil-mc-has-cursors-p
	     evil-mc-make-and-goto-next-cursor
	     evil-mc-skip-and-goto-next-cursor
	     evil-mc-make-and-goto-prev-cursor
	     evil-mc-skip-and-goto-prev-cursor
	     evil-mc-make-and-goto-next-match
	     evil-mc-skip-and-goto-next-match
	     evil-mc-skip-and-goto-next-match
	     evil-mc-make-and-goto-prev-match
	     evil-mc-skip-and-goto-prev-match)
  :config
  (global-evil-mc-mode  1))

(use-package evil-matchit
  :straight t
  :defer 2
  :config
  (global-evil-matchit-mode 1))

(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))

(use-package evil-tex
  :straight t
  :hook (LaTeX-mode org-mode))


(use-package general
  :straight t
  :config
  (general-evil-setup t)

  (general-create-definer dw/leader-key-def
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer dw/ctrl-c-keys
    :prefix "C-c")

	(general-define-key
	 :states '(normal)
	 "r" 'evil-redo
	 "Q" "@q"
	 "gJ" 'jester/evil-join-no-whitespace))
(dw/leader-key-def
  "SPC" 'execute-extended-command
  "f" 'find-file
  "b" 'consult-buffer
  "d" 'consult-dir
  "a" 'org-agenda)
#+end_src
* UI Setting
** Fonts
#+begin_src emacs-lisp
;; Set default font
(defun dw/set-fonts()
  (interactive)
  (set-face-attribute 'default nil
		      :font "Maple Mono"
		      ;; :font "JetBrainsMono Nerd Font"
		      :weight 'regular
		      :height 140)

  ;; Set the fixed pitch face
  ;; (set-face-attribute 'fixed-pitch nil
  ;; 		    :font "Operator Mono SSm Lig"
  ;; 		    :weight 'light
  ;; 		    :height 140)

  ;; Set the variable pitch face
  ;; (set-face-attribute 'variable-pitch nil
  ;; 		    :font "Operator Mono SSm Lig"
  ;; 		    :height 140
  ;; 		    :weight 'light)
  )


(dw/set-fonts)
(when (daemonp)
  (dw/set-fonts))


(use-package ligature
  :straight (ligature :host github :repo "mickeynp/ligature.el")
  :defer 0.5
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
				       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
				       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
				       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
				       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
				       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
				       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
				       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
				       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
				       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
				       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
				       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
				       "\\\\" "://"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))

;; (use-package unicode-fonts
;;   :straight t
;;   :defer 0.5
;;   :config
;;   (unicode-fonts-setup))
#+end_src

** Line Numbers
#+begin_src emacs-lisp
;; Enable liner number
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
		term-mode-hook
		vterm-mode-hook
		shell-mode-hook
		eshell-mode-hook
		xwidget-webkit-mode-hook
		eaf-mode-hook
		doc-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Highlight TODOs
#+begin_src emacs-lisp
(use-package hl-todo
  :straight t
  :defer 10
  :config
  (setq hl-todo-keyword-faces
	'(("TODO"   . "#FF0000")
          ("FIXME"  . "#FF0000")
          ("DEBUG"  . "#A020F0")
          ("NEXT" . "#FF4500")
	  ("TBA" . "#61d290")
          ("UNCHECK"   . "#1E90FF")))
  (global-hl-todo-mode))
#+end_src

** Highlight the diff
#+begin_src emacs-lisp
(use-package diff-hl
  :straight t
  :hook ((magit-post-refresh . diff-hl-magit-post-refresh)
         (after-init . global-diff-hl-mode)
         (dired-mode . diff-hl-dired-mode)))

(use-package vdiff
  :straight t
  :commands (vdiff-buffer))
#+end_src

** UI Setting
#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (dw/set-fonts))))
  (if (display-graphic-p)
      (dw/set-fonts)))
#+end_src
* Workspace and Window Management
** Tabspace
#+begin_src emacs-lisp
(use-package tabspaces
  :when (not (daemonp))
  ;; use this next line only if you also use straight, otherwise ignore it. 
  :straight (:type git :host github :repo "mclear-tools/tabspaces")
  :hook (after-init . tabspaces-mode) ;; use this only if you want the minor-mode loaded at startup. 
  :commands (tabspaces-switch-or-create-workspace
             tabspaces-open-or-create-project-and-workspace)
  :custom
  (tabspaces-use-filtered-buffers-as-default t)
  (tabspaces-default-tab "Default")
  (tabspaces-remove-to-default t)
  (tabspaces-include-buffers '("*scratch*"))
  ;; sessions
  (tabspaces-session t)
  (tabspaces-session-auto-restore t)

  :config

  ;; Filter Buffers for Consult-Buffer
  
  (with-eval-after-load 'consult
    ;; hide full buffer list (still available with "b" prefix)
    (consult-customize consult--source-buffer :hidden t :default nil)
    ;; set consult-workspace buffer list
    (defvar consult--source-workspace
      (list :name     "Workspace Buffers"
            :narrow   ?w
            :history  'buffer-name-history
            :category 'buffer
            :state    #'consult--buffer-state
            :default  t
            :items    (lambda () (consult--buffer-query
				  :predicate #'tabspaces--local-buffer-p
				  :sort 'visibility
				  :as #'buffer-name)))

      "Set workspace buffer list for consult-buffer.")
    (add-to-list 'consult-buffer-sources 'consult--source-workspace)))
#+end_src
** Beframe
#+begin_src emacs-lisp
(use-package beframe
  :when (daemonp)
  :straight t
  :config
  (setq beframe-global-buffers '("*scratch*" "*Messages*"))
  (beframe-mode 1)
  (defvar consult-buffer-sources)
  (declare-function consult--buffer-state "consult")

  (with-eval-after-load 'consult
    (defface beframe-buffer
      '((t :inherit font-lock-string-face))
      "Face for `consult' framed buffers.")

    (defvar beframe-consult-source
      `( :name     "Frame-specific buffers (current frame)"
	 :narrow   ?F
	 :category buffer
	 :face     beframe-buffer
	 :history  beframe-history
	 :items    ,#'beframe-buffer-names
	 :action   ,#'switch-to-buffer
	 :state    ,#'consult--buffer-state))

    (add-to-list 'consult-buffer-sources 'beframe-consult-source))

  (defun my/beframe-items (&optional frame)
    (beframe-buffer-names frame :sort #'beframe-buffer-sort-visibility))
  )
#+end_src
** Ace Window
Use =C-x o= to active =ace-window= to swap the windows (less than two windows), or using following arguments (more than two):
- =x= - delete window
- =m= - swap windows
- =M= - move window
- =c= - copy window
- =j= - select buffer
- =n= - select the previous window
- =u= - select buffer in the other window
- =c= - split window fairly, either vertically or horizontally
- =v= - split window vertically
- =b= - split window horizontally
- =o= - maximize current window
- =?= - show these command bindings
  #+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :bind ("C-x o" . ace-window)
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
  #+end_src
** Window History with winner-mode
#+begin_src emacs-lisp
(use-package winner
  :bind (("M-N" . winner-redo)
         ("M-P" . winner-undo))
  :config (winner-mode 1))
#+end_src
** Popper
#+begin_src emacs-lisp
(use-package popper
  :straight t
  :bind (("C-`"   . popper-toggle-latest)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
	'("\\*Messages\\*"
	  "Output\\*$"
	  "\\*Async Shell Command\\*"
	  help-mode
	  compilation-mode
	  ;; "^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
	  "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
	  "^\\*term.*\\*$"   term-mode   ;term as a popup
	  "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
	  ))
  (popper-mode +1)
  (popper-echo-mode +1))                ; For echo area hints
#+end_src
* File Management
** Dired
#+begin_src emacs-lisp
(use-package dired-single
  :straight t
  :commands (dired-single-buffer dired-single-up-directory))

(use-package dired-hide-dotfiles
  :straight t
  :hook dired-mode)

(use-package dired
  :custom
  (dired-dwim-target t)
  (dired-listing-switches "-alGh")
  (dired-recursive-copies 'always)
  (dired-mouse-drag-files t)                   ; added in Emacs 29
  (mouse-drag-and-drop-region-cross-program t) ; added in Emacs 29
  (dired-kill-when-opening-new-dired-buffer t)
  (delete-by-moving-to-trash t)
  :config
  (with-eval-after-load 'evil-collection
    (evil-collection-define-key 'normal 'dired-mode-map
				"h" 'dired-single-up-directory
				"H" 'dired-omit-mode
				"l" 'dired-single-buffer
				"." 'dired-hide-dotfiles-mode)))
#+end_src
** Dirvish
#+begin_src emacs-lisp
(use-package dirvish
  :straight t
  :commands (dirvish)
  :init
  (dirvish-override-dired-mode))
#+end_src
* Org Mode
** Config Basic Org mode
#+begin_src emacs-lisp
(defun dw/org-mode-setup ()
  (org-indent-mode)
  ;; (variable-pitch-mode 1)
  ;; (auto-fill-mode 0)
  (setq evil-auto-indent nil)
  (visual-line-mode 1))

(use-package org
  :config
  :defer t
  :hook (org-mode . dw/org-mode-setup)
  :config
  (setq org-html-head-include-default-style nil
	;; org-ellipsis " ▾"
	org-adapt-indentation t
	org-hide-emphasis-markers t
	org-src-fontify-natively t
	org-src-tab-acts-natively t
	org-edit-src-content-indentation 0
	org-hide-block-startup nil
	org-src-preserve-indentation nil
	org-startup-folded 'content
	org-cycle-separator-lines 2)

  (setq org-html-htmlize-output-type nil)

  ;; config for images in org
  (auto-image-file-mode t)
  (setq org-image-actual-width nil)
  ;; default image width
  (setq org-image-actual-width '(300))

  (setq org-export-with-sub-superscripts nil)

  ;; Since we don't want to disable org-confirm-babel-evaluate all
  ;; of the time, do it around the after-save-hook
  (defun dw/org-babel-tangle-dont-ask ()
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))
  
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask
						'run-at-end 'only-in-org-mode))))
#+end_src
** Apperance of Org   
*** Fonts and Bullets
#+begin_src emacs-lisp
;; change bullets for headings
(use-package org-superstar
  :straight t
  :hook org-mode
  :custom
  (org-superstar-remove-leading-stars t
				      org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
*** Set Margins for Modes
#+begin_src emacs-lisp
(defun dw/org-mode-visual-fill ()
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :straight t
  :defer t
  :hook (org-mode . dw/org-mode-visual-fill))
#+end_src
*** Properly Align Tables
#+begin_src emacs-lisp
(use-package valign
  :straight t
  :hook org-mode)
#+end_src
*** Auto-show Markup Symbols
#+begin_src emacs-lisp
(use-package org-appear
  :straight t
  :hook org-mode)
#+end_src
*** Src Block Styling
#+begin_src emacs-lisp
(use-package org-modern-indent
  :straight (org-modern-indent :type git :host github :repo "jdtsmith/org-modern-indent")
  :after org
  :config
  (add-hook 'org-mode-hook #'org-modern-indent-mode))
#+end_src
** Org Export
#+begin_src emacs-lisp
(with-eval-after-load "org-export-dispatch"
  ;; Edited from http://emacs.stackexchange.com/a/9838
  (defun dw/org-html-wrap-blocks-in-code (src backend info)
    "Wrap a source block in <pre><code class=\"lang\">.</code></pre>"
    (when (org-export-derived-backend-p backend 'html)
      (replace-regexp-in-string
       "\\(</pre>\\)" "</code>\n\\1"
       (replace-regexp-in-string "<pre class=\"src src-\\([^\"]*?\\)\">"
				 "<pre>\n<code class=\"\\1\">" src))))

  (require 'ox-html)

  (add-to-list 'org-export-filter-src-block-functions
	       'dw/org-html-wrap-blocks-in-code)
  )
#+end_src
** Org Babel
*** Load Org Babel
#+begin_src emacs-lisp
(with-eval-after-load "ob"
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     (shell . t)
     (python . t)))

  (setq org-confirm-babel-evaluate nil))
#+end_src
** Org Agenda
#+begin_src emacs-lisp
(with-eval-after-load "org"
  ;; Custom TODO states and Agendas
  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "TBA(b)" "|" "DONE(d!)")))

  (setq org-tag-alist
	'((:startgroup)
	  ;; Put mutually exclusive tags here
	  (:endgroup)
	  ("review" . ?r)
	  ("assignment" . ?a)
	  ("lab" . ?l)
	  ("test" . ?t)
	  ("quiz" . ?q)
	  ("pratice" . ?p)
	  ("emacs" . ?e)
	  ("note" . ?n)
	  ("idea" . ?i))))

(if IS-MAC
    (setq org-agenda-files '("~/Documents/Org/Planner")))

(use-package org-super-agenda
  :straight t
  :hook org-agenda-mode
  ;; :commands (org-agenda)
  :init
  (setq org-agenda-skip-scheduled-if-done t
	org-agenda-skip-deadline-if-done t
	org-agenda-include-deadlines t
	org-agenda-include-diary t
	org-agenda-block-separator nil
	org-agenda-compact-blocks t
	org-log-done 'time
	org-log-into-drawer t
	org-agenda-start-with-log-mode t)

  (setq org-agenda-custom-commands
	'(("d" "Dashboard"
	   ((agenda "" ((org-agenda-span 'day)

			(org-super-agenda-groups
			 '((:name "Today"
				  :time-grid t
				  :date today
				  :scheduled today
				  :order 1)
			   (:name "Due Soon"
				  :deadline future
				  :order 2)
			   (:discard (:anything t))))))
	    (alltodo "" ((org-agenda-overriding-header "")
			 (org-super-agenda-groups
			  '((:name "Overdue"
				   :deadline past
				   :order 1)
			    (:name "Assignments"
				   :tag "assignment"
				   :order 2)
			    (:name "Labs"
				   :tag "lab"
				   :order 3)
			    (:name "Quizs"
				   :tag "quiz"
				   :order 4)
			    (:name "Tests/Exam"
				   :tag "test"
				   :order  5)
			    (:name "Projects"
				   :tag "Project"
				   :order 14)
			    (:name "Emacs"
				   :tag "Emacs"
				   :order 13)
			    (:discard (:anything t)))))))))))

;; Refiling
(setq org-refile-targets
      '(("~/Documents/Org/Planner/Archive.org" :maxlevel . 1)))

;; Save Org buffers after refiling!
(advice-add 'org-refile :after 'org-save-all-org-buffers)

;; Capture Templates
(defun dw/read-file-as-string (path)
  (with-temp-buffer
    (insert-file-contents path)
    (buffer-string)))

(setq org-capture-templates
      `(("t" "Tasks / Projects")
	("tt" "Task" entry (file+olp "~/Documents/Org/Planner/Tasks.org" "Inbox")
	 "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)))
#+end_src
** Org Roam
#+begin_src emacs-lisp
(use-package org-roam
  :straight t
  :bind
  (("C-c o l" . org-roam-buffer-toggle)
   ("C-c o f" . org-roam-node-find)
   ("C-c o g" . org-roam-graph)
   ("C-c o i" . org-roam-node-insert)
   ("C-c o c" . org-roam-capture))
  :custom
  (org-roam-directory "~/Documents/Org/Notes")
  (org-roam-database-connecter 'splite-builtin)
  (org-roam-completion-everywhere t)
  (org-roam-completion-system 'default)

  :config
  (org-roam-db-autosync-mode))

(use-package org-roam-ui
  :straight t
  :commands (org-roam-ui-open)
  :config
  (setq org-roam-ui-sync-theme t
	org-roam-ui-follow t
	org-roam-ui-update-on-save t
	org-roam-ui-open-on-start t))
#+end_src
** Tools for Better Org
*** Org-inline-anim
#+begin_src emacs-lisp
(use-package org-inline-anim
  :straight t
  :commands (org-inline-anim-animate)
  :hook org-mode)
#+end_src
*** Org-imagine
#+begin_src emacs-lisp
(use-package org-imagine
  :straight
  '(org-imagine :type git :host github :repo "metaescape/org-imagine")
  :after org
  :config
  (setq 
    org-imagine-cache-dir "./.org-imagine"
    org-imagine-is-overwrite nil))
#+end_src
*** Org-download
#+begin_src emacs-lisp
(use-package org-download
	:straight t
	:hook (org-mode . org-download-enable)
	:custom
	(org-download-image-dir "./images/"))
#+end_src
* Completion System
** Vertico Marginalia Consult Orderless Embark
#+Begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :straight (vertico :type git :host github :repo "minad/vertico" :files (:defaults "extensions/*.el"))
  :demand t
  :custom
  (vertico-cycle t)
  (enable-recursive-minibuffers t)
  :config
	(keymap-set vertico-map "RET" #'vertico-directory-enter)
	(keymap-set vertico-map "DEL" #'vertico-directory-delete-char)
	(keymap-set vertico-map "M-DEL" #'vertico-directory-delete-word)
	(vertico-mode))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :straight t
  :init
  (savehist-mode)
  :config
  (setq history-length 25))

(use-package orderless
  :straight t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Example configuration for Consult
(use-package consult
  :straight t
  :defer 0.5
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c r" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-search-program 'ripgrep
				xref-history-storage 'xref-window-local-history
				xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  )

(use-package consult-dir
  :straight t
  :bind (("C-x C-d" . consult-dir)
         :map minibuffer-local-completion-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))

(use-package marginalia
  :straight t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :config
  (marginalia-mode))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :straight t ; only need to install it, embark loads it after consult if found
  :after embark
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))


(use-package embark
  :straight t
  :bind
  ("C-." . embark-act)
  ("M-." . embark-dwim)
  ("C-h b" . embark-bindings)
  ("C-h B" . embark-bindings-at-point)
  ("M-n" . embark-next-symbol)
  ("M-p" . embark-previous-symbol)
  ("C-h E" . embark-on-last-message)
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  (setq embark-prompter 'embark-completing-read-prompter)
  :custom
  (embark-quit-after-action nil)
  (embark-indicators '(embark-minimal-indicator
                       embark-highlight-indicator
                       embark-isearch-highlight-indicator))
  :config
  (setq embark-candidate-collectors
        (cl-substitute 'embark-sorted-minibuffer-candidates
                       'embark-minibuffer-candidates
                       embark-candidate-collectors))
  (defun embark-on-last-message (arg)
    "Act on the last message displayed in the echo area."
    (interactive "P")
    (with-current-buffer "*Messages*"
      (goto-char (1- (point-max)))
      (embark-act arg))))

(use-package consult-applemusic
  :straight (consult-applemusic :type git :host github :repo "dezzw/consult-applemusic")
  :commands (consult-applemusic-playlists applemusic-toggle-play))
#+end_src
** Corfu
#+begin_src emacs-lisp
(use-package corfu
  :straight (corfu :type git
		   :host github
		   :repo "minad/corfu"
		   :files (:defaults "extensions/*.el"))
  :bind (:map corfu-map
              ("M-SPC"      . corfu-insert-separator)
              ("TAB"        . corfu-next)
              ([tab]        . corfu-next)
              ("S-TAB"      . corfu-previous)
              ([backtab]    . corfu-previous)
              ("S-<return>" . corfu-insert)
              ("RET"        . nil))
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-prefix 2)
  (corfu-auto-delay 0)
  (corfu-preselect 'prompt)
  (corfu-preselect-first nil)
  (corfu-on-exact-match nil)
  (corfu-popupinfo-delay '(0.5 . 0.2))
  :init
  (global-corfu-mode)
  (corfu-history-mode)
  (corfu-popupinfo-mode)
  :config
  (add-hook 'eshell-mode-hook
            (lambda () (setq-local corfu-quit-at-boundary t
				   corfu-quit-no-match t
				   corfu-auto nil)
              (corfu-mode))))

(use-package cape
  :straight t
  :custom
  (cape-dabbrev-min-length 3)
  :config
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file))

;; (use-package tabnine-capf
;;   :after cape
;;   :straight (:host github :repo "50ways2sayhard/tabnine-capf" :files ("*.el" "*.sh"))
;;   :hook (kill-emacs . tabnine-capf-kill-process)
;;   :init
;;   (add-to-list 'completion-at-point-functions #'tabnine-completion-at-point))
(use-package kind-icon
  :straight t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
  (setq kind-icon-use-icons nil)
  (setq kind-icon-mapping
      `(
        (array ,(nerd-icons-codicon "nf-cod-symbol_array") :face font-lock-type-face)
        (boolean ,(nerd-icons-codicon "nf-cod-symbol_boolean") :face font-lock-builtin-face)
        (class ,(nerd-icons-codicon "nf-cod-symbol_class") :face font-lock-type-face)
        (color ,(nerd-icons-codicon "nf-cod-symbol_color") :face success)
        (command ,(nerd-icons-codicon "nf-cod-terminal") :face default)
        (constant ,(nerd-icons-codicon "nf-cod-symbol_constant") :face font-lock-constant-face)
        (constructor ,(nerd-icons-codicon "nf-cod-triangle_right") :face font-lock-function-name-face)
        (enummember ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
        (enum-member ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
        (enum ,(nerd-icons-codicon "nf-cod-symbol_enum") :face font-lock-builtin-face)
        (event ,(nerd-icons-codicon "nf-cod-symbol_event") :face font-lock-warning-face)
        (field ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-variable-name-face)
        (file ,(nerd-icons-codicon "nf-cod-symbol_file") :face font-lock-string-face)
        (folder ,(nerd-icons-codicon "nf-cod-folder") :face font-lock-doc-face)
        (interface ,(nerd-icons-codicon "nf-cod-symbol_interface") :face font-lock-type-face)
        (keyword ,(nerd-icons-codicon "nf-cod-symbol_keyword") :face font-lock-keyword-face)
        (macro ,(nerd-icons-codicon "nf-cod-symbol_misc") :face font-lock-keyword-face)
        (magic ,(nerd-icons-codicon "nf-cod-wand") :face font-lock-builtin-face)
        (method ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
        (function ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
        (module ,(nerd-icons-codicon "nf-cod-file_submodule") :face font-lock-preprocessor-face)
        (numeric ,(nerd-icons-codicon "nf-cod-symbol_numeric") :face font-lock-builtin-face)
        (operator ,(nerd-icons-codicon "nf-cod-symbol_operator") :face font-lock-comment-delimiter-face)
        (param ,(nerd-icons-codicon "nf-cod-symbol_parameter") :face default)
        (property ,(nerd-icons-codicon "nf-cod-symbol_property") :face font-lock-variable-name-face)
        (reference ,(nerd-icons-codicon "nf-cod-references") :face font-lock-variable-name-face)
        (snippet ,(nerd-icons-codicon "nf-cod-symbol_snippet") :face font-lock-string-face)
        (string ,(nerd-icons-codicon "nf-cod-symbol_string") :face font-lock-string-face)
        (struct ,(nerd-icons-codicon "nf-cod-symbol_structure") :face font-lock-variable-name-face)
        (text ,(nerd-icons-codicon "nf-cod-text_size") :face font-lock-doc-face)
        (typeparameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
        (type-parameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
        (unit ,(nerd-icons-codicon "nf-cod-symbol_ruler") :face font-lock-constant-face)
        (value ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-builtin-face)
        (variable ,(nerd-icons-codicon "nf-cod-symbol_variable") :face font-lock-variable-name-face)
        (t ,(nerd-icons-codicon "nf-cod-code") :face font-lock-warning-face))))
#+end_src
** Tempel
#+begin_src emacs-lisp
(use-package tempel
  :straight t
  :defer 10
  :custom
  (tempel-path "~/.dotfiles/Emacs/templates")
  :bind (("M-+" . tempel-insert) ;; Alternative tempel-expand
         :map tempel-map
         ([remap keyboard-escape-quit] . tempel-done)
         ("TAB" . tempel-next)
         ("<backtab>" . tempel-previous))
  :init
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-complete
                      completion-at-point-functions)))
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf))
#+end_src
** Citre
#+begin_src emacs-lisp
(use-package citre
  :straight t
  :bind
  (("C-x c j" . citre-jump)
   ("C-x c J" . citre-jump-back)
   ("C-x c p" . citre-ace-peek)
   ("C-x c u" . citre-update-this-tags-file))
  :custom
  (citre-readtags-program "/etc/profiles/per-user/dez/bin/readtags")
  (citre-ctags-program "/etc/profiles/per-user/dez/bin/ctags")
  ;; Set this if you want to always use one location to create a tags file.
  (citre-default-create-tags-file-location 'global-cache)
  (citre-use-project-root-when-creating-tags t)
  (citre-prompt-language-for-ctags-command t)
  (citre-auto-enable-citre-mode-modes '(prog-mode))
  :config
  (require 'citre-config))

#+end_src

* Helpful Function Description
#+begin_src emacs-lisp
(use-package helpful
  :straight t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))
#+end_src
 
* Developing
** Developing Tools
*** Brackets 
#+begin_src emacs-lisp

(use-package elec-pair
  :config (electric-pair-mode))

(use-package electric
  :config (electric-indent-mode))

(use-package rainbow-delimiters
  :straight t
  :hook prog-mode)
#+end_src
*** Indent
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :straight t
  :defer 0.5
  :hook prog-mode
  :custom
  (highlight-indent-guides-auto-enabled nil)
  (highlight-indent-guides-delay 0)
  (highlight-indent-guides-method 'character)
  :config
  (set-face-background 'highlight-indent-guides-odd-face "darkgray")
  (set-face-background 'highlight-indent-guides-even-face "dimgray")
  (set-face-foreground 'highlight-indent-guides-character-face "dimgray"))

;; (use-package aggressive-indent
;;   :straight t
;;   :hook (emacs-lisp-mode lisp-mode python-mode))
#+end_src
*** Rainbow Mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :straight t
  :hook (web-mode js2-mode emacs-lisp-mode))
#+end_src
*** Format All
#+begin_src emacs-lisp
(use-package format-all
  :straight t
  :hook prog-mode)
#+end_src
*** Text Folding
#+begin_src emacs-lisp
;; (setup (:straight origami)
;;   (:load-after prog-mode)
;;   (:hook-into prog-mode))
(with-eval-after-load 'prog-mode
  (add-hook #'prog-mode-hook 'hs-minor-mode))
#+end_src

*** APIs Testing
#+begin_src emacs-lisp
(use-package restclient
  :straight t
  :mode (("\\.http\\'" . restclient-mode)))
#+end_src

** Languages
*** Treesit
#+begin_src emacs-lisp
(use-package treesit
  :when (and (fboundp 'treesit-available-p)
             (treesit-available-p))
  :custom
  (major-mode-remap-alist
   '((c-mode          . c-ts-mode)
     (c++-mode        . c++-ts-mode)
     (csharp-mode     . csharp-ts-mode)
     (conf-toml-mode  . toml-ts-mode)
     (css-mode        . css-ts-mode)
     (java-mode       . java-ts-mode)
     (javascript-mode . js-ts-mode)
     (js-json-mode    . json-ts-mode)
     (python-mode     . python-ts-mode)
     (ruby-mode       . ruby-ts-mode)
     (sh-mode         . bash-ts-mode)))
  (treesit-font-lock-level 4)
  :config
  (add-to-list 'auto-mode-alist '("\\(?:CMakeLists\\.txt\\|\\.cmake\\)\\'" . cmake-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-ts-mode))
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-ts-mode)))
#+end_src
*** COMMENT Python
#+begin_src emacs-lisp
(use-package jupyter
  :straight t
  :commands (jupyter-run-repl jupyter-connect-repl))

(use-package ein
  :straight t
  :commands (ein:run ein:login))
#+end_src
*** Web (HTML/CSS/JS...)
**** HTML
#+begin_src emacs-lisp
(use-package web-mode
  :straight t
  :mode "\\.html?\\'"
  :config
  (setq-default web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-attribute-indent-offset 2))

(use-package css-mode
  :custom
  (css-indent-offset 2))

;; 1. Start the server with `httpd-start'
;; 2. Use `impatient-mode' on any buffer
(use-package impatient-mode
  :straight t
  :commands (impatient-mode))

(use-package skewer-mode
  :straight t
  :commands (skewer-mode))
#+end_src
**** JS/TS
#+begin_src emacs-lisp
(defun dw/set-js-indentation ()
  (setq-default js-indent-level 2)
  (setq-default tab-width 2))

(use-package js2-mode
  :straight t
  :mode "\\.c?js\\'"
  :hook
  (js2-mode . dw/set-js-indentation)
  :config
  ;; Use js2-mode for Node scripts
  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

  ;; Don't use built-in syntax checking
  (setq js2-mode-show-strict-warnings nil))


(use-package rjsx-mode
  :straight t
  :mode "\\.jsx\\'")

(use-package add-node-modules-path
  :straight t
  :hook
  ((js2-mode . add-node-modules-path)
   (typescript-ts-mode . add-node-modules-path)
   (tsx-ts-mode . add-node-modules-path)
   (rjsx-mode . add-node-modules-path)))

(defun dw/format-prettier()
	(interactive)
	(shell-command 
   (format "yarn prettier --write %s" 
					 (buffer-file-name))))

;; not good enough for use
;; (use-package auto-rename-tag
;;   :straight t
;;   :hook ((web-mode rjsx-mode tsx-ts-mode) . auto-rename-tag-mode))
#+end_src
**** SCSS/SASS
#+begin_src emacs-lisp
(use-package scss-mode
  :straight t
  :mode "\\.scss\\'"
  :custom
  (scss-compile-at-save t)
  (scss-output-directory "../css")
  (scss-sass-command "sass --no-source-map"))
#+end_src
*** C/C++
#+begin_src emacs-lisp
;; (setq c-default-style "gnu")
#+end_src
*** Unity
#+begin_src emacs-lisp
(straight-use-package
 '(unity :type git :host github :repo "elizagamedev/unity.el"))
(add-hook 'after-init-hook #'unity-mode)
#+end_src
*** Nix
#+begin_src emacs-lisp
(use-package nix-mode
  :straight t
  :mode "\\.nix\\'")

;; (use-package nixos-options
;;   :straight t
;;   :after nix-mode)

;; (use-package nix-sandbox
;;   :straight t
;;   :after nix-mode)

;; (use-package nix-update
;;   :straight t
;;   :after nix-mode)  
#+end_src
*** Common Lisp
#+begin_src emacs-lisp
;; (setup (:straight slime)
;;        (:file-match "\\.lisp\\'"))

(use-package sly
  :straight t
  :mode "\\.lisp\\'")
#+end_src
*** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :straight t
  :mode "\\.hs\\'")
#+end_src
*** Latex
**** CDLaTex
#+begin_src emacs-lisp
(straight-use-package 'auctex)
(use-package cdlatex
  :straight t
  :hook
  ((LaTeX-mode .  #'turn-on-cdlatex)
   (latex-mode .  #'turn-on-cdlatex)
   (org-mode . org-cdlatex-mode)))
#+end_src
**** Xenops
#+begin_src emacs-lisp
(use-package xenops
  :straight t
  :if IS-GUI
  :hook
  (latex-mode LaTeX-mode org-mode)
  :init
  (setq xenops-math-image-scale-factor 2.0))

#+end_src
*** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :mode "\\.md\\'"
  :custom
  (markdown-command "multimarkdown"))

(use-package edit-indirect
  :straight t
  :after markdown-mode)
#+end_src
*** SQL
#+begin_src emacs-lisp
(use-package ob-sql-mode
  :straight t
  :after sql-mode)
#+end_src
*** GDScript
#+begin_src emacs-lisp
(use-package gdscript-mode
    :straight (gdscript-mode
               :type git
               :host github
               :repo "godotengine/emacs-gdscript-mode"))
#+end_src
*** Swift
#+begin_src emacs-lisp
(use-package swift-mode
  :straight t
  :hook (swift-mode . (lambda () (lsp-deferred))))

(use-package flycheck-swift
  :straight t
  :after swift-mode
  :config
  (eval-after-load 'flycheck '(flycheck-swift-setup)))

(use-package lsp-sourcekit
  :straight t
  :after lsp-mode
  :config
  (setq lsp-sourcekit-executable "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp"))
#+end_src
** Docker
#+begin_src emacs-lisp
(use-package docker
  :straight t
  :bind ("C-c d" . docker))
#+end_src
** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :hook (lsp-mode . flycheck-mode)
  :config
  (setq flycheck-emacs-lisp-load-path 'inherit)

  ;; Rerunning checks on every newline is a mote excessive.
  (delq 'new-line flycheck-check-syntax-automatically)
  ;; And don't recheck on idle as often
  (setq flycheck-idle-change-delay 1.0)

  ;; For the above functionality, check syntax in a buffer that you switched to
  ;; only briefly. This allows "refreshing" the syntax check state for several
  ;; buffers quickly after e.g. changing a config file.
  (setq flycheck-buffer-switch-check-intermediate-buffers t)

  ;; Display errors a little quicker (default is 0.9s)
  (setq flycheck-display-errors-delay 0.25))
#+end_src
** Lsp-mode
#+begin_src emacs-lisp
;;; LSP
;; Should boost performance with lsp
;; https://emacs-lsp.github.io/lsp-mode/page/performance/
(use-package lsp-mode
  :straight t
  :hook ((python-mode web-mode js2-mode typescript-ts-mode tsx-ts-mode rjsx-mode) . lsp)
  :bind ((:map lsp-mode-map
               ("M-<return>" . lsp-execute-code-action)))
  :commands (lsp lsp-deferred)
  :init
  (setenv "LSP_USE_PLISTS" "1")
  ;; Increase the amount of data emacs reads from processes
  (setq read-process-output-max (* 1024 1024))
  (setq lsp-clients-clangd-args '("--header-insertion-decorators=0"
                                  "--clang-tidy"
                                  "--enable-config"))
  ;; Disable features that have great potential to be slow.
  (setq lsp-enable-folding nil
        lsp-enable-text-document-color nil)
  ;; Reduce unexpected modifications to code
  (setq lsp-enable-on-type-formatting nil)
  ;; Make breadcrumbs opt-in; they're redundant with the modeline and imenu
  (setq lsp-headerline-breadcrumb-enable nil)

  ;; General lsp-mode settings
  (setq lsp-completion-provider :none
        lsp-enable-snippet nil
        lsp-enable-indentation nil
	lsp-idle-delay 0.500
        lsp-keymap-prefix "C-x L")
  ;; to enable the lenses
  (add-hook 'lsp-mode-hook #'lsp-lens-mode)
  (add-hook 'lsp-completion-mode-hook
            (lambda ()
              (setf (alist-get 'lsp-capf completion-category-defaults)
                    '((styles . (orderless flex))))))
  :config
  (defun dw/with-lsp-completion()
    (setq-local completion-at-point-functions
		(list (cape-capf-buster
		       (cape-super-capf
						#'lsp-completion-at-point
						#'tempel-complete
						#'cape-dabbrev
						#'cape-file)))))
  (add-hook 'lsp-completion-mode-hook #'dw/with-lsp-completion))

(use-package lsp-tailwindcss
  :straight t
  :commands (lsp lsp-deferred lsp-restart-workspace)
  :init
  (setq lsp-tailwindcss-add-on-mode t)
  (setq lsp-tailwindcss-major-modes '(tsx-ts-mode rjsx-mode web-mode css-mode)))

(use-package lsp-haskell
  :straight t
  :hook (haskell-mode . lsp-deferred))

(use-package lsp-java
  :straight t
  :hook (java-mode . lsp-deferred)
  :config
  (require 'lsp-java-boot)
  
  ;; to enable the lenses
  (add-hook 'lsp-mode-hook #'lsp-lens-mode)
  (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode))

(use-package lsp-pyright
  :straight t
  :hook (python-ts-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp-deferred))))  ; or lsp-deferred

(use-package lsp-ui
  :straight t
  :after lsp-mode
  :init
  (setq lsp-ui-doc-max-height 8
        lsp-ui-doc-max-width 72         ; 150 (default) is too wide
        lsp-ui-doc-delay 0.75           ; 0.2 (default) is too naggy
  	;; lsp-ui doc
  	lsp-ui-doc-show-with-mouse nil  ; don't disappear on mouseover
  	lsp-ui-doc-show-with-cursor t
	;; lsp-ui sideline
  	lsp-ui-sideline-show-hover nil
	lsp-ui-sideline-show-code-actions t))

;;; Debugging
(use-package dap-mode
  :straight t
  :commands (dap-debug dap-debug-last)
  :bind (:map dap-mode-map
	      ("C-x D D" . dap-debug)
	      ("C-x D d" . dap-debug-last))
  :config
  (with-eval-after-load 'python-mode
    (require 'dap-python)
    ;; if you installed debugpy, you need to set this
    ;; https://github.com/emacs-lsp/dap-mode/issues/306
    (setq dap-python-debugger 'debugpy))

  (with-eval-after-load 'c++-mode
    (require 'dap-gdb-lldb)
    (dap-gdb-lldb-setup))
  (setq dap-auto-configure-features '(sessions locals controls tooltip)))

#+end_src
** eglot
#+begin_src emacs-lisp
(use-package eglot
  :commands (eglot)
  :custom
  (eglot-inlay-hints-mode nil)
  (eglot-events-buffer-size 0)
  (eldoc-idle-delay 1)
  :config
  ;; capf
  (setq-local completion-at-point-functions
	      (list (cape-super-capf
		     #'eglot-completion-at-point
		     #'tempel-complete
		     #'cape-dabbrev
		     #'cape-dict))))
#+end_src
** COMMENT Lsp-bridge
#+begin_src emacs-lisp
(use-package lsp-bridge
  :straight (lsp-bridge :host github
			:repo "manateelazycat/lsp-bridge"
			:files ("*.el" "*.py" "acm" "core" "langserver"
				"multiserver" "resources"))
  :custom
  (lsp-bridge-enable-mode-line nil)
  (acm-enable-search-words nil)
  (acm-enable-icon t)
  ;; (acm-enable-tempel t)
  (acm-enable-tabnine-helper t)
  (lsp-bridge-complete-manually nil)
  (lsp-bridge-c-lsp-server "clangd")

  ;; (lsp-bridge-enable-org-babel t)
  ;; (lsp-bridge-org-babel-lang-list '(python bash javascript typescript emacs-lisp))
  :config
  (add-to-list 'lsp-bridge-default-mode-hooks 'js2-mode-hook)
  (add-to-list 'lsp-bridge-default-mode-hooks 'tsx-ts-mode-hook)
  (add-to-list 'lsp-bridge-single-lang-server-extension-list '(("ts" "tsx" "js" "mjs") . "typescript"))
  (global-lsp-bridge-mode))

(unless (display-graphic-p)
  (straight-use-package
   '(popon :host nil :repo "https://codeberg.org/akib/emacs-popon.git"))
  (straight-use-package
   '(acm-terminal :host github :repo "twlz0ne/acm-terminal")))
#+end_src
** Deno Bridge
#+begin_src emacs-lisp
(use-package deno-bridge
  :when (not (daemonp))
  :straight (:type git :host github :repo "manateelazycat/deno-bridge"))
#+end_src
** Emmet
#+begin_src emacs-lisp
(use-package emmet-mode
  :when (daemonp)
  :straight t
  :hook ((web-mode css-ts-mode css-mode js2-mode rjsx-mode tsx-ts-mode) . emmet-mode)
  :custom
  ()
  :config
  (add-to-list 'emmet-jsx-major-modes 'tsx-ts-mode))

(use-package emmet2-mode
  :when (not (daemonp))
  :straight (:type git :host github :repo "P233/emmet2-mode" :files ("*.el" "deno.json" "src" "data"))
  :after deno-bridge
  :hook ((web-mode css-mode rjsx-mode tsx-ts-mode) . emmet2-mode)                     ;; Enable emmet2-mode for web-mode and css-mode and other major modes based on them, such as the build-in scss-mode
  :config                                                       ;; OPTIONAL
  (unbind-key "C-j" emmet2-mode-map)                            ;; Unbind the default expand key
  (define-key emmet2-mode-map (kbd "C-c C-.") 'emmet2-expand))  ;; Bind custom expand key

#+end_src
* Direnv
#+begin_src emacs-lisp

(use-package envrc
  :straight t
  :hook (after-init . dw/maybe-enable-envrc-global-mode)
  :config
  (defun dw/maybe-enable-envrc-global-mode ()
    "Enable `envrc-global-mode' if `direnv' is installed."
    (when (executable-find "direnv")
      (envrc-global-mode)))

  (with-eval-after-load 'envrc
    (define-key envrc-mode-map (kbd "C-c e") 'envrc-command-map)))
#+end_src
* Term/Shells
** Vterm
#+begin_src emacs-lisp
;; Copy from https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-shell.el
;; Better term
;; @see https://github.com/akermu/emacs-libvterm#installation
(use-package vterm
  :commands (vterm vterm-posframe-toggle)
  :bind ("C-c `" . vterm-posframe-toggle)
  :custom
  (vterm-max-scrollback 10000)
  :config
  (with-no-warnings
    (when (posframe-workable-p)
      (defvar vterm-posframe--frame nil)
      (defun vterm-posframe-toggle ()
	"Toggle `vterm' child frame."
	(interactive)
	(let ((buffer (vterm--internal #'ignore 100))
	      (width  (max 80 (/ (frame-width) 2)))
	      (height (/ (frame-height) 2)))
	  (if (frame-live-p vterm-posframe--frame)
	      (progn
		(posframe-delete-frame buffer)
		(setq vterm-posframe--frame nil))
	    (setq vterm-posframe--frame
		  (posframe-show
		   buffer
		   :poshandler #'posframe-poshandler-frame-center
		   :left-fringe 8
		   :right-fringe 8
		   :width width
		   :height height
		   :min-width width
		   :min-height height
		   :internal-border-width 3
		   :internal-border-color (face-foreground 'font-lock-comment-face nil t)
		   :background-color (face-background 'tooltip nil t)
		   :accept-focus t)))))))

  (dw/leader-key-def
  "'" 'vterm-posframe-toggle))

(use-package multi-vterm
  :straight t
  :commands (multi-vterm))

(use-package vterm-toggle
  :straight t
  :commands  (vterm-toggle-cd))
#+end_src
** eshell
#+begin_src emacs-lisp
(use-package eshell
  :commands (eshell)
  :config
  (setq eshell-directory-name "~/.dotfiles/Emacs/eshell/")
  
  (if (executable-find "exa")
      (defalias 'eshell/ls 'exa)))

(use-package eshell-prompt-extras
  :straight t
  :after esh-opt
  :config
  (autoload 'epe-theme-lambda "eshell-prompt-extras")
  (setq eshell-highlight-prompt nil
	eshell-prompt-function 'epe-theme-lambda))

(use-package eshell-up
  :straight t
  :after esh-mode
  :custom
  (eshell-up-ignore-case nil))

(use-package eshell-syntax-highlighting
  :straight t
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(use-package eshell-z
  :straight t
  :after esh-mode)

(use-package esh-help
  :straight t
  :after esh-mode
  :config
  (setup-esh-help-eldoc))

(use-package eat
  :straight '(eat :type git
		  :host codeberg
		  :repo "akib/emacs-eat"
		  :files ("*.el" ("term" "term/*.el") "*.texi"
			  "*.ti" ("terminfo/e" "terminfo/e/*")
			  ("terminfo/65" "terminfo/65/*")
			  ("integration" "integration/*")
			  (:exclude ".dir-locals.el" "*-tests.el")))
  :hook (eshell-mode . eat-eshell-mode))


#+end_src
* Git
** Magit
#+begin_src emacs-lisp
(use-package magit
  :straight t
  :commands (magit magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package magit-delta
  :straight t
  :hook magit-mode)
#+end_src
* Pass
** pass-store.el
#+begin_src emacs-lisp
(use-package password-store
  :straight t
  :commands (password-store-copy)
  :custom
  (password-store-password-length 12))
#+end_src
* PDF Tools
#+begin_src emacs-lisp
(require 'pdf-tools)
#+end_src
* Leetcode
#+begin_src emacs-lisp
(use-package leetcode
  :straight t
  :commands (leetcode)
  :custom
  (leetcode-prefer-language "typescript")
  (leetcode-prefer-sql "mysql")
  (leetcode-save-solutions t)
  (leetcode-directory "~/Documents/leetcode"))
#+end_src
* Tramp
#+begin_src emacs-lisp
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
(setq tramp-default-method "ssh"
      tramp-default-user "wangpe90"
      tramp-default-host "dh2026pc25.utm.utoronto.ca")
(setq tramp-auto-save-directory temporary-file-directory
      backup-directory-alist (list (cons tramp-file-name-regexp nil)))
#+end_src
* IRC
#+begin_src emacs-lisp
(setq erc-server "irc.libera.chat"
      erc-nick "dezzw"    ; Change this!
      erc-user-full-name "Desmond Wang"  ; And this!
      erc-track-shorten-start 8
      erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
      erc-kill-buffer-on-part t
      erc-auto-query 'bury)

(use-package circe
  :straight t
  :commands (circe)
  :config
  (setq circe-network-options
	'(("irc.libera.chat"
           :tls t
	   :port 6697
           :nick "dezzw"
	   :sasl-username "dezzw"
	   :sasl-password "Irc0x577063"
           :channels ("#emacs-circe")))))
#+end_src
