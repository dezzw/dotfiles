#+TITLE: DEmacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
** Some improve in early-init
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
;; -*- coding: utf-8; lexical-binding: t; -*-
(setq gc-cons-threshold most-positive-fixnum)

;; Copy from https://github.com/willbush/system/blob/master/emacs/early-init.el
(defconst IS-MAC     (eq system-type 'darwin))
(defconst IS-LINUX   (eq system-type 'gnu/linux))

;; Doom currently uses 16 MiB and Spacemacs is using 100 MB. I'm going to try 64
;; MiB to see how it goes.
(defconst GC-CONS-THRESHOLD 67108860)


;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

(setq ring-bell-function 'ignore)

;; Set default font
(set-face-attribute 'default nil
		    :family "Operator Mono"
		    :height 160
		    :weight 'normal
		    :width 'normal)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil
		    :family "Operator Mono"
		    :height 160
		    :weight 'normal
		    :width 'normal)

;; Set the variable pitch face
;; (set-face-attribute 'variable-pitch nil
;; 		    :family "Cantarell"
;; 		    :height 160
;; 		    :weight 'regular)


;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))

(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

(setq package-enable-at-startup nil)

(unless (featurep 'straight)
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage)))

(straight-use-package 'setup)
(eval-when-compile
  (require 'setup))

;; hide the welcome buffer
(setq inhibit-splash-screen t)

(straight-use-package 'all-the-icons)

;; Set `doom-themes' early to prevent non-stylized UI flash.
(straight-use-package 'doom-themes)
(setup  (:require doom-themes)
	;; (load-theme 'doom-xcode t)
	(load-theme 'doom-one t)

	(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
	(doom-themes-treemacs-config)

	;; (doom-themes-org-config)
	)

;; Set `doom-modeline' early to prevent non-stylized UI flash.
;; Note: `doom-modeline' requires M-x all-the-icons-install-fonts.
(straight-use-package 'doom-modeline)
(setup (:require doom-modeline)
       (size-indication-mode 1)
       (column-number-mode 1)

       (:hook-into after-init-hook)
       (:option doom-modeline-icon nil ;; icons' position does not work properly
		;; doom-modeline-major-mode-icon nil
		;; doom-modeline-lsp nil
		;; doom-modeline-buffer-file-name-style 'truncate-upto-root 
		doom-modeline-buffer-file-name-style 'relative-from-project
		doom-modeline-buffer-encoding 'nondefault))

;; Using awesome-tray to save more space for modeline
;; (straight-use-package '(awesome-tray :host github :repo "manateelazycat/awesome-tray"))
;; (setup (:require awesome-tray)
;;   (awesome-tray-mode 1))

;; (straight-use-package 'hide-mode-line)
;; (setup (:require hide-mode-line)
;; 	 (:hook-into eaf-mode))

;; A dependency that dashboard has.
;; (setup (:require page-break-lines))

;; (setup (:require dashboard)
;;   (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

;;   (:option dashboard-startup-banner "~/.dotfiles/Emacs/dashboard/banner.txt"
;; 	   dashboard-banner-logo-title nil
;; 	   dashboard-center-content t
;; 	   dashboard-set-heading-icons t
;; 	   dashboard-set-init-info t
;; 	   dashboard-set-file-icons t
;; 	   dashboard-items '((recents  . 5)
;; 			     (projects . 5)))
;;   (dashboard-setup-startup-hook))

(straight-use-package 'posframe)
(setup (:require posframe))

(straight-use-package 'exec-path-from-shell)
(setup (:require exec-path-from-shell)
       (when (memq window-system '(mac ns))
	 (exec-path-from-shell-initialize)))

;; Add my library path to load-path
(push "~/.dotfiles/Emacs/elisp" load-path)
(push "~/Documents/Org" load-path)

(when (string> emacs-version "29")
  (pixel-scroll-precision-mode 1))

#+end_src
* Setup
#+begin_src emacs-lisp
;; -*- coding: utf-8; lexical-binding: t; -*-
#+end_src
** :daley
#+begin_src emacs-lisp
  (setup-define :delay
		(lambda (&rest time)
		  `(run-with-idle-timer ,(or time 1)
					nil ;; Don't repeat
					(lambda () (require ',(setup-get 'feature)))))
		:documentation "Delay loading the feature until a certain amount of idle time has passed.")  
#+end_src

** :disabled
#+begin_src emacs-lisp
  (setup-define :disabled
		(lambda ()
		  `,(setup-quit))
		:documentation "Always stop evaluating the body.")
#+end_src

** :load-after
#+begin_src emacs-lisp
  (setup-define :load-after
		(lambda (features &rest body)
		  (let ((body `(progn
				 (require ',(setup-get 'feature))
				 ,@body)))
		    (dolist (feature (if (listp features)
					 (nreverse features)
				       (list features)))
		      (setq body `(with-eval-after-load ',feature ,body)))
		    body))
		:documentation "Load the current feature after FEATURES."
		:indent 1)
#+end_src

** :straight
#+begin_src emacs-lisp
  (setup-define :straight
		(lambda (recipe)
		  `(unless (straight-use-package ',recipe)
		     ,(setup-quit)))
		:documentation
		"Install RECIPE with `straight-use-package'.
  This macro can be used as HEAD, and will replace itself with the
  first RECIPE's package."
		:repeatable t
		:shorthand (lambda (sexp)
			     (let ((recipe (cadr sexp)))
			       (if (consp recipe)
				   (car recipe)
				 recipe))))
#+end_src
* Startup Setting 
#+begin_src emacs-lisp
(defconst IS-GUI (or (display-graphic-p) (and (daemonp) (not (string= (daemonp) "tty")))))
(defconst IS-TTY (or (not (display-graphic-p)) (and (daemonp) (string= (daemonp) "tty"))))

;; Copy from https://github.com/willbush/system/blob/master/emacs/init.el
;; A big contributor to startup times is garbage collection. We up the gc
;; threshold to temporarily prevent it from running, then reset it later using a
;; hook and controlling after that with `gcmh-mode'.
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)

;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

;; Set the right directory to store the native comp cache
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

;; Keep a ref to the actual file-name-handler
(defvar default-file-name-handler-alist file-name-handler-alist)

;; Set the file-name-handler to nil (because regexing is cpu intensive)
(setq file-name-handler-alist nil)

;; Reset file-name-handler-alist after initialization
(add-hook 'emacs-startup-hook
	  (lambda ()
	    (setq gc-cons-threshold GC-CONS-THRESHOLD
		  gc-cons-percentage 0.1
		  file-name-handler-alist default-file-name-handler-alist)))

(setup (:straight gcmh)
       (:hook-into after-init-hook)
       (:option gcmh-idle-delay 5
		gcmh-high-cons-threshold GC-CONS-THRESHOLD)
       (add-function :after after-focus-change-function #'gcmh-idle-garbage-collect))

(setq read-process-output-max (* 1024 1024)) ;; 1mb

(global-auto-revert-mode 1)
(recentf-mode 1)

(setq make-backup-files nil
      auto-save-default nil)

(delete-selection-mode t)

(setup (:straight super-save)
  (:delay)
  (:when-loaded
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t)))
#+end_src

* Editing
** Evil
*** Main Settings
#+begin_src emacs-lisp
;; (setup (:straight undo-tree)
;;   (global-undo-tree-mode 1)
;;   (:option undo-tree-visualizer-diff t
;; 	   undo-tree-auto-save-history t
;; 	   undo-tree-enable-undo-in-region t
;;       undo-limit 800000
;;       undo-strong-limit 12000000
;;       undo-outer-limit 128000000))
(setup (:straight undo-fu))
(setup (:straight undo-fu-session)
  (global-undo-fu-session-mode))

(setup (:straight vundo))

(setup (:straight evil)
  ;; Pre-load configuration
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  (setq evil-undo-system 'undo-fu)

  ;; Activate the Evil
  (evil-mode 1)

  (evil-set-initial-state 'messages-buffer-mode 'normal))

(setup (:straight evil-collection)
  (:load-after evil
    (:option evil-collection-outline-bind-tab-p nil)
    (evil-collection-init)))
#+end_src
*** Evil-nerd-commenter
#+begin_src emacs-lisp
(setup (:straight evil-nerd-commenter)
  (:load-after evil)
  (:global "M-/" evilnc-comment-or-uncomment-lines))
#+end_src
*** Evil-multiedit
#+begin_src emacs-lisp
(setup (:straight evil-multiedit)
  (:load-after evil)
  (require 'evil-multiedit)
  (evil-multiedit-default-keybinds))
#+end_src
*** Evil-surround
#+begin_src emacs-lisp
(setup (:straight evil-surround)
  (:load-after evil)
  (global-evil-surround-mode 1))
#+end_src
*** Evil-escape
#+begin_src emacs-lisp
(setup (:straight evil-escape)
  (:load-after evil)
  (setq-default evil-escape-key-sequence "jk")
  (evil-escape-mode))
#+end_src
*** Evil-matchit
#+begin_src emacs-lisp
(setup (:straight evil-matchit)
  (:load-after evil)
  (global-evil-matchit-mode 1)
  )
#+end_src
*** Simplify Leader Bindings (general.el)
#+begin_src emacs-lisp
(setup (:straight general)
  (general-evil-setup t)

  (general-create-definer dw/leader-key-def
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"))

(dw/leader-key-def
   "SPC" 'execute-extended-command
   "f" 'find-file
   "a" 'org-agenda)
#+end_src
** which-key
#+begin_src emacs-lisp
  (setup (:straight which-key)
	 (:option which-key-idle-delay 0.3)
	 (which-key-mode))

#+end_src
** Editing Tools
*** Hungry Delete
#+begin_src emacs-lisp
  (setup (:straight hungry-delete)
	 (:hook-into dw/prog-mode))
#+end_src
*** Avy
#+begin_src emacs-lisp
(setup (:straight avy)
  (dw/leader-key-def
    "j"   '(:ignore t :which-key "jump")
    "jj"  '(avy-goto-char :which-key "jump to char")
    "jw"  '(avy-goto-word-0 :which-key "jump to word")
    "jl"  '(avy-goto-line :which-key "jump to line")))
#+end_src
*** Spelling Checking
#+begin_src emacs-lisp
(setq flyspell-issue-message-flag nil)
(setq ispell-program-name "hunspell")
;; reset the hunspell so it STOPS querying locale!
;; "en_US" is the key to lookup in `ispell-local-dictionary-alist`
(setq ispell-local-dictionary "en_US")
;; two dictionaries "en_US" and "zh_CN" are used. Feel free to remove "zh_CN"
;; If `ispell-local-dictionary-alist' is nil, `ispell-local-dictionary' is passed
;; to hunpsell cli program as dictionary.
(setq ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US" "zh_CN") nil utf-8)))
;; new variable `ispell-hunspell-dictionary-alist' is defined in Emacs
;; If it's nil, Emacs tries to automatically set up the dictionaries.
(when (boundp 'ispell-hunspell-dictionary-alist)
      (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist))

(setup (:straight wucuo))
#+end_src
* Workspace
** Perspective
#+begin_src emacs-lisp
(setup (:straight perspective)
       (:option persp-initial-frame-name "Main"
		persp-state-default-file (concat user-emacs-directory ".emacs.desktop"))
       (setq persp-mode-prefix-key (kbd "C-x p"))

       (add-hook 'kill-emacs-hook #'persp-state-save)
       ;; Running `persp-mode' multiple times resets the perspective list...
       (unless (equal persp-mode t)
	 (persp-mode)))

;; Windows/buffers sets shared among frames + save/load.
;; (setup (:straight persp-mode)
;;   (setq persp-keymap-prefix (kbd "C-x p")
;; 	persp-nil-name "default"
;; 	persp-set-last-persp-for-new-frames nil
;; 	persp-kill-foreign-buffer-behaviour 'kill)
;;   (:hook-into after-init)

;;   ;; Eshell integration
;;   (persp-def-buffer-save/load
;;    :mode 'eshell-mode :tag-symbol 'def-eshell-buffer
;;    :save-vars '(major-mode default-directory))

;;   ;; Shell integration
;;   (persp-def-buffer-save/load
;;    :mode 'shell-mode :tag-symbol 'def-shell-buffer
;;    :mode-restore-function (lambda (_) (shell))
;;    :save-vars '(major-mode default-directory)))

(dw/leader-key-def
   "SPC" 'execute-extended-command
   "f" 'find-file
   "b" 'persp-switch-to-buffer*
   "k" 'persp-kill-buffer*
   "a" 'org-agenda)
#+end_src
* UI Setting
** Line Numbers
#+begin_src emacs-lisp
  ;; Enable liner number
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  vterm-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Fonts Ligature
#+begin_src emacs-lisp
  (setup (:straight '(ligature :host github :repo "mickeynp/ligature.el"))
	 ;; Enable the "www" ligature in every possible major mode
	 (ligature-set-ligatures 't '("www"))
	 ;; Enable traditional ligature support in eww-mode, if the
	 ;; `variable-pitch' face supports it
	 (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
	 ;; Enable all Cascadia Code ligatures in programming modes
	 (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
					      ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
					      "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
					      "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
					      "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
					      "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
					      "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
					      "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
					      ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
					      "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
					      "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
					      "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
					      "\\\\" "://"))
	 ;; Enables ligature checks globally in all buffers. You can also do it
	 ;; per mode with `ligature-mode'.
	 (global-ligature-mode t))
#+end_src

** Nyan
#+begin_src emacs-lisp
(if IS-GUI
    (setup (:straight nyan-mode)
      (:delay)
      (:option nyan-mode nil
	       nyan-animate-nyancat t
	       nyan-wavy-trail t)))
#+end_src

** Parrot
#+begin_src emacs-lisp
(setup (:straight parrot)
  (setq parrot-num-rotations nil))
#+end_src
** Highlight TODOs
#+begin_src emacs-lisp
  (setup (:straight hl-todo)
	 (:hook-into org-mode dw/prog-mode)
	 (:option hl-todo-keyword-faces
		  '(("TODO"   . "#FF0000")
		    ("FIXME"  . "#FF0000")
		    ("DEBUG"  . "#A020F0")
		    ("NEXT" . "#FF4500")
		    ("TBA" . "#61d290")
		    ("UNCHECK"   . "#1E90FF"))))

#+end_src

** Highligh numbers
#+begin_src emacs-lisp
  (setup (:straight highlight-numbers)
	 (:hook-into dw/prog-mode))
#+end_src

** Highlight the diff
#+begin_src emacs-lisp
  (setup (:straight diff-hl)
	 (global-diff-hl-mode))
#+end_src

** Highlight the current buffer
#+begin_src emacs-lisp
  (setup (:straight beacon)
	 (beacon-mode 1))
#+end_src
** Tree-Sitter
#+begin_src emacs-lisp
(straight-use-package 'tree-sitter)
(straight-use-package 'tree-sitter-langs)

(setup tree-sitter
  (:delay)
  (require 'tree-sitter)
  (require 'tree-sitter-langs)
  
  (add-hook 'c-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'python-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'js2-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'typescritpt-mode-hook #'tree-sitter-hl-mode)

  (global-tree-sitter-mode))
#+end_src

* Auto-Tangle Org File
Tangle (form a new file) on save
#+begin_src emacs-lisp
  ;; Since we don't want to disable org-confirm-babel-evaluate all
  ;; of the time, do it around the after-save-hook
  (defun dw/org-babel-tangle-dont-ask ()
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask
						'run-at-end 'only-in-org-mode)))
#+end_src
* Window Management
** Ace Window
Use =C-x o= to active =ace-window= to swap the windows (less than two windows), or using following arguments (more than two):
- =x= - delete window
- =m= - swap windows
- =M= - move window
- =c= - copy window
- =j= - select buffer
- =n= - select the previous window
- =u= - select buffer in the other window
- =c= - split window fairly, either vertically or horizontally
- =v= - split window vertically
- =b= - split window horizontally
- =o= - maximize current window
- =?= - show these command bindings
  #+begin_src emacs-lisp
  (setup (:straight ace-window)
         (:global "C-x o" ace-window)
         (:option aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
         (dw/leader-key-def
           "w" '(:ignore t :which-key "window")
          "wo" '(ace-window :which-key "ace-window")
          "wd" '(ace-delete-window :which-key "ace-delete-window")
          "ws" '(ace-swap-window :which-key "ace-swap-window")))
  #+end_src
** Window History with winner-mode
#+begin_src emacs-lisp
(setup winner
  (winner-mode)
  (define-key evil-window-map "u" 'winner-undo)
  (define-key evil-window-map "U" 'winner-redo))
#+end_src
** Popper
#+begin_src emacs-lisp
  (setup (:straight popper)
	 (:also-load popper-echo)
	 (:option popper-reference-buffers
		  '("\\*Messages\\*"
		    "Output\\*$"
		    "\\*Async Shell Command\\*"
		    help-mode
		    compilation-mode
		    ;; "^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
		    "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
		    "^\\*term.*\\*$"   term-mode   ;term as a popup
		    "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
		    ))
	 (:global "C-`" popper-toggle-latest
		  "M-`" popper-cycle
		  "C-M-`" popper-toggle-type)
	 (popper-mode +1)
	 (popper-echo-mode +1))
#+end_src
* File Management
** Dired
#+begin_src emacs-lisp
(setup dired
       (:global "C-x C-j" dired-jump)
       (:option dired-dwim-target t))

;; (setup all-the-icons-dired
;; 	(:hook-into dired-mode))

(setup (:straight dired-hide-dotfiles)
  (:hook-into dired-mode)
  (:with-map dired-mode-map
    (:bind "." dired-hide-dotfiles-mode)))

(setup (:straight diredfl)
       (:hook-into dired-mode))
#+end_src
** Dirvish
#+begin_src emacs-lisp
  (setup (:straight dirvish)
	 (:also-load dirvish-peek)
	 (dirvish-override-dired-mode))
#+end_src
* Org Mode
** Config Basic Org mode
#+begin_src emacs-lisp
(defun dw/org-mode-setup ()
  (org-indent-mode)
  (visual-line-mode 1))

(setup (:straight org)
  (:hook dw/org-mode-setup)
  (setq org-html-head-include-default-style nil
	;; org-ellipsis " ▾"
	org-adapt-indentation t
	org-hide-emphasis-markers t
	org-src-fontify-natively t
	org-src-tab-acts-natively t
	org-edit-src-content-indentation 0
	org-hide-block-startup nil
	org-src-preserve-indentation nil
	org-startup-folded 'content
	org-cycle-separator-lines 2)

  ;; (setq org-modules
  ;; 	'(org-crypt
  ;; 	  org-habit
  ;; 	  org-bookmark
  ;; 	  org-eshell
  ;; 	  org-irc))


  ;; (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

  (setq org-html-htmlize-output-type nil)

  ;; config for images in org
  (auto-image-file-mode t)
  (setq org-image-actual-width nil)
  ;; default image width
  (setq org-image-actual-width '(300))

  (setq org-export-with-sub-superscripts nil))
#+end_src
** Apperance of Org   
*** Bullets
#+begin_src emacs-lisp
  ;; change bullets for headings
  (setup (:straight org-superstar)
	 (:load-after org)
	 (:hook-into org-mode)
	 (:option org-superstar-remove-leading-stars t
		  org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
*** COMMENT Fonts
#+begin_src emacs-lisp
  (setup org-faces
	 ;; Make sure org and org-indent face is available
	 (:also-load org-indent org-faces)
	 (:when-loaded

	  ;; Set Size and Fonts for Headings
	  (dolist (face '((org-level-1 . 1.2)
			  (org-level-2 . 1.1)
			  (org-level-3 . 1.05)
			  (org-level-4 . 1.0)
			  (org-level-5 . 1.0)
			  (org-level-6 . 1.0)
			  (org-level-7 . 1.0)
			  (org-level-8 . 1.0)))
	    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

	  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
	  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
	  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
	  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
	  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
	  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
	  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
	  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
	  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)


	  ;; Get rid of the background on column views
	  (set-face-attribute 'org-column nil :background nil)
	  (set-face-attribute 'org-column-title nil :background nil)))
#+end_src
*** Set Margins for Modes
#+begin_src emacs-lisp
  (setup (:straight visual-fill-column)
	 (:hook-into org-mode)
	 (:option visual-fill-column-width 110
		  visual-fill-column-center-text t))
#+end_src
*** Properly Align Tables
#+begin_src emacs-lisp
  (setup (:straight valign)
	 (:hook-into org-mode))
#+end_src
*** Auto-show Markup Symbols
#+begin_src emacs-lisp
  (setup (:straight org-appear)
	 (:hook-into org-mode))
#+end_src
** Org Export
#+begin_src emacs-lisp
  (with-eval-after-load "org-export-dispatch"
    ;; Edited from http://emacs.stackexchange.com/a/9838
    (defun dw/org-html-wrap-blocks-in-code (src backend info)
      "Wrap a source block in <pre><code class=\"lang\">.</code></pre>"
      (when (org-export-derived-backend-p backend 'html)
	(replace-regexp-in-string
	 "\\(</pre>\\)" "</code>\n\\1"
	 (replace-regexp-in-string "<pre class=\"src src-\\([^\"]*?\\)\">"
				   "<pre>\n<code class=\"\\1\">" src))))

    (require 'ox-html)

    (add-to-list 'org-export-filter-src-block-functions
		 'dw/org-html-wrap-blocks-in-code)
    )
#+end_src
** Org Babel
*** Load Org Babel
#+begin_src emacs-lisp
  (with-eval-after-load "ob"
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (C . t)
       (shell . t)
       (python . t)
       (R .t)))

    (setq org-confirm-babel-evaluate nil))
#+end_src
*** Src Block Templates
#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
  (setup (:require org-tempo)
	 (:when-loaded
	  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
	  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
	  (add-to-list 'org-structure-template-alist '("cc" . "src C"))
	  (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
	  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
	  (add-to-list 'org-structure-template-alist '("js" . "src js"))
	  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
	  (add-to-list 'org-structure-template-alist '("py" . "src python :results output :exports both"))
	  (add-to-list 'org-structure-template-alist '("r" . "src R")))
	 (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
	 (add-to-list 'org-structure-template-alist '("json" . "src json")))
#+end_src
** Org Agenda
#+begin_src emacs-lisp
  (with-eval-after-load "org-agenda"

    (if IS-MAC
	(setq org-agenda-files '("~/Documents/Org/Planner")))


    ;; Custom TODO states and Agendas
    (setq org-todo-keywords
	  '((sequence "TODO(t)" "NEXT(n)" "TBA(b)" "|" "DONE(d!)")))

    (setq org-tag-alist
	  '((:startgroup)
	    ;; Put mutually exclusive tags here
	    (:endgroup)
	    ("review" . ?r)
	    ("assignment" . ?a)
	    ("lab" . ?l)
	    ("test" . ?t)
	    ("quiz" . ?q)
	    ("pratice" . ?p)
	    ("emacs" . ?e)
	    ("note" . ?n)
	    ("idea" . ?i)))


    (setup (:straight org-super-agenda)
	   (:hook-into org-agenda-mode)
	   (:option org-agenda-skip-scheduled-if-done t
		    org-agenda-skip-deadline-if-done t
		    org-agenda-include-deadlines t
		    org-agenda-include-diary t
		    org-agenda-block-separator nil
		    org-agenda-compact-blocks t
		    org-log-done 'time
		    org-log-into-drawer t
		    org-agenda-start-with-log-mode t)

	   (setq org-agenda-custom-commands
		 '(("d" "Dashboard"
		    ((agenda "" ((org-agenda-span 'day)

				 (org-super-agenda-groups
				  '((:name "Today"
					   :time-grid t
					   :date today
					   :scheduled today
					   :order 1)
				    (:name "Due Soon"
					   :deadline future
					   :order 2)
				    (:discard (:anything t))))))
		     (alltodo "" ((org-agenda-overriding-header "")
				  (org-super-agenda-groups
				   '((:name "Overdue"
					    :deadline past
					    :order 1)
				     (:name "Assignments"
					    :tag "assignment"
					    :order 2)
				     (:name "Labs"
					    :tag "lab"
					    :order 3)
				     (:name "Quizs"
					    :tag "quiz"
					    :order 4)
				     (:name "Tests/Exam"
					    :tag "test"
					    :order  5)
				     (:name "Projects"
					    :tag "Project"
					    :order 14)
				     (:name "Emacs"
					    :tag "Emacs"
					    :order 13)
				     (:discard (:anything t)))))))))))

    ;; Refiling
    (setq org-refile-targets
	  '(("~/Documents/Org/Planner/Archive.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; Capture Templates
    (defun dw/read-file-as-string (path)
      (with-temp-buffer
	(insert-file-contents path)
	(buffer-string)))

    (setq org-capture-templates
	  `(("t" "Tasks / Projects")
	    ("tt" "Task" entry (file+olp "~/Documents/Org/Planner/Tasks.org" "Inbox")
	     "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1))))
#+end_src
** Org Roam
#+begin_src emacs-lisp
(setup (:straight org-roam)

 (:option org-roam-directory "~/Documents/Org/Notes"
					org-roam-database-connecter 'splite-builtin
					org-roam-completion-everywhere t
					org-roam-completion-system 'default)
 (:when-loaded
	(org-roam-db-autosync-mode))

 (:global "C-c o l" org-roam-buffer-toggle
		"C-c o f" org-roam-node-find
		"C-c o c" org-roam-dailies-capture-today
		"C-c o g" org-roam-graph)
 (:bind "C-c o i" org-roam-node-insert
	"C-c o I" org-roam-insert-immediate))

(setup (:straight org-roam-ui)
 (:option org-roam-ui-sync-theme t
		org-roam-ui-follow t
		org-roam-ui-update-on-save t
		org-roam-ui-open-on-start t))
#+end_src
* Completion System
** Vertico
#+begin_src emacs-lisp
  (defun dw/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
	;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
	(if (string-match-p "/." (minibuffer-contents))
	    (zap-up-to-char (- arg) ?/)
	  (delete-minibuffer-contents))
      (delete-word (- arg))))

  (setup (:straight vertico)
	 (vertico-mode)
	 (:with-map vertico-map
		    (:bind "C-j" vertico-next
			   "C-k" vertico-previous
			   "C-f" vertico-exit))
	 (:with-map minibuffer-local-map
		    (:bind "M-h" dw/minibuffer-backward-kill))
	 (:option vertico-cycle t))
#+end_src
** Preserve Minibuffer History with savehist-mode
#+begin_src emacs-lisp
  (setup (:straight savehist)
	 (savehist-mode 1)
	 (:option history-length 25))
#+end_src
** Improved Candidate Filtering with Orderless
#+begin_src emacs-lisp
  (setup (:straight orderless)
	 (:option completion-styles '(orderless)
		  completion-category-defaults nil
		  completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** Consult Commands
#+begin_src emacs-lisp
  (setup (:straight consult)
	 (:global "C-s" consult-line
		  "C-M-l" consult-imenu
		  "C-M-j" persp-switch-to-buffer*)

	 (:with-map minibuffer-local-map
		    (:bind "C-r" consult-history))

	 (defun dw/get-project-root ()
	   (when (fboundp 'projectile-project-root)
	     (projectile-project-root)))

	 (:option consult-project-root-function #'dw/get-project-root
		  completion-in-region-function #'consult-completion-in-region))

  (setup (:straight consult-dir)
	 (:global "C-x C-d" consult-dir)
	 (:with-map vertico-map
		    (:bind "C-x C-d" consult-dir
			   "C-x C-j" consult-dir-jump-file))
	 (:option consult-dir-project-list-function nil))
#+end_src
** Completion Annotations with Marginalia
#+begin_src emacs-lisp
  (setup (:straight marginalia)
	 (:option marginalia-annotators '(marginalia-annotators-heavy
					  marginalia-annotators-light
					  nil))
	 (marginalia-mode))
#+end_src
** Embark
#+begin_src emacs-lisp
  (setup (:straight embark-consult)
	 (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode)
	 )

  (setup (:straight embark)
	 (:also-load embark-consult)
	 (:global "C-." embark-act)

	 ;; Show Embark actions via which-key
	 (setq embark-action-indicator
	       (lambda (map)
		 (which-key--show-keymap "Embark" map nil nil 'no-paging)
		 #'which-key--hide-popup-ignore-command)
	       embark-become-indicator embark-action-indicator))

#+end_src
** Tempel
#+begin_src emacs-lisp
  (setup (:straight tempel)
	 (:global "M-+" tempel-complete
		  "M-*" tempel-insert)
	 (setq tempel-path "~/.dotfiles/Emacs/templates")
	 (global-tempel-abbrev-mode))
#+end_src

** Yasnippets
#+begin_src emacs-lisp
(setup (:straight yasnippet)
  (:delay)
  (require 'yasnippet)
  (:option yas-snippet-dirs '("~/.dotfiles/Emacs/snippets"))
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode))
  ;; (add-hook 'org-mode-hook #'yas-minor-mode))

(setup (:straight consult-yasnippet)
  (:load-after yasnippet))
#+end_src

** Citre
#+begin_src emacs-lisp
  (setup (:straight citre)
	 (:also-load citre-config)
	 (:global "C-x c j" citre-jump
		  "C-x c J" citre-jump-back
		  "C-x c p" citre-ace-peek
		  "C-x c u" citre-update-this-tags-file)

	 (defun dw/get-project-root ()
	   (when (fboundp 'projectile-project-root)
	     (projectile-project-root)))

	 (:option citre-readtags-program "/etc/profiles/per-user/dez/bin/readtags"
		  citre-ctags-program "/etc/profiles/per-user/dez/bin/ctags"
		  citre-project-root-function #'dw/get-project-root
		  ;; Set this if you want to always use one location to create a tags file.
		  citre-default-create-tags-file-location 'global-cache

		  citre-use-project-root-when-creating-tags t
		  citre-prompt-language-for-ctags-command t
		  citre-auto-enable-citre-mode-modes '(prog-mode)))
#+end_src

** Corfu
#+begin_src emacs-lisp
(setq dw/prog-mode
  '(c-mode
    c++-mode
    java-mode
    python-mode
    ruby-mode
    lua-mode
    rust-mode
    rustic-mode
    elixir-mode
    go-mode
    haskell-mode
    haskell-literate-mode
    dart-mode
    scala-mode
    typescript-mode
    typescript-tsx-mode
    js2-mode
    js-mode
    rjsx-mode
    tuareg-mode
    latex-mode
    Tex-latex-mode
    texmode
    context-mode
    texinfo-mode
    bibtex-mode
    clojure-mode
    clojurec-mode
    clojurescript-mode
    clojurex-mode
    sh-mode
    web-mode
    css-mode
    elm-mode
    ielm-mode
    emacs-lisp-mode))

(setup (:straight corfu)
  (add-to-list 'load-path (expand-file-name "straight/build/corfu/extensions" user-emacs-directory))
  (require 'corfu-history)
  (:option
   corfu-cycle t                ;; Enable cycling for `corfu-next/previous'
   corfu-auto t                 ;; Enable auto completion
   corfu-quit-at-boundary t     ;; Automatically quit at word boundary
   corfu-quit-no-match t        ;; Automatically quit if there is no match
   corfu-preview-current nil    ;; Disable current candidate preview
   ;; corfu-echo-documentation nil ;; Disable documentation in the echo area
   corfu-echo-documentation 0.25
   corfu-preselect-first nil
   ;; corfu-auto-delay 0.2
   corfu-auto-prefix 1
   corfu-excluded-modes dw/prog-mode)
  
  (:with-map corfu-map
    (:bind
     [tab] corfu-next
     [backtab] corfu-previous
     "<escape>" corfu-quit))
  
  (global-corfu-mode)
  (corfu-history-mode)
  )

;; Use dabbrev with Corfu!
(setup (:require dabbrev))

;; corfu backend
(setup (:straight cape)
  (setq cape-dabbrev-min-length 3)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;; (add-to-list 'completion-at-point-functions #'cape-keyword)

  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  )


;; Enable Corfu completion UI

(when (display-graphic-p)
  (setup (:straight (corfu-doc :type git :host github :repo "galeo/corfu-doc"))
  (:hook-into corfu-mode)))

(if IS-TTY
    (progn
      (straight-use-package
       '(popon :type git :repo "https://codeberg.org/akib/emacs-popon.git"))
      (straight-use-package
       '(corfu-terminal :type git :repo "https://codeberg.org/akib/emacs-corfu-terminal.git"))
      (require 'corfu-terminal)
      (corfu-terminal-mode +1)))

;; (setup (:pkg svg-lib :type built-in)) ;; built-in has little icons
(when (display-graphic-p)
  (setup (:straight kind-icon)
    (:load-after corfu)
    (:option kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    (:when-loaded
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))))
#+end_src
* Helpful Function Description
#+begin_src emacs-lisp
  (setup (:straight helpful)
	 (:option counsel-describe-function-function #'helpful-callable
		  counsel-describe-variable-function #'helpful-variable)
	 (:global [remap describe-function] helpful-function
		  [remap describe-symbol] helpful-symbol
		  [remap describe-variable] helpful-variable
		  [remap describe-command] helpful-command
		  [remap describe-key] helpful-key))
#+end_src
 
* Developing
** Developing Tools
*** Brackets
#+begin_src emacs-lisp
;; (electric-pair-mode +1)

(setup (:straight smartparens)
  (:also-load smartparens-config)
  (:hook-into dw/prog-mode)
  (:bind "M-r" sp-rewrap-sexp    
	 "M-s" sp-unwrap-sexp
	 "M-[" sp-wrap-square
	 "M-{" sp-wrap-curly
	 "C-)" sp-forward-slur-sexp
	 "C-}" sp-forward-barfsexp))

(setup (:require rainbow-delimiters)
  (:hook-into dw/prog-mode))
#+end_src
*** Indent
#+begin_src emacs-lisp
  (setup (:straight highlight-indent-guides)
	 (:hook-into dw/prog-mode)
	 (:option highlight-indent-guides-delay 0
		  highlight-indent-guides-method 'character))

  (setup (:straight aggressive-indent)
	 (:hook-into emacs-lisp-mode lisp-mode python-mode))
#+end_src
*** Rainbow Mode
#+begin_src emacs-lisp
  (setup (:straight rainbow-mode)
	 (:hook-into web-mode js2-mode emacs-lisp-mode))
#+end_src
*** Format All
#+begin_src emacs-lisp
(setup (:straight format-all)
  (:delay)
  (:hook-into dw/prog-mode))
#+end_src
*** quickrun.el
#+begin_src emacs-lisp
(setup (:straight quickrun)
  ;; set python3 as default
  (quickrun-add-command "python" 
    '((:command . "python3") 
      (:exec . "%c %s") 
      (:tempfile . nil)) 
    :default "python")
  (:when-loaded
    (dw/leader-key-def
      "q" '(:ignore t :which-key "quickrun")
      "qq" '(quickrun :which-key "quickrun")
      "qs" '(quickrun-shell :which-key "quickrun-shell"))))
#+end_src

*** Minimap
#+begin_src emacs-lisp
  (setup (:straight minimap)
	 (:option minimap-window-location 'right))
#+end_src

*** Text Folding
#+begin_src emacs-lisp
;; (setup (:straight origami)
;;   (:load-after prog-mode)
;;   (:hook-into prog-mode))
(with-eval-after-load 'prog-mode
  (add-hook #'prog-mode-hook 'hs-minor-mode))
#+end_src
** Languages
*** Python
#+begin_src emacs-lisp
;; (setup (:straight lsp-pyright))
#+end_src
*** Web (HTML/CSS/JS...)
**** JS/TS
#+begin_src emacs-lisp
(setup (:straight typescript-mode)
       (:file-match "\\.ts\\'")
       (setq typescript-indent-level 2))

(defun dw/set-js-indentation ()
  (setq-default js-indent-level 2)
  (setq-default tab-width 2))

(setup (:straight js2-mode)
       (:file-match "\\.jsx?\\'")

       ;; Use js2-mode for Node scripts
       (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

       ;; Don't use built-in syntax checking
       (setq js2-mode-show-strict-warnings nil)

       ;; Set up proper indentation in JavaScript and JSON files
       (add-hook 'js2-mode-hook #'dw/set-js-indentation)
       (add-hook 'json-mode-hook #'dw/set-js-indentation))


(setup (:straight rjsx-mode)
       (:file-match "\\.jsx\\'"))

(setup (:straight add-node-modules-path)
  (eval-after-load 'js2-mode
  '(add-hook 'js2-mode-hook #'add-node-modules-path))
  (eval-after-load 'typescript-mode
  '(add-hook 'typescript-mode-hook #'add-node-modules-path)))
#+end_src
**** CoffeeScript
#+begin_src emacs-lisp
  (setup (:straight coffee-mode)
	 (:file-match "\\.coffee\\'")
	 (:also-load sourcemap flymake-coffee)
	 ;; automatically clean up bad whitespace
	 (setq whitespace-action '(auto-cleanup))
	 ;; This gives you a tab of 2 spaces
	 (custom-set-variables '(coffee-tab-width 2))

	 ;; generating sourcemap by '-m' option. And you must set '--no-header' option
	 (setq coffee-args-compile '("-c" "--no-header" "-m"))
	 (add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)

	 ;; If you want to remove sourcemap file after jumping corresponding point
	 (defun my/coffee-after-compile-hook (props)
	   (sourcemap-goto-corresponding-point props)
	   (delete-file (plist-get props :sourcemap)))
	 (add-hook 'coffee-after-compile-hook 'my/coffee-after-compile-hook))

  (setup (:straight flymake-coffee)
	 (:hook-into coffee-mode))
#+end_src
**** HTML
#+begin_src emacs-lisp
(setup (:straight web-mode)
  (:file-match "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")
  (setq-default web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-attribute-indent-offset 2))

;; 1. Start the server with `httpd-start'
;; 2. Use `impatient-mode' on any buffer
(setup (:straight impatient-mode))
(setup (:straight skewer-mode))
#+end_src
**** Emmet
#+begin_src emacs-lisp
  (setup (:straight emmet-mode)
	 (:hook-into web-mode css-mode))
#+end_src
**** SCSS/SASS
#+begin_src emacs-lisp
  (setup (:straight scss-mode)
	 (:file-match "\\.scss\\'")
	 (:option scss-compile-at-save t
		  scss-output-directory "../css"
		  scss-sass-command "sass --no-source-map"))

#+end_src
*** C/C++
#+begin_src emacs-lisp
  (setup c
	 (:option c-default-style "linux"))
#+end_src
*** Java
#+begin_src emacs-lisp
;; (setup (:straight lsp-java))
#+end_src
*** Nix
#+begin_src emacs-lisp
(straight-use-package 'nixos-options)
(straight-use-package 'nix-sandbox)
(straight-use-package 'nix-update)
(setup (:straight nix-mode)
       (:file-match "\\.nix\\'")
       (:also-load nixos-options nix-sandbox nix-update))
#+end_src
*** Docker
#+begin_src emacs-lisp
(setup (:straight docker)
  (:delay))

(setup (:straight dockerfile-mode)
       (:file-match "Dockerfile\\'"))

(setup (:straight docker-tramp)
  (:delay))
#+end_src
*** Common Lisp
#+begin_src emacs-lisp
;; (setup (:straight slime)
;;        (:file-match "\\.lisp\\'"))

(setup (:straight sly)
  (:file-match "\\.lisp\\'"))
#+end_src
*** Latex
**** CDLaTex
#+begin_src emacs-lisp
(straight-use-package 'auctex)
(setup (:straight cdlatex)
       (:hook-into LaTeX-mode latex-mode)
       (add-hook 'org-mode-hook #'org-cdlatex-mode))
#+end_src
**** Xenops
#+begin_src emacs-lisp
  (if IS-GUI
      (setup (:straight xenops)
	     (:hook-into latex-mode LaTeX-mode org-mode)
	     (:option xenops-math-image-scale-factor 2.0)))

#+end_src
*** Yaml
#+begin_src emacs-lisp
  (setup (:straight yaml-mode)
	 (:file-match "\\.ya?ml\\'"))
#+end_src
*** R
#+begin_src emacs-lisp
  (setup (:straight ess)
	 (:file-match "\\.R\\'"))
#+end_src
*** Markdown
#+begin_src emacs-lisp
  (setup (:straight markdown-mode)
	 (straight-use-package 'edit-indirect)
	 (:option markdown-command "multimarkdown"))
#+end_src
** eglot
#+begin_src emacs-lisp
(setup (:straight eldoc-box)
       (add-hook 'eglot--managed-mode-hook #'eldoc-box-hover-at-point-mode t))
(setup (:straight eglot)
   (setq eglot-events-buffer-size 0))
#+end_src
** COMMENT Lsp-mode
#+begin_src emacs-lisp
(setup (:straight lsp-mode)
  (:disabled)
  (setq lsp-headerline-breadcrumb-mode nil
	lsp-signature-auto-activate nil
	lsp-signature-render-documentation nil
	lsp-log-io nil
	lsp-idle-delay 0.500)

  (dw/leader-key-def
    "l" '(:ignore t :which-key "lsp")
    "ld" 'xref-find-definitions
    "lr" 'xref-find-references
    "ln" 'lsp-ui-find-next-reference
    "lp" 'lsp-ui-find-prev-reference
    "ls" 'counsel-imenu
    "le" 'lsp-ui-flycheck-list
    "lS" 'lsp-ui-sideline-mode
    "lX" 'lsp-execute-code-action)

  (:hook lsp-enable-which-key-integration)
  (add-to-list 'lsp-language-id-configuration '(scss-mode . "css"))
  (add-to-list 'lsp-language-id-configuration '(less-css-mode . "css")))

(setup (:require lsp-ui)
  (:hook-into lsp-mode)
  (:also-load lsp-treemacs)
  (:when-loaded
    (setq lsp-ui-sideline-enable t
	  lsp-ui-sideline-show-hover nil
	  lsp-ui-doc-position 'bottom
	  lsp-ui-imenu-auto-refresh t)
    (lsp-ui-doc-show)))

;; dap debug tools
(setup (:straight dap-mode)
  (:load-after lsp-mode)
  (:also-load dap-python dap-node dap-java)
  (:option dap-auto-configure-features '(sessions locals controls tooltip)))
#+end_src
** Lsp-bridge
#+begin_src emacs-lisp
(unless (and (daemonp) (not (display-graphic-p)))
  (straight-use-package
   '(tabnine-capf :host github :repo "50ways2sayhard/tabnine-capf" :files ("*.el" "*.sh")))

  ;; (straight-use-package
  ;;  '(lsp-bridge :type git :host github :repo "manateelazycat/lsp-bridge" :files ("*")))

  (add-to-list 'load-path "~/.dotfiles/Emacs/site-lisp/lsp-bridge/")
  
  (require 'yasnippet)
  (require 'lsp-bridge)
  (require 'lsp-bridge-jdtls)       ;; provide Java third-party library jump and -data directory support, optional
  
  (global-lsp-bridge-mode)

  ;; 融合 `lsp-bridge' `find-function' 以及 `dumb-jump' 的智能跳转
  (defun lsp-bridge-jump ()
    (interactive)
    (cond
     ((eq major-mode 'emacs-lisp-mode)
      (let ((symb (function-called-at-point)))
	(when symb
          (find-function symb))))
     (lsp-bridge-mode
      (lsp-bridge-find-def))
     (t
      (require 'dumb-jump)
      (dumb-jump-go))))

  (defun lsp-bridge-jump-back ()
    (interactive)
    (cond
     (lsp-bridge-mode
      (lsp-bridge-return-from-def))
     (t
      (require 'dumb-jump)
      (dumb-jump-back)))))

#+end_src
** Flycheck
#+begin_src emacs-lisp
  (setup (:straight flycheck)
    (:hook-into lsp-bridge-mode))
#+end_src
* Direnv
#+begin_src emacs-lisp
;; (setup (:straight direnv)
;;        (:when-loaded
;; 	(direnv-mode)))

(setup (:straight envrc)
  (require 'envrc)
  (envrc-global-mode))

(with-eval-after-load 'envrc
  (define-key envrc-mode-map (kbd "C-c e") 'envrc-command-map))
#+end_src
* Term/Shells
** Vterm
#+begin_src emacs-lisp
;; Copy from https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-shell.el
;; Better term
;; @see https://github.com/akermu/emacs-libvterm#installation
(setup (:straight vterm)
       (with-no-warnings
	 (when (posframe-workable-p)
	   (defvar vterm-posframe--frame nil)
	   (defun vterm-posframe-toggle ()
	     "Toggle `vterm' child frame."
	     (interactive)
	     (let ((buffer (vterm--internal #'ignore 100))
		   (width  (max 80 (/ (frame-width) 2)))
		   (height (/ (frame-height) 2)))
	       (if (frame-live-p vterm-posframe--frame)
		   (progn
		     (posframe-delete-frame buffer)
		     (setq vterm-posframe--frame nil))
		 (setq vterm-posframe--frame
		       (posframe-show
			buffer
			:poshandler #'posframe-poshandler-frame-center
			:left-fringe 8
			:right-fringe 8
			:width width
			:height height
			:min-width width
			:min-height height
			:internal-border-width 3
			:internal-border-color (face-foreground 'font-lock-comment-face nil t)
			:background-color (face-background 'tooltip nil t)
			:accept-focus t)))))
	   (:global "C-`" vterm-posframe-toggle)))

       (:option vterm-max-scrollback 10000))


(setup (:straight multi-vterm))

(dw/leader-key-def
  "t" '(:ignore t :which-key "term")
 "tt" '(vterm :which-key "vterm")
 "tm" '(multi-vterm :which-key "multi-vterm"))
#+end_src
** eshell
#+begin_src emacs-lisp
(setup (:straight eshell)

       (setq eshell-directory-name "~/.dotfiles/Emacs/eshell/")
	     ;; eshell-aliases-file (expand-file-name "~/.dotfiles/Emacs/eshell/alias"))

       (if (executable-find "exa")
	   (defalias 'eshell/ls 'exa))

       (:global "C-c m" eshell))

(setup (:straight eshell-prompt-extras)
  (with-eval-after-load "esh-opt"
    (autoload 'epe-theme-lambda "eshell-prompt-extras")
    (setq eshell-highlight-prompt nil
	  eshell-prompt-function 'epe-theme-lambda)))

(setup (:straight eshell-up)
       (:load-after eshell)
       (:option eshell-up-ignore-case nil))

(setup (:straight eshell-syntax-highlighting)
       (:load-after esh-mode)
       (eshell-syntax-highlighting-global-mode +1))

;; bit slowly but mainly to avoid requiring company so far
;; (setup (:straight esh-autosuggest)
;;        (:hook-into eshell-mode)
;;        (:option esh-autosuggest-delay 0.5))

(setup (:straight esh-help)
       (setup-esh-help-eldoc))

(setup (:straight eshell-vterm)
       (:load-after eshell)
       (eshell-vterm-mode)
       (defalias 'eshell/v 'eshell-exec-visual))

(setup (:straight eshell-toggle)
       (:global "C-M-s" eshell-toggle)
       (:option eshell-toggle-size-fraction 3
		eshell-toggle-use-projectile-root t
		eshell-toggle-run-command nil))
#+end_src
* Tmux
** Emamux
#+begin_src emacs-lisp
(if IS-TTY
    (setup (:straight emamux)))
#+end_src
* Git
** Magit
#+begin_src emacs-lisp
(setup (:straight magit)
  (:delay)
  (:also-load magit-delta)
  (:global "C-M-;" magit-status)
  (:option magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Magit-Delta
Highlight diff by using delta
#+begin_src emacs-lisp
  (setup (:straight magit-delta)
	 (:hook-into magit-mode))
#+end_src

* Pass
** pass-store.el
#+begin_src emacs-lisp
  (setup (:straight password-store)
	 (:option password-store-password-length 12))
#+end_src
* COMMENT EAF
#+begin_src emacs-lisp
(if IS-GUI
    (unless (daemonp)
      (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/")
      ;; (setup (:straight '(eaf :host github
      ;;                         :repo "emacs-eaf/emacs-application-framework"
      ;;                         :files ("*")
      ;;                         :build (:not compile)))
      (setup (:require eaf)
	(:delay)
	(:also-load eaf-browser eaf-terminal eaf-git)
	(:option eaf-browser-continue-where-left-off t
		 eaf-browser-enable-adblocker t
		 browse-url-browser-function 'eaf-open-browser)

	(defalias 'browse-web #'eaf-open-browser)
	(require 'eaf-evil)
	;; eaf会把C-SPC当成evil的leader-key，在你加载'eaf-evil之后使用eaf时就需要在eaf中键入C-SPC使用evil leader下的键。
	;; 我们只需要将这个键设置为 SPC或你自己的evil-leader-key即可
	(setq eaf-evil-leader-key "SPC"))))
#+end_src
* Tramp
#+begin_src emacs-lisp
  (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
  (setq tramp-default-method "ssh"
	tramp-default-user "wangpe90"
	tramp-default-host "dh2020pc20.utm.utoronto.ca")

  (setq tramp-shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>].* *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
  (setq tramp-verbose 6)
#+end_src

