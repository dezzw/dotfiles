
#+TITLE: DEmacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Early Init
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
;; -*- coding: utf-8; lexical-binding: t; -*-

(setq read-process-output-max (* 1024 1024))
;; Adjust garbage collection thresholds during startup, and thereafter
(let ((normal-gc-cons-threshold (* 20 1024 1024))
      (init-gc-cons-threshold (* 128 1024 1024)))
  (setq gc-cons-threshold init-gc-cons-threshold)
  (add-hook 'emacs-startup-hook
	    (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))

(require 'cl-lib)

(defconst IS-MAC (eq system-type 'darwin))

(setq package-enable-at-startup nil)

;; Windows And Frames Setting
;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

(setq make-backup-files       nil
      auto-save-default       nil
      inhibit-startup-message t
      inhibit-splash-screen   t
      ring-bell-function      'ignore)

(dolist (mode
	 '(tool-bar-mode
	   tooltip-mode
	   scroll-bar-mode
	   blink-cursor-mode))
  (funcall mode 0))

(setq default-frame-alist '((fullscreen . maximized)
			    ;; (alpha . 90)
			    (undecorated . t)
			    (menu-bar-lines . 0)
			    (tool-bar-lines . 0)
			    (horizontal-scroll-bars . nil)
			    (vertical-scroll-bars . nil)))

(unless (version< emacs-version "29")
  (pixel-scroll-precision-mode 1))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(let ((default-directory "~/.dotfiles/Emacs/site-lisp")
      (gc-cons-threshold most-positive-fixnum))
  (normal-top-level-add-subdirs-to-load-path))

;; Set `doom-themes' early to prevent non-stylized UI flash.
(use-package doom-themes
  :straight (doom-themes :type git :host github :repo "doomemacs/themes"
		     :fork (:host github :repo "dezzw/emacs-doom-themes"))
  :init
  (load-theme 'doom-one t)
  (doom-themes-org-config))

;; Set `doom-modeline' early to prevent non-stylized UI flash.
;; Note: `doom-modeline' requires M-x all-the-icons-install-fonts.
(use-package doom-modeline
  :straight t
  :hook
  ((after-init . doom-modeline-mode)
   (doom-modeline-mode . size-indication-mode)
   (doom-modeline-mode . column-number-mode))
  :config
  (unless after-init-time
    ;; prevent flash of unstyled modeline at startup
    (setq-default mode-line-format nil))
  ;; Set these early so they don't trigger variable watchers
  (setq doom-modeline-bar-width 3
	doom-modeline-github nil
	doom-modeline-mu4e nil
	doom-modeline-persp-name nil
	doom-modeline-lsp nil
	doom-modeline-minor-modes nil
	doom-modeline-major-mode-icon nil
	doom-modeline-buffer-file-name-style 'relative-from-project
	;; Only show file encoding if it's non-UTF-8 and different line endings
	;; than the current OSes preference
	doom-modeline-buffer-encoding 'nondefault
	doom-modeline-default-eol-type
	(cond (IS-MAC 2)
	      (0))))

(if IS-MAC
    (progn
      (setq frame-resize-pixelwise  t)
      (menu-bar-mode t)))

(fset 'yes-or-no-p 'y-or-n-p)

#+end_src
* Startup Setting 
#+begin_src emacs-lisp
;; Copy from https://github.com/willbush/system/blob/master/emacs/early-init.el

(defconst IS-GUI (or (display-graphic-p) (and (daemonp) (not (string= (daemonp) "tty")))))
(defconst IS-TTY (or (not (display-graphic-p)) (and (daemonp) (string= (daemonp) "tty"))))


(setq use-package-verbose t)

;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

;; Set the right directory to store the native comp cache
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

(use-package gcmh
  :straight t
  :hook (after-init . gcmh-mode)
  :custom
  ;; doom is using 0.5, default is 15s
  (gcmh-idle-delay 0.5)
  ;; 16 MB
  (gcmh-high-cons-threshold (* 16 1024 1024)))

(use-package exec-path-from-shell
  :straight t
  :custom
  (exec-path-from-shell-arguments '("-l"))
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

(use-package super-save
  :straight t
  :custom
  (super-save-auto-save-when-idle t)
  (super-save-remore-files nil)
  (super-save-exclude '(".gpg"))
  :config
  ;; add integration with ace-window
  (add-to-list 'super-save-triggers 'ace-window)
  ;; save when back to meow normal state
  (add-to-list 'super-save-triggers 'meow-insert-exit)
  ;; save on find-file
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  (super-save-mode +1))

(use-package recentf
  :custom
  (recentf-max-saved-items 1000)
  (recentf-exclude `("/tmp/" "/ssh:" ,(concat user-emacs-directory "lib/.*-autoloads\\.el\\'")))
  :config
  ;; (add-to-list 'recentf-exclude no-littering-var-directory)
  ;; (add-to-list 'recentf-exclude no-littering-etc-directory)
  (recentf-mode))

(global-auto-revert-mode 1)
(delete-selection-mode t)

(use-package treesit
  :when (and (fboundp 'treesit-available-p)
	     (treesit-available-p))
  :custom (major-mode-remap-alist
	   '((c-mode          . c-ts-mode)
	     (c++-mode        . c++-ts-mode)
	     (cmake-mode      . cmake-ts-mode)
	     (conf-toml-mode  . toml-ts-mode)
	     (css-mode        . css-ts-mode)
	     (js-mode         . js-ts-mode)
	     (js-json-mode    . json-ts-mode)
	     (python-mode     . python-ts-mode)
	     (sh-mode         . bash-ts-mode)
	     (typescript-mode . typescript-ts-mode))))

(straight-use-package 'posframe)
#+end_src
* Keyboard Bindings
** Editing Tools
*** Undo
#+begin_src emacs-lisp
(use-package undo-fu
  :straight t
  :defer 0.5
  :bind
  ("s-z" . undo-fu-only-undo)
  ("s-S-z" . undo-fu-only-redo))

(use-package undo-fu-session
  :straight t
  :after undo-fu
  :config
  (global-undo-fu-session-mode))

(use-package vundo
  :straight t
  :commands (vundo))
#+end_src
*** Hungry Delete
#+begin_src emacs-lisp
(use-package hungry-delete
  :straight t
  :hook (prog-mode . hungry-delete-mode))
#+end_src
*** Avy
#+begin_src emacs-lisp
(use-package avy
  :straight t
  :bind ("C-;" . avy-goto-char-timer)
  :custom
  (avy-all-windows nil)
  (avy-all-windows-alt t)
  (avy-timeout-seconds 0.3))
#+end_src
*** Evil-nerd-commenter
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :straight t
  :commands (evilnc-comment-or-uncomment-lines)
  :bind
  ("M-;" . 'evilnc-comment-or-uncomment-lines))
#+end_src
*** Spelling Checking
#+begin_src emacs-lisp
(setq flyspell-issue-message-flag nil)
(setq ispell-program-name "hunspell")
;; reset the hunspell so it STOPS querying locale!
;; "en_US" is the key to lookup in `ispell-local-dictionary-alist`
(setq ispell-local-dictionary "en_US")
;; two dictionaries "en_US" and "zh_CN" are used. Feel free to remove "zh_CN"
;; If `ispell-local-dictionary-alist' is nil, `ispell-local-dictionary' is passed
;; to hunpsell cli program as dictionary.
(setq ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US" "zh_CN") nil utf-8)))
;; new variable `ispell-hunspell-dictionary-alist' is defined in Emacs
;; If it's nil, Emacs tries to automatically set up the dictionaries.
(when (boundp 'ispell-hunspell-dictionary-alist)
  (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist))

(use-package wucuo
  :straight t
  :commands (wucuo-start))
#+end_src
** ESC Cancels All
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Meow 
#+begin_src emacs-lisp
(use-package meow
  :straight t
  :config
  (defun meow-setup ()
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     '("0" . delete-window)
     '("1" . delete-other-windows)
     '("2" . split-window-below)
     '("3" . split-window-right)
     '("a" . org-agenda)
     '("b" . switch-to-buffer)
     '("f" . find-file)
     '("h" . embrace-commander)
     '("?" . describe-keymap)
     '(";" . evilnc-comment-or-uncomment-lines)
     '("/" . embrace-commander)
     '("," . beginning-of-buffer)
     '("." . end-of-buffer))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . avy-goto-char-timer)
     '("T" . avy-resume)
     '("u" . undo-fu-only-undo)
     '("U" . undo-fu-only-redo)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))

  :config
  (setq meow-use-clipboard t)
  (meow-setup)
  (meow-setup-indicator)
  (meow-global-mode 1)

  ;; Use jk to escape from insert state to normal state
  (defvar meow-two-char-escape-sequence "jk")
  (defvar meow-two-char-escape-delay 0.5)
  (defun meow--two-char-exit-insert-state (s)
    "Exit meow insert state when pressing consecutive two keys.

S is string of the two-key sequence."
    (when (meow-insert-mode-p)
      (let ((modified (buffer-modified-p))
	    (undo-list buffer-undo-list))
	(insert (elt s 0))
	(let* ((second-char (elt s 1))
	       (event
		(if defining-kbd-macro
		    (read-event nil nil)
		  (read-event nil nil meow-two-char-escape-delay))))
	  (when event
	    (if (and (characterp event) (= event second-char))
		(progn
		  (backward-delete-char 1)
		  (set-buffer-modified-p modified)
		  (setq buffer-undo-list undo-list)
		  (meow-insert-exit))
	      (push event unread-command-events)))))))
  (defun meow-two-char-exit-insert-state ()
    "Exit meow insert state when pressing consecutive two keys."
    (interactive)
    (meow--two-char-exit-insert-state meow-two-char-escape-sequence))
  (define-key meow-insert-state-keymap (substring meow-two-char-escape-sequence 0 1)
	      #'meow-two-char-exit-insert-state))
#+end_src
* Workspace
#+begin_src emacs-lisp
;; (setup (:straight perspective)
;;        (:option persp-initial-frame-name "Main"
;; 		persp-state-default-file (concat user-emacs-directory ".emacs.desktop"))
;;        (setq persp-mode-prefix-key (kbd "C-x p"))

;;        (add-hook 'kill-emacs-hook #'persp-state-save)
;;        ;; Running `persp-mode' multiple times resets the perspective list...
;;        (unless (equal persp-mode t)
;; 	 (persp-mode)))

;; Windows/buffers sets shared among frames + save/load.
;; (use-package persp-mode
;;   :straight t
;;   :custom
;;   (persp-keymap-prefix (kbd "C-x p"))
;;   (persp-nil-name "Main")
;;   (persp-set-last-persp-for-new-frames nil)
;;   (persp-auto-resume-time -1.0)
;;   (persp-kill-foreign-buffer-behaviour 'kill)
;;   (persp-autokill-buffer-on-remove 'kill-weak)
;;   :config
  
;;   (add-hook 'window-setup-hook #'(lambda () (persp-mode 1)))

;;   ;; Eshell integration
;;   (persp-def-buffer-save/load
;;    :mode 'eshell-mode :tag-symbol 'def-eshell-buffer
;;    :save-vars '(major-mode default-directory))
  
;;   ;; Shell integration
;;   (persp-def-buffer-save/load
;;    :mode 'shell-mode :tag-symbol 'def-shell-buffer
;;    :mode-restore-function (lambda (_) (shell))
;;    :save-vars '(major-mode default-directory)))

(use-package workgroups2
  :straight t
  :commands
  (wg-create-workgroup wg-open-workgroup)
  :custom
  (wg-prefix-key (kbd "C-c z"))
  (wg-session-file "~/.emacs.d/.emacs_workgroups")
  :config
  (setq workgroups-mode 1))
#+end_src

* UI Setting
** Fonts
#+begin_src emacs-lisp
;; Set default font
(defun dw/set-fonts()
  (interactive)
  (set-face-attribute 'default nil
		      :font "Maple Mono NF"
		      ;; :font "Operator Mono SSm Lig"
		      :weight 'regular
		      :height 140)

  ;; Set the fixed pitch face
  ;; (set-face-attribute 'fixed-pitch nil
  ;; 		    :font "Operator Mono SSm Lig"
  ;; 		    :weight 'light
  ;; 		    :height 140)

  ;; Set the variable pitch face
  ;; (set-face-attribute 'variable-pitch nil
  ;; 		    :font "Operator Mono SSm Lig"
  ;; 		    :height 140
  ;; 		    :weight 'light)
  )


(dw/set-fonts)
(when (daemonp)
  (dw/set-fonts))


(use-package ligature
  :straight (ligature :host github :repo "mickeynp/ligature.el")
  :defer 0.5
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
				       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
				       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
				       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
				       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
				       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
				       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
				       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
				       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
				       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
				       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
				       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
				       "\\\\" "://"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))

(use-package unicode-fonts
  :straight t
  :defer 0.5
  :config
  (unicode-fonts-setup))
#+end_src

** Line Numbers
#+begin_src emacs-lisp
;; Enable liner number
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
		term-mode-hook
		vterm-mode-hook
		shell-mode-hook
		eshell-mode-hook
		xwidget-webkit-mode-hook
		eaf-mode-hook
		doc-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Highlight TODOs
#+begin_src emacs-lisp
(use-package hl-todo
  :straight t
  :defer 0.5
  :config
  (setq hl-todo-keyword-faces
	'(("TODO"   . "#FF0000")
          ("FIXME"  . "#FF0000")
          ("DEBUG"  . "#A020F0")
          ("NEXT" . "#FF4500")
	  ("TBA" . "#61d290")
          ("UNCHECK"   . "#1E90FF")))
  (global-hl-todo-mode))
#+end_src

** COMMENT Highligh numbers
#+begin_src emacs-lisp
(setup (:straight highlight-numbers)
       (dolist (hook dw/prog-mode-hook)
	 (add-hook hook 'highlight-numbers-mode)))
#+end_src

** Highlight the diff
#+begin_src emacs-lisp
(use-package diff-hl
  :straight t
  :hook ((magit-post-refresh . diff-hl-magit-post-refresh)
         (after-init . global-diff-hl-mode)
         (dired-mode . diff-hl-dired-mode)))

(use-package vdiff
  :straight t
  :commands (vdiff-buffer))
#+end_src

** UI Setting
#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (dw/set-fonts))))
  (if (display-graphic-p)
      (dw/set-fonts)))
#+end_src
* Window Management
** Ace Window
Use =C-x o= to active =ace-window= to swap the windows (less than two windows), or using following arguments (more than two):
- =x= - delete window
- =m= - swap windows
- =M= - move window
- =c= - copy window
- =j= - select buffer
- =n= - select the previous window
- =u= - select buffer in the other window
- =c= - split window fairly, either vertically or horizontally
- =v= - split window vertically
- =b= - split window horizontally
- =o= - maximize current window
- =?= - show these command bindings
  #+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :bind ("C-x o" . ace-window)
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
  #+end_src
** Window History with winner-mode
#+begin_src emacs-lisp
(use-package winner
  :defer 0.5
  :bind (("M-N" . winner-redo)
         ("M-P" . winner-undo))
  :config (winner-mode 1))
#+end_src
** Popper
#+begin_src emacs-lisp
(use-package popper
  :straight t
  :bind (("C-`"   . popper-toggle-latest)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
	'("\\*Messages\\*"
	  "Output\\*$"
	  "\\*Async Shell Command\\*"
	  help-mode
	  compilation-mode
	  ;; "^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
	  "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
	  "^\\*term.*\\*$"   term-mode   ;term as a popup
	  "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
	  ))
  (popper-mode +1)
  (popper-echo-mode +1))                ; For echo area hints
#+end_src
* File Management
** Dired
#+begin_src emacs-lisp
(use-package dired
  :custom
  (dired-dwim-target t)
  (dired-listing-switches "-alGh")
  (dired-recursive-copies 'always)
  (dired-mouse-drag-files t)                   ; added in Emacs 29
  (mouse-drag-and-drop-region-cross-program t) ; added in Emacs 29
  (dired-kill-when-opening-new-dired-buffer t)
  (delete-by-moving-to-trash t))

(use-package dired-hide-dotfiles
  :straight t
  :hook dired-mode
  :bind (:map dired-mode-map
	      ("." . dired-hide-dotfiles-mode)))
#+end_src
** Dirvish
#+begin_src emacs-lisp
(use-package dirvish
  :straight t
  :commands (dirvish)
  :init
  (dirvish-override-dired-mode))
#+end_src
* Org Mode
** Config Basic Org mode
#+begin_src emacs-lisp
(defun dw/org-mode-setup ()
  (org-indent-mode)
  ;; (variable-pitch-mode 1)
  ;; (auto-fill-mode 0)
  ;; (setq evil-auto-indent nil)
  (visual-line-mode 1))

(use-package org
  :config
  :defer t
  :hook (org-mode . dw/org-mode-setup)
  :config
  (setq org-html-head-include-default-style nil
	;; org-ellipsis " ▾"
	org-adapt-indentation t
	org-hide-emphasis-markers t
	org-src-fontify-natively t
	org-src-tab-acts-natively t
	org-edit-src-content-indentation 0
	org-hide-block-startup nil
	org-src-preserve-indentation nil
	org-startup-folded 'content
	org-cycle-separator-lines 2)

  (setq org-html-htmlize-output-type nil)

  ;; config for images in org
  (auto-image-file-mode t)
  (setq org-image-actual-width nil)
  ;; default image width
  (setq org-image-actual-width '(300))

  (setq org-export-with-sub-superscripts nil)

  ;; Since we don't want to disable org-confirm-babel-evaluate all
  ;; of the time, do it around the after-save-hook
  (defun dw/org-babel-tangle-dont-ask ()
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))
  
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask
						'run-at-end 'only-in-org-mode))))
#+end_src
** Apperance of Org   
*** Fonts and Bullets
#+begin_src emacs-lisp
;; change bullets for headings
(use-package org-superstar
  :straight t
  :hook org-mode
  :custom
  (org-superstar-remove-leading-stars t
				      org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

;; (setup org-faces
;;   ;; Make sure org-indent face is available
;;   (:also-load org-indent)
;;   (:when-loaded
;;     ;; Increase the size of various headings
;;     (set-face-attribute 'org-document-title nil :font "SF Pro" :weight 'bold :height 1.3)

;;     (dolist (face '((org-level-1 . 1.15)
;;                     (org-level-2 . 1.1)
;;                     (org-level-3 . 1.05)
;;                     (org-level-4 . 1.0)
;;                     (org-level-5 . 1.0)
;;                     (org-level-6 . 1.0)
;;                     (org-level-7 . 1.0)
;;                     (org-level-8 . 1.0)))
;;       (set-face-attribute (car face) nil :font "SF Pro" :weight 'medium :height (cdr face)))

;;     ;; Ensure that anything that should be fixed-pitch in Org files appears that way
;;     (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
;;     (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
;;     (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
;;     (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
;;     (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
;;     (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
;;     (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
;;     (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
;;     (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

;;     ;; Get rid of the background on column views
;;     (set-face-attribute 'org-column nil :background nil)
;;     (set-face-attribute 'org-column-title nil :background nil)))
#+end_src
*** Set Margins for Modes
#+begin_src emacs-lisp
(defun dw/org-mode-visual-fill ()
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :straight t
  :defer t
  :hook (org-mode . dw/org-mode-visual-fill))
#+end_src
*** Properly Align Tables
#+begin_src emacs-lisp
(use-package valign
  :straight t
  :hook org-mode)
#+end_src
*** Auto-show Markup Symbols
#+begin_src emacs-lisp
(use-package org-appear
  :straight t
  :hook org-mode)
#+end_src
** Org Export
#+begin_src emacs-lisp
(with-eval-after-load "org-export-dispatch"
  ;; Edited from http://emacs.stackexchange.com/a/9838
  (defun dw/org-html-wrap-blocks-in-code (src backend info)
    "Wrap a source block in <pre><code class=\"lang\">.</code></pre>"
    (when (org-export-derived-backend-p backend 'html)
      (replace-regexp-in-string
       "\\(</pre>\\)" "</code>\n\\1"
       (replace-regexp-in-string "<pre class=\"src src-\\([^\"]*?\\)\">"
				 "<pre>\n<code class=\"\\1\">" src))))

  (require 'ox-html)

  (add-to-list 'org-export-filter-src-block-functions
	       'dw/org-html-wrap-blocks-in-code)
  )
#+end_src
** Org Babel
*** Load Org Babel
#+begin_src emacs-lisp
(with-eval-after-load "ob"
  (straight-use-package '(ob-racket
			  :type git :host github :repo "hasu/emacs-ob-racket"
			  :files ("*.el" "*.rkt")))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     (shell . t)
     (python . t)
     (racket . t)
     ))

  (setq org-confirm-babel-evaluate nil))
#+end_src
*** Src Block Templates
#+begin_src emacs-lisp
;; This is needed as of Org 9.2
(use-package org-temp
  :after org-mode
  :config
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("cc" . "src C"))
  (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python :results output :exports both"))
  (add-to-list 'org-structure-template-alist '("r" . "src R"))
  (add-to-list 'org-structure-template-alist '("rkt" . "src racket"))
  (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("sql" . "src sql-mode")))
#+end_src
** Org Agenda
#+begin_src emacs-lisp
(with-eval-after-load "org-agenda"

  (if IS-MAC
      (setq org-agenda-files '("~/Documents/Org/Planner")))


  ;; Custom TODO states and Agendas
  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "TBA(b)" "|" "DONE(d!)")))

  (setq org-tag-alist
	'((:startgroup)
	  ;; Put mutually exclusive tags here
	  (:endgroup)
	  ("review" . ?r)
	  ("assignment" . ?a)
	  ("lab" . ?l)
	  ("test" . ?t)
	  ("quiz" . ?q)
	  ("pratice" . ?p)
	  ("emacs" . ?e)
	  ("note" . ?n)
	  ("idea" . ?i)))


  (use-package org-super-agenda
    :straight t
    :hook org-agenda-mode
    :config
    (setq org-agenda-skip-scheduled-if-done t
	  org-agenda-skip-deadline-if-done t
	  org-agenda-include-deadlines t
	  org-agenda-include-diary t
	  org-agenda-block-separator nil
	  org-agenda-compact-blocks t
	  org-log-done 'time
	  org-log-into-drawer t
	  org-agenda-start-with-log-mode t)

    (setq org-agenda-custom-commands
	  '(("d" "Dashboard"
	     ((agenda "" ((org-agenda-span 'day)

			  (org-super-agenda-groups
			   '((:name "Today"
				    :time-grid t
				    :date today
				    :scheduled today
				    :order 1)
			     (:name "Due Soon"
				    :deadline future
				    :order 2)
			     (:discard (:anything t))))))
	      (alltodo "" ((org-agenda-overriding-header "")
			   (org-super-agenda-groups
			    '((:name "Overdue"
				     :deadline past
				     :order 1)
			      (:name "Assignments"
				     :tag "assignment"
				     :order 2)
			      (:name "Labs"
				     :tag "lab"
				     :order 3)
			      (:name "Quizs"
				     :tag "quiz"
				     :order 4)
			      (:name "Tests/Exam"
				     :tag "test"
				     :order  5)
			      (:name "Projects"
				     :tag "Project"
				     :order 14)
			      (:name "Emacs"
				     :tag "Emacs"
				     :order 13)
			      (:discard (:anything t)))))))))))

  ;; Refiling
  (setq org-refile-targets
	'(("~/Documents/Org/Planner/Archive.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; Capture Templates
  (defun dw/read-file-as-string (path)
    (with-temp-buffer
      (insert-file-contents path)
      (buffer-string)))

  (setq org-capture-templates
	`(("t" "Tasks / Projects")
	  ("tt" "Task" entry (file+olp "~/Documents/Org/Planner/Tasks.org" "Inbox")
	   "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1))))
#+end_src
** Org Roam
#+begin_src emacs-lisp
(use-package org-roam
  :straight t
  :bind
  (("C-c o l" . org-roam-buffer-toggle)
   ("C-c o f" . org-roam-node-find)
   ("C-c o g" . org-roam-graph)
   ("C-c o i" . org-roam-node-insert)
   ("C-c o c" . org-roam-capture))
  :config
  (setq org-roam-directory "~/Documents/Org/Notes"
	org-roam-database-connecter 'splite-builtin
	org-roam-completion-everywhere t
	org-roam-completion-system 'default)
  (org-roam-db-autosync-mode))

(use-package org-roam-ui
  :straight t
  :commands (org-roam-ui-open)
  :config
  (setq org-roam-ui-sync-theme t
	org-roam-ui-follow t
	org-roam-ui-update-on-save t
	org-roam-ui-open-on-start t))
#+end_src
* Completion System
** Vertico Marginalia Consult Orderless Embark
#+Begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :straight t
  :demand t
  :custom
  (vertico-cycle t)
  (enable-recursive-minibuffers t)
  :config (vertico-mode))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :straight t
  :init
  (savehist-mode)
  :config
  (setq history-length 25))

(use-package orderless
  :straight t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Example configuration for Consult
(use-package consult
  :straight t
  :defer 0.5
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c r" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  )

(use-package consult-dir
  :straight t
  :bind (("C-x C-d" . consult-dir)
         :map minibuffer-local-completion-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))

(use-package marginalia
  :straight t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :config
  (marginalia-mode))


(use-package embark
  :straight t
  :bind
  ("C-." . embark-act)
  ("M-." . embark-dwim)
  ("C-h b" . embark-bindings)
  ("C-h B" . embark-bindings-at-point)
  ("M-n" . embark-next-symbol)
  ("M-p" . embark-previous-symbol)
  ("C-h E" . embark-on-last-message)
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  (setq embark-prompter 'embark-completing-read-prompter)
  :custom
  (embark-quit-after-action nil)
  (embark-indicators '(embark-minimal-indicator
                       embark-highlight-indicator
                       embark-isearch-highlight-indicator))
  ;; (embark-help-key "?")
  :config
  (setq embark-candidate-collectors
        (cl-substitute 'embark-sorted-minibuffer-candidates
                       'embark-minibuffer-candidates
                       embark-candidate-collectors))
  (defun embark-on-last-message (arg)
    "Act on the last message displayed in the echo area."
    (interactive "P")
    (with-current-buffer "*Messages*"
      (goto-char (1- (point-max)))
      (embark-act arg))))


;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :straight t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** Corfu
#+begin_src emacs-lisp
;; completely use lsp-bridge for now
(use-package corfu
  :straight t
  :bind
  (:map corfu-map
	("S-<return>" . corfu-insert)
	("RET"     . nil) ;; leave my enter alone!
	("<escape>" . corfu-quit))
  :custom
  (corfu-cycle t)                 ; Allows cycling through candidates
  (corfu-auto t)                  ; Enable auto completion
  (corfu-auto-prefix 2)
  (corfu-auto-delay 0.1)
  (corfu-preselect 'prompt)
  (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets
  :init
  
  (add-to-list 'load-path (expand-file-name "straight/build/corfu/extensions" user-emacs-directory))
  (require 'corfu-history)
  (add-hook 'corfu-mode-hook 'corfu-history-mode)

  (require 'corfu-popupinfo)
  (setq corfu-popupinfo-delay t)
  (add-hook 'corfu-mode-hook 'corfu-popupinfo-mode))


(use-package cape
  :straight t
  :after corfu
  :custom
  (cape-dabbrev-min-length 3)
  :config
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev))

(use-package kind-icon
  :straight t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(use-package tempel
  :straight t
  :defer 10
  :custom
  (tempel-path "~/.dotfiles/Emacs/templates")
  :hook ((prog-mode text-mode) . tempel-setup-capf)
  :bind (("M-+" . tempel-insert) ;; Alternative tempel-expand
         :map tempel-map
         ([remap keyboard-escape-quit] . tempel-done)
         ("TAB" . tempel-next)
         ("<backtab>" . tempel-previous)
         :map corfu-map
         ("C-M-i" . tempel-expand))
  ;; :map tempel-map
  ;; ("M-]" . tempel-next)
  ;; ("M-[" . tempel-previous))
  :init
  (defun tempel-setup-capf ()
    (setq-local completion-at-point-functions
                (cons #'tempel-complete
                      completion-at-point-functions))))

;; (add-hook 'prog-mode-hook 'tempel-setup-capf)
;; (add-hook 'text-mode-hook 'tempel-setup-capf))
#+end_src
** Citre
#+begin_src emacs-lisp
(use-package citre
  :straight t
  :bind
  (("C-x c j" . citre-jump)
   ("C-x c J" . citre-jump-back)
   ("C-x c p" . citre-ace-peek)
   ("C-x c u" . citre-update-this-tags-file))
  :config
  (require 'citre-config)

  (defun dw/get-project-root ()
    (when (fboundp 'projectile-project-root)
      (projectile-project-root)))

  (:option citre-readtags-program "/etc/profiles/per-user/dez/bin/readtags"
	   citre-ctags-program "/etc/profiles/per-user/dez/bin/ctags"
	   citre-project-root-function #'dw/get-project-root
	   ;; Set this if you want to always use one location to create a tags file.
	   citre-default-create-tags-file-location 'global-cache

	   citre-use-project-root-when-creating-tags t
	   citre-prompt-language-for-ctags-command t
	   citre-auto-enable-citre-mode-modes '(prog-mode)))
#+end_src

* Helpful Function Description
#+begin_src emacs-lisp
(use-package helpful
  :straight t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))
#+end_src
 
* Developing
** Developing Tools
*** Brackets 
#+begin_src emacs-lisp

(use-package elec-pair
  :config (electric-pair-mode))

(use-package electric
  :config (electric-indent-mode))

(use-package rainbow-delimiters
  :straight t
  :hook prog-mode)
#+end_src
*** Indent
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :straight t
  :defer 0.5
  :hook prog-mode
  :custom
  (highlight-indent-guides-auto-enabled nil)
  (highlight-indent-guides-delay 0)
  (highlight-indent-guides-method 'character)
  :config
  (set-face-background 'highlight-indent-guides-odd-face "darkgray")
  (set-face-background 'highlight-indent-guides-even-face "dimgray")
  (set-face-foreground 'highlight-indent-guides-character-face "dimgray"))

;; (use-package aggressive-indent
;;   :straight t
;;   :hook (emacs-lisp-mode lisp-mode python-mode))
#+end_src
*** Rainbow Mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :straight t
  :hook (web-mode js2-mode emacs-lisp-mode))
#+end_src
*** Format All
#+begin_src emacs-lisp
(use-package format-all
  :straight t
  :hook prog-mode)
#+end_src
*** Text Folding
#+begin_src emacs-lisp
;; (setup (:straight origami)
;;   (:load-after prog-mode)
;;   (:hook-into prog-mode))
(with-eval-after-load 'prog-mode
  (add-hook #'prog-mode-hook 'hs-minor-mode))
#+end_src

*** Front-end For Interacting With External Debuggers
#+begin_src emacs-lisp
(straight-use-package 'realgud)
#+end_src

** Languages
*** Python
#+begin_src emacs-lisp
(use-package jupyter
  :straight t
  :commands (jupyter-run-repl jupyter-connect-repl))

(use-package ein
  :straight t
  :commands (ein:run ein:login))
#+end_src
*** Web (HTML/CSS/JS...)
**** JS/TS
#+begin_src emacs-lisp
(defun dw/set-js-indentation ()
  (setq-default js-indent-level 2)
  (setq-default tab-width 2))

(use-package js2-mode
  :straight t
  :mode "\\.jsx?\\'"
  :hook
  (js2-mode . dw/set-js-indentation)
  :config
  ;; Use js2-mode for Node scripts
  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

  ;; Don't use built-in syntax checking
  (setq js2-mode-show-strict-warnings nil))


(use-package rjsx-mode
  :straight t
  :mode "\\.jsx\\'")

(use-package add-node-modules-path
  :straight t
  :hook
  ((js2-mode . add-node-modules-path)
   (typescript-mode . add-node-modules-path)
   (rjsx-mode . add-node-modules-path)))
#+end_src
**** CoffeeScript
#+begin_src emacs-lisp
(use-package coffee-mode
  :straight t
  :mode "\\.coffee\\'"
  :config
  (straight-use-package 'sourcemap)
  ;; automatically clean up bad whitespace
  (setq whitespace-action '(auto-cleanup))
  ;; This gives you a tab of 2 spaces
  (custom-set-variables '(coffee-tab-width 2))

  ;; generating sourcemap by '-m' option. And you must set '--no-header' option
  (setq coffee-args-compile '("-c" "--no-header" "-m"))
  (add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)

  ;; If you want to remove sourcemap file after jumping corresponding point
  (defun my/coffee-after-compile-hook (props)
    (sourcemap-goto-corresponding-point props)
    (delete-file (plist-get props :sourcemap)))
  (add-hook 'coffee-after-compile-hook 'my/coffee-after-compile-hook))

(use-package flymake-coffee
  :straight t
  :hook coffee-mode)
#+end_src
**** HTML
#+begin_src emacs-lisp
(use-package web-mode
  :straight t
  :mode "\\.html?\\'"
  :config
  (setq-default web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-attribute-indent-offset 2))

;; 1. Start the server with `httpd-start'
;; 2. Use `impatient-mode' on any buffer
(use-package impatient-mode
  :straight t
  :commands (impatient-mode))

(use-package skewer-mode
  :straight t
  :commands (skewer-mode))
#+end_src
**** COMMENT Emmet
#+begin_src emacs-lisp
(use-package emmet-mode
  :straight t
  :hook (web-mode css-mode))
#+end_src
**** SCSS/SASS
#+begin_src emacs-lisp
(use-package scss-mode
  :straight t
  :mode "\\.scss\\'"
  :custom
  (scss-compile-at-save t)
  (scss-output-directory "../css")
  (scss-sass-command "sass --no-source-map"))
#+end_src
*** C/C++
#+begin_src emacs-lisp
;; (setq c-default-style "gnu")
#+end_src
*** Java
#+begin_src emacs-lisp
;; (setup (:straight lsp-java))
#+end_src
*** Nix
#+begin_src emacs-lisp
(use-package nix-mode
  :straight t
  :mode "\\.nix\\'")

(use-package nixos-options
  :straight t
  :after nix-mode)

(use-package nix-sandbox
  :straight t
  :after nix-mode)

(use-package nix-update
  :straight t
  :after nix-mode)  
#+end_src
*** Common Lisp
#+begin_src emacs-lisp
;; (setup (:straight slime)
;;        (:file-match "\\.lisp\\'"))

(use-package sly
  :straight t
  :mode "\\.lisp\\'")
#+end_src
*** Racket
#+begin_src emacs-lisp
(use-package racket-mode
  :straight t
  :mode "\\.rkt\\'"
  :hook
  (racket-mode . racket-xp-mode))
#+end_src
*** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :straight t
  :mode "\\.hs\\'")
#+end_src
*** Latex
**** CDLaTex
#+begin_src emacs-lisp
(straight-use-package 'auctex)
(use-package cdlatex
  :straight t
  :hook
  ((LaTeX-mode . latex-mode)
   (org-mode . org-cdlatex-mode)))
#+end_src
**** Xenops
#+begin_src emacs-lisp
(use-package xenops
  :straight t
  :if IS-GUI
  :hook
  (latex-mode LaTeX-mode org-mode)
  :custom
  (xenops-math-image-scale-factor 2.0))

#+end_src
*** R
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist
	     (cons "\\.R\\'" 'R-mode))

(use-package ess
  :straight t
  :after R-mode)
#+end_src
*** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :mode "\\.md\\'"
  :custom
  (markdown-command "multimarkdown"))

(use-package edit-indirect
  :straight t
  :after markdown-mode)
#+end_src
*** SQL
#+begin_src emacs-lisp
(use-package ob-sql-mode
  :straight t
  :after sql-mode)
#+end_src
** Lsp-bridge
#+begin_src emacs-lisp
(use-package yasnippet
  :straight t
  :defer t
  :hook
  (prog-mode . yas-minor-mode)
  :custom
  (yas-snippet-dirs '("~/.dotfiles/Emacs/snippets"))
  :config
  (yas-reload-all))

(use-package lsp-bridge
  :after yasnippet
  :custom
  (lsp-bridge-enable-mode-line nil)
  (acm-enable-search-words nil)
  (acm-enable-icon t)
  (acm-enable-tempel t)
  (acm-enable-tabnine-helper t)
  (lsp-bridge-complete-manually nil)
  (lsp-bridge-c-lsp-server "clangd")
  :config
  (global-lsp-bridge-mode)
  
  ;; 融合 `lsp-bridge' `find-function' 以及 `dumb-jump' 的智能跳转
  (defun lsp-bridge-jump ()
    (interactive)
    (cond
     ((eq major-mode 'emacs-lisp-mode)
      (let ((symb (function-called-at-point)))
	(when symb
	  (find-function symb))))
     (lsp-bridge-mode
      (lsp-bridge-find-def))
     (t
      (require 'dumb-jump)
      (dumb-jump-go))))

  (defun lsp-bridge-jump-back ()
    (interactive)
    (cond
     (lsp-bridge-mode
      (lsp-bridge-return-from-def))
     (t
      (require 'dumb-jump)
      (dumb-jump-back)))))
#+end_src
** Deno Bridge
#+begin_src emacs-lisp
(use-package deno-bridge)
(use-package emmet2-mode
  :after deno-bridge
  :hook ((web-mode css-mode) . emmet2-mode)                     ;; Enable emmet2-mode for web-mode and css-mode and other major modes based on them, such as the build-in scss-mode
  :config                                                       ;; OPTIONAL
  (unbind-key "C-j" emmet2-mode-map)                            ;; Unbind the default expand key
  (define-key emmet2-mode-map (kbd "C-c C-.") 'emmet2-expand))  ;; Bind custom expand key
#+end_src
* Direnv
#+begin_src emacs-lisp
;; (setup (:straight direnv)
;; 	(direnv-mode))

(use-package envrc
  :straight t
  :hook (after-init . dw/maybe-enable-envrc-global-mode)
  :config
  (defun dw/maybe-enable-envrc-global-mode ()
    "Enable `envrc-global-mode' if `direnv' is installed."
    (when (executable-find "direnv")
      (envrc-global-mode)))

  (with-eval-after-load 'envrc
    (define-key envrc-mode-map (kbd "C-c e") 'envrc-command-map)))
#+end_src
* Term/Shells
** Vterm
#+begin_src emacs-lisp
;; Copy from https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-shell.el
;; Better term
;; @see https://github.com/akermu/emacs-libvterm#installation
(use-package vterm
  :straight t
  :commands (vterm vterm-posframe-toggle)
  :bind ("C-c `" . vterm-posframe-toggle)
  :custom
  (vterm-max-scrollback 10000)
  :config
  (with-no-warnings
    (when (posframe-workable-p)
      (defvar vterm-posframe--frame nil)
      (defun vterm-posframe-toggle ()
	"Toggle `vterm' child frame."
	(interactive)
	(let ((buffer (vterm--internal #'ignore 100))
	      (width  (max 80 (/ (frame-width) 2)))
	      (height (/ (frame-height) 2)))
	  (if (frame-live-p vterm-posframe--frame)
	      (progn
		(posframe-delete-frame buffer)
		(setq vterm-posframe--frame nil))
	    (setq vterm-posframe--frame
		  (posframe-show
		   buffer
		   :poshandler #'posframe-poshandler-frame-center
		   :left-fringe 8
		   :right-fringe 8
		   :width width
		   :height height
		   :min-width width
		   :min-height height
		   :internal-border-width 3
		   :internal-border-color (face-foreground 'font-lock-comment-face nil t)
		   :background-color (face-background 'tooltip nil t)
		   :accept-focus t))))))))

(use-package multi-vterm
  :straight t
  :after vterm)
#+end_src
** eshell
#+begin_src emacs-lisp
(use-package eshell
  :commands (eshell)
  :config
  (setq eshell-directory-name "~/.dotfiles/Emacs/eshell/")
  
  (if (executable-find "exa")
      (defalias 'eshell/ls 'exa)))

(use-package eshell-prompt-extras
  :straight t
  :after esh-opt
  :config
  (autoload 'epe-theme-lambda "eshell-prompt-extras")
  (setq eshell-highlight-prompt nil
	eshell-prompt-function 'epe-theme-lambda))

(use-package eshell-up
  :straight t
  :after esh-mode
  :custom
  (eshell-up-ignore-case nil))

(use-package eshell-syntax-highlighting
  :straight t
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(use-package esh-help
  :straight esh-help
  :after esh-mode
  :config
  (setup-esh-help-eldoc))
#+end_src
* Git
** Magit
#+begin_src emacs-lisp
(use-package magit
  :straight t
  :commands (magit magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Magit-Delta
Highlight diff by using delta
#+begin_src emacs-lisp
(use-package magit-delta
  :hook magit-mode)
#+end_src

* Pass
** pass-store.el
#+begin_src emacs-lisp
(use-package password-store
  :straight t
  :commands (password-store-copy)
  :custom
  (password-store-password-length 12))
#+end_src
* PDF Tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :defer t)
#+end_src
* Leetcode
#+begin_src emacs-lisp
(use-package leetcode
  :straight t
  :commands (leetcode)
  :custom
  (leetcode-prefer-language "typescript")
  (leetcode-prefer-sql "mysql")
  (leetcode-save-solutions t)
  (leetcode-directory "~/Documents/leetcode"))
#+end_src
* COMMENT EAF
#+begin_src emacs-lisp
(use-package eaf
  :load-path "/Users/dez/.dotfiles/Emacs/site-lisp/emacs-application-framework/"
  :commands (eaf-search-it eaf-git)
  :custom
  (eaf-start-python-process-when-require nil)
  (eaf-browser-continue-where-left-off t)
  (eaf-browser-enable-adblocker t)
  (browse-url-browser-function 'eaf-open-browser)
  :config
  (require 'eaf-browser)
  (require 'eaf-git)
  (defalias 'browse-web #'eaf-open-browser))
#+end_src
* Tramp
#+begin_src emacs-lisp
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
(setq tramp-default-method "ssh"
      tramp-default-user "wangpe90"
      tramp-default-host "dh2026pc25.utm.utoronto.ca")
(setq tramp-auto-save-directory temporary-file-directory
      backup-directory-alist (list (cons tramp-file-name-regexp nil)))
#+end_src
* IRC
#+begin_src emacs-lisp
(setq erc-server "irc.libera.chat"
      erc-nick "dezzw"    ; Change this!
      erc-user-full-name "Desmond Wang"  ; And this!
      erc-track-shorten-start 8
      erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
      erc-kill-buffer-on-part t
      erc-auto-query 'bury)

(use-package circe
  :straight t
  :commands (circe)
  :config
  (setq circe-network-options
	'(("irc.libera.chat"
           :tls t
	   :port 6697
           :nick "dezzw"
	   :sasl-username "dezzw"
	   :sasl-password "Irc0x577063"
           :channels ("#emacs-circe")))))
#+end_src
