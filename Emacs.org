#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
* Lazy Load (by Laszcat)
#+begin_src emacs-lisp
(let (;; 加载的时候临时增大`gc-cons-threshold'以加速启动速度。
      (gc-cons-threshold most-positive-fixnum)
      ;; 清空避免加载远程文件的时候分析文件。
      (file-name-handler-alist nil))

    ;; Emacs配置文件内容写到下面.
#+end_src
* Package System Setup
Set up basic package sources from *melpa* and use =use-package= as a package management tool
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
* General Setting
** Start Up Setting
Basic settings about the gui of the emacs
#+begin_src emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)

(menu-bar-mode -1)            ; Disable the menu bar

(setq ring-bell-function 'ignore)
#+end_src 
** Exact Path on MacOs
The package is help emacs to find exact path in the shell 
#+begin_src emacs-lisp
;; Find Executable Path on OS X
(use-package exec-path-from-shell
  ;; :init
  ;; (when (memq window-system '(mac ns))
  ;;   (exec-path-from-shell-initialize))
  :config
  (use-package cache-path-from-shell
    :load-path "~/.emacs.d/site-packages/cache-path-from-shell/")
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
  )
#+end_src
** Stop Backup and "Auto-Save"
Stop backup and auto-save (save as a backup) made by emacs
#+begin_src emacs-lisp
;; 关闭备份
(setq make-backup-files nil
      auto-save-default nil)
#+end_src
** Stop Auto-Change Vertical Scroll Size
#+begin_src emacs-lisp
(setq auto-window-vscroll nil)
#+end_src
** Set Delete Selection Mode
Make the selected parts be deletable
#+begin_src emacs-lisp
;; set delete selection mode
(delete-selection-mode t)
#+end_src
** Auto-Tangle emacs.org File
Tangle (form a new file) on save
#+begin_src emacs-lisp
;; Since we don't want to disable org-confirm-babel-evaluate all
;; of the time, do it around the after-save-hook
(defun dw/org-babel-tangle-dont-ask ()
  ;; Dynamic scoping to the rescue
  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle)))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask
                                              'run-at-end 'only-in-org-mode)))
#+end_src
** Auto-Reverting Changed Files
Auto allow the outside changes
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src
** Auto-Saving Changed Files
The package make emacs auto save the files
#+begin_src emacs-lisp
(use-package super-save
  :defer 1
  :diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+end_src
** Higher memory/garbage for lsp
Make lsp more smooth
#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
#+end_src
** Increase the amount of data which Emacs reads from the process
Same as above
#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
* UI Envirment Setup
** Frame Transparency and Maximize Windows
#+begin_src emacs-lisp
;; Set frame transparency and maximize windows by default.

(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
** Line Number
#+begin_src emacs-lisp
;; Enalbe column number
(column-number-mode)

;; Enable liner number
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
		vterm-mode-hook
		shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Fonts
#+begin_src emacs-lisp
;; set font
(set-face-attribute 'default nil :font "Jetbrains Mono" :height 140)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Jetbrains Mono" :height 140)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height 175 :weight 'regular)
#+end_src
** Icons Support 
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
** Themes
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-one t))
#+end_src
** Modeline 
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-env-version t))
#+end_src
** Dashbard
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    ;; Set the title
    (setq dashboard-banner-logo-title nil)
    ;; Set the banner
    (setq dashboard-startup-banner "~/.emacs.d/dashboard/banner.txt")
    (setq dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t))
#+end_src
* Keyboaed Bindings 
** Make ESC as QUIT
#+begin_src emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Keybindings by general.el
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)

  (general-create-definer dw/leader-key-def
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer dw/ctrl-c-keys
    :prefix "C-c"))
#+end_src
** Evil Mode
#+begin_src emacs-lisp
(defun dw/evil-hook ()
  (dolist (mode '(custom-mode
                  eshell-mode
		  vterm-mode
                  term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  :config
  (add-hook 'evil-mode-hook 'dw/evil-hook)
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :custom
  (evil-collection-outline-bind-tab-p nil)
  :config
  (evil-collection-init))
#+end_src
** Evil Cursor Changer (Terminal)
#+begin_src emacs-lisp
(unless (display-graphic-p)
  (use-package evil-terminal-cursor-changer
    :ensure t
    :init
    (evil-terminal-cursor-changer-activate)
    :config
     (setq evil-motion-state-cursor 'box)  ; █
     (setq evil-visual-state-cursor 'box)  ; █
     (setq evil-normal-state-cursor 'box)  ; █
     (setq evil-insert-state-cursor 'bar)  ; ⎸
     (setq evil-emacs-state-cursor  'hbar) ; _
     )
  )
#+end_src
** Keybinding Panel (which-key)
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src
* Org Mode
** Org Babel Browser
Add *HTML* for =org-babel=
#+begin_src emacs-lisp
(use-package ob-browser)
#+end_src
** Config Basic Org mode
#+begin_src emacs-lisp
(defun dw/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :defer t
  :hook (org-mode . dw/org-mode-setup)
  :config
  (setq org-html-head-include-default-style nil)
  (setq org-ellipsis " ▾"
	org-hide-emphasis-markers nil
	org-src-fontify-natively t
	org-src-tab-acts-natively t
	org-edit-src-content-indentation 0
	org-hide-block-startup nil
	org-src-preserve-indentation nil
	org-startup-folded 'content
	org-cycle-separator-lines 2)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  
  (setq org-html-htmlize-output-type nil)
  
  ;; Edited from http://emacs.stackexchange.com/a/9838
  (defun rasmus/org-html-wrap-blocks-in-code (src backend info)
  "Wrap a source block in <pre><code class=\"lang\">.</code></pre>"
  (when (org-export-derived-backend-p backend 'html)
    (replace-regexp-in-string
     "\\(</pre>\\)" "</code>\n\\1"
     (replace-regexp-in-string "<pre class=\"src src-\\([^\"]*?\\)\">"
                               "<pre>\n<code class=\"\\1\">" src))))
  (require 'ox-html)
  (add-to-list 'org-export-filter-src-block-functions
               'rasmus/org-html-wrap-blocks-in-code)

  ;; (setq org-latex-to-pdf-process
  ;;          '("xelatex -shell-escape -interaction nonstopmode %f"))

  (setq org-latex-to-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  ;; 生成PDF后清理辅助文件
  ;; https://answer-id.com/53623039
  (setq org-latex-logfiles-extensions 
    (quote ("lof" "lot" "tex~" "tex" "aux" 
      "idx" "log" "out" "toc" "nav" 
      "snm" "vrb" "dvi" "fdb_latexmk" 
      "blg" "brf" "fls" "entoc" "ps" 
      "spl" "bbl" "xdv")))

  ;; 图片默认宽度
  (setq org-image-actual-width '(300))

  (setq org-export-with-sub-superscripts nil)

  ;; 不要自动创建备份文件
  (setq make-backup-files nil)

  ;; elegantpaper.cls
  ;; https://github.com/ElegantLaTeX/ElegantPaper/blob/master/elegantpaper.cls
  (with-eval-after-load 'ox-latex
  ;; http://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export
  ;; latexmk runs pdflatex/xelatex (whatever is specified) multiple times
  ;; automatically to resolve the cross-references.
  ; (setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
  (setq org-latex-listings t)
  (add-to-list 'org-latex-classes
		'("elegantpaper"
		  "\\documentclass[lang=en]{elegantpaper}
		  [NO-DEFAULT-PACKAGES]
		  [PACKAGES]
		  [EXTRA]"
		  ("\\section{%s}" . "\\section*{%s}")
		  ("\\subsection{%s}" . "\\subsection*{%s}")
		  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		  ("\\paragraph{%s}" . "\\paragraph*{%s}")
		  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (setq org-latex-listings 'minted)
  (add-to-list 'org-latex-packages-alist '("" "minted"))))



(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (latex . t)
   (java . t)
   (C . t)
   (js . t)
   (css . t)
   (browser . t)
   (R . t)
   (ditaa . t)
   (python . t)))

 (setq org-confirm-babel-evaluate nil)
 (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src
** Bullets
#+begin_src emacs-lisp
;; change bullets for headings
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

;; Replace list hyphen(-) with dot(.)
;; (font-lock-add-keywords 'org-mode
;;                         '(("^ *\\([-]\\) "
;;                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src
** Fonts
#+begin_src emacs-lisp
;; Make sure org faces is available
(require 'org-faces)
;; Make sure org-indent face is available
(require 'org-indent)
;; Set Size and Fonts for Headings
(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

#+end_src
** Src Block Templates
#+begin_src emacs-lisp
;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("java" . "src java"))
(add-to-list 'org-structure-template-alist '("srcc" . "src C"))
(add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("js" . "src js"))
(add-to-list 'org-structure-template-alist '("css" . "src css"))
(add-to-list 'org-structure-template-alist '("html" . "src browser :out"))
(add-to-list 'org-structure-template-alist '("py" . "src python :results output :exports both"))
(add-to-list 'org-structure-template-alist '("la" . "latex"))
(add-to-list 'org-structure-template-alist '("r" . "src R"))
(add-to-list 'org-structure-template-alist '("d" . "src ditaa :file ../images/.png :cmdline -E"))
#+end_src
** Set Margins for Modes
#+begin_src emacs-lisp
(defun dw/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :defer t
  :hook (org-mode . dw/org-mode-visual-fill))
#+end_src
** Disable the Actual Width of a Picture
#+begin_src emacs-lisp
(setq org-image-actual-width nil)
#+end_src
** Org download
#+begin_src emacs-lisp
(use-package org-download
	  :ensure t 
	  ;;将截屏功能绑定到快捷键：Ctrl + Shift + Y
	  :bind ("C-S-y" . org-download-screenshot)
	  :config
	  (require 'org-download)
	  ;; Drag and drop to Dired
	  (add-hook 'dired-mode-hook 'org-download-enable))
#+end_src
** Auto Show Images in Org
#+begin_src emacs-lisp
(auto-image-file-mode t) 
#+end_src
** COMMENT Convert to HTML
#+begin_src emacs-lisp
(use-package htmlize)
#+end_src
** COMMENT Latex Setting (based on Org)
#+begin_src emacs-lisp
;; (require 'ox-latex)
;; (setq org-latex-compiler "xelatex")
;; (setq org-latex-pdf-process
;; 	'("xelatex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"))

;; (add-to-list 'org-latex-packages-alist '("" "minted"))
;; (setq org-latex-listings 'minted)
;; (setq org-latex-minted-options
;;       '(
;; 	("linenos=true")
;; ;;	("mathescape=true")
;; ;;        ("numbersep=5pt")
;; ;;        ("gobble=2")
;; 	("frame=lines")
;; ;;        ("framesep=2mm")
;; 	))

(with-eval-after-load 'ox-latex
 ;; http://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export
 ;; latexmk runs pdflatex/xelatex (whatever is specified) multiple times
 ;; automatically to resolve the cross-references.
 (setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
 (add-to-list 'org-latex-classes
               '("elegantpaper"
                 "\\documentclass[lang=cn]{elegantpaper}
                 [NO-DEFAULT-PACKAGES]
                 [PACKAGES]
                 [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (setq org-latex-listings 'minted)
  (add-to-list 'org-latex-packages-alist '("" "minted")))
#+end_src
** CDLaTex
#+begin_src emacs-lisp
(use-package cdlatex
  :hook (org-mode . org-cdlatex-mode)
  :config
  (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex))
#+end_src
** Org Latex Impatient
#+begin_src emacs-lisp
(use-package org-latex-impatient
  :defer t
  :hook (org-mode . org-latex-impatient-mode)
  :init
  (setq org-latex-impatient-tex2svg-bin
        ;; location of tex2svg executable
        "~/.nvm/versions/node/v15.5.1/lib/node_modules/mathjax-node-cli/bin/tex2svg")
  :custom
  (org-latex-impatient-posframe-position-handler 'posframe-poshandler-point-bottom-left-corner))
#+end_src
** Org Roam
#+begin_src emacs-lisp
(use-package org-roam
      :ensure t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/Documents/Wiki")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate))))
#+end_src
** Org Roam Server
#+begin_src emacs-lisp
(use-package org-roam-server
  :ensure t
  :after org-mode
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 9090
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src
** Properly Align Tables
#+begin_src emacs-lisp
(use-package valign
  :hook (org-mode . valign-mode))
#+end_src
* Window Manage
** ace-window
Use =C-x o= two active =ace-window= to swap the windows (less than two windows), or using following arguments (more than two):
- =x= - delete window
- =m= - swap windows
- =M= - move window
- =c= - copy window
- =j= - select buffer
- =n= - select the previous window
- =u= - select buffer in the other window
- =c= - split window fairly, either vertically or horizontally
- =v= - split window vertically
- =b= - split window horizontally
- =o= - maximize current window
- =?= - show these command bindings
#+begin_src emacs-lisp
(use-package ace-window
  :bind ("C-x o" . ace-window)
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
* File Manage
** dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

(use-package dired-single)

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))
#+end_src
* Markdown 
** Mardown Mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . down-mode)
         ("\\.jown\\'" . jown-mode))
  :init (setq jown-command "multijown"))
#+end_src
** Edit Code Block
#+begin_src emacs-lisp
(use-package edit-indirect)
#+end_src

* Navigation
** Ivy Mode
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :init
  (ivy-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-switch-buffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-histor))
  :config
  (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^


(dw/leader-key-def
  "SPC" 'counsel-M-x)
#+end_src
** Ivy Rich
#+begin_src emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src
** Ivy Posframe
#+begin_src emacs-lisp
  (use-package ivy-posframe
   :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (ivy-posframe-mode 1))
#+end_src
** Helpful Function Description
#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
** Project Management
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~Documents/Projects/Code")
    (setq projectile-project-search-path '("~Documents/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))
#+end_src
* Better Editing
** Evil Surround
- Add surrounding
  - In visual-state with =S<textobject>= or =gS<textobject>=. Or in normal-state with =ys<textobject>= or =yS<textobject>=.
- Change surroundinf
  - =cs<old-textobject><new-textobject>=
- Delete surrounding
  - =ds<textobject>=
#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src
** Evil Escape
#+begin_src emacs-lisp
(use-package evil-escape
  :after evil
  :config
  (evil-escape-mode t)
  (setq-default evil-escape-key-sequence "jk"))
#+end_src
** Comment and Uncomment
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :after evil
  :config
  (global-set-key (kbd "M-;") 'evilnc-comment-or-uncomment-lines)
  (global-set-key (kbd "C-c l") 'evilnc-quick-comment-or-uncomment-to-the-line)
  (global-set-key (kbd "C-c c") 'evilnc-copy-and-comment-lines)
  (global-set-key (kbd "C-c p") 'evilnc-comment-or-uncomment-paragraphs))
#+end_src
** COMMENT Evil Multiple Cursors
#+begin_src emacs-lisp
(use-package evil-mc
  :config
  (global-evil-mc-mode  1))


(dw/leader-key-def
  "m"  '(:ignore t :which-key "evil-mc")
  "ma" 'evil-mc-make-all-cursors
  "mu" 'evil-mc-undo-all-cursors
  "mmn" 'evil-mc-make-and-goto-next-match
  "mmp" 'evil-mc-make-and-goto-prev-match
  "mkn" 'evil-mc-skip-and-goto-next-match
  "mkp" 'evil-mc-skip-and-goto-prev-match
  "mI" 'evil-mc-make-cursor-in-visual-selection-beg
  "mA" 'evil-mc-make-cursor-in-visual-selection-end)
#+end_src
** Color Rg
#+begin_src emacs-lisp
(use-package color-rg
  :load-path "~/.emacs.d/site-packages/color-rg/")

(dw/leader-key-def
  "c" '(:ignore t :which-key "color-rg")
  "cid" 'color-rg-search-input
  "csd" 'color-rg-search-symbol
  "cip" 'color-rg-search-input-in-project
  "cic" 'color-rg-search-input-in-current-file
  "cit" 'color-rg-search-project-with-type)
#+end_src
** Multiple Cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind
  (("C-S-c C-S-c" . 'mc/edit-lines)
   ("C->" . 'mc/mark-next-like-this)
   ("C-<" . 'mc/mark-previous-like-this)
   ("C-S-c C-<" . 'mc/mark-all-like-this)))
#+end_src
* Development
** Term-mode
#+begin_src emacs-lisp
(use-package term
  :config
  (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
  ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

  ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
  ;; (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  )

(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))
#+end_src
** Vterm
Vitual Termianl
#+begin_src emacs-lisp
(use-package vterm
  :commands vterm
  :config
  ;; (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))
#+end_src
** Eshell
#+begin_src emacs-lisp
(defun dw/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt)

(use-package eshell
  :hook (eshell-first-time-mode . dw/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("zsh" "vim")))

  (eshell-git-prompt-use-theme 'powerline))
#+end_src
** Languages
*** LSP Mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook ((sh-mode typescript-mode js-mode web-mode python-mode css-mode Latex-mode TeX-latex-mode) . lsp)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t)
  (setq lsp-headerline-breadcrumb-enable-symbol-numbers t)
  (setq lsp-log-io t)
  (setq lsp-idle-delay 0.500)
  (setq lsp-completion-provider :capf))

(dw/leader-key-def
  "l"  '(:ignore t :which-key "lsp")
  "ld" 'xref-find-definitions
  "lr" 'xref-find-references
  "ln" 'lsp-ui-find-next-reference
  "lp" 'lsp-ui-find-prev-reference
  "ls" 'counsel-imenu
  "le" 'lsp-ui-flycheck-list
  "lS" 'lsp-ui-sideline-mode
  "lX" 'lsp-execute-code-action)

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-sideline-enable t)
  (setq lsp-ui-doc-position 'bottom))

(use-package lsp-ivy 
  :commands lsp-ivy-workspace-symbol)

(use-package lsp-treemacs
  :commands lsp-treemacs-errors-list)
#+end_src
*** TypeScript/JavaScript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2))

  (defun dw/set-js-indentation ()
    (setq js-indent-level 2)
    (setq evil-shift-width js-indent-level)
    (setq-default tab-width 2))

  (use-package js2-mode
    :mode "\\.jsx?\\'")

  ;; Don't use built-in syntax checking
  (setq js2-mode-show-strict-warnings nil)

  ;; Set up proper indentation in JavaScript and JSON files
  (add-hook 'js2-mode-hook #'dw/set-js-indentation)
  (add-hook 'json-mode-hook #'dw/set-js-indentation)

  (use-package prettier-js
    :hook ((js2-mode . prettier-js-mode)
           (typescript-mode . prettier-js-mode))
    :config
    (setq prettier-js-show-errors nil))
#+end_src
*** HTML and CSS
#+begin_src emacs-lisp
(use-package web-mode
  :mode "\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")

;; Impatient Html File
(use-package impatient-mode)

;; Preview the html file
(use-package skewer-mode
  :config
  (add-hook 'js2-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'html-mode-hook 'skewer-html-mode)
  (add-hook 'web-mode-hook 'skewer-html-mode))
#+end_src
*** Python
#+begin_src emacs-lisp
(use-package lsp-pyright
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))) 
#+end_src
*** Latex
#+begin_src emacs-lisp
(use-package lsp-latex
  :config
  (add-hook 'tex-mode-hook 'lsp)
  (add-hook 'latex-mode-hook 'lsp)
  (add-hook 'Latex-mode-hook 'lsp)
  (add-hook 'TeX-latex-mode-hook 'lsp))
#+end_src
*** Swift
#+begin_src emacs-lisp
(use-package lsp-sourcekit
  :after lsp-mode
  :config
  (setq lsp-sourcekit-executable "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp"))

(use-package swift-mode
  :hook (swift-mode . (lambda () (lsp))))
#+end_src
*** R
#+begin_src emacs-lisp
(use-package ess)
#+end_src
** Completion
*** Company Mode
#+begin_src emacs-lisp
(use-package company 
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind 
  (:map company-active-map
        ("<tab>". company-complete-selection))
  (:map lsp-mode-map
        ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-tooltip-align-annotations t)
  ;; Number the candidates (use M-1, M-2 etc to select completions)
  (company-show-numbers t)
  ;; starts with 1 character
  (company-minimum-prefix-length 1)
  ;; Trigger completion immediately
  (company-idle-delay 0)
  :config
  ;; (setq global-company-mode t)
  ;;Completion based on AI
  (use-package company-tabnine
    :after lsp-mode
    :config
    (push '(company-capf :with company-tabnine :separate) company-backends))
  )
#+end_src
*** Company Box
#+begin_src emacs-lisp
;; Add UI for Company
(use-package company-box
  :hook (company-mode . company-box-mode)
  :config
  (setq company-box-icons-alist 'company-box-icons-all-the-icons))

#+end_src
*** Syntax checking with Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))
#+end_src
*** Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :after prog-mode
  :hook (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all))

;; Snippets Collection
(use-package yasnippet-snippets)

;; auto insert
(use-package auto-yasnippet)

(dw/leader-key-def
  "a"  '(:ignore t :which-key "auto-snippets")
  "aw" 'aya-create
  "ay" 'aya-expand
  "ao" 'aya-open-line)
#+end_src
** Debug
*** dap-mode
#+begin_src emacs-lisp
;; dap debug tools
(use-package dap-mode
  :after lsp-mode
  :config
  (require 'dap-python)
  (setq dap-auto-configure-features '(sessions locals controls tooltip)))


(dw/leader-key-def
  "d"  '(:ignore t :which-key "dap debug")
  "dd" 'dap-debug
  "da" 'dap-breakpoint-add
  "dsc" 'dap-breakpoint-delete
  "dsc" 'dap-breakpoinnt-delete-all
  "di" 'dap-step-in
  "do" 'dap-step-out
  "dn" 'dap-next)
#+end_src
** Productivity
*** Smart Parens
#+begin_src emacs-lisp
(use-package smartparens
  :after prog-mode
  :hook (prog-mode . smartparens-mode))
#+end_src
*** Rainbow Brackets 
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :after prog-mode
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
*** Hungry Delete
#+begin_src emacs-lisp
(use-package hungry-delete
  :hook (prog-mode . hungry-delete-mode))
#+end_src
*** Indent Guide
#+begin_src emacs-lisp
(use-package indent-guide
  :after prog-mode
  :hook (prog-mode . indent-guide-mode))
#+end_src
*** Emmet
#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook (web-mode . emmet-mode))
#+end_src
*** Format All
#+begin_src emacs-lisp
(use-package format-all
  :after prog-mode)
#+end_src
** Git
*** Magit
#+begin_src emacs-lisp
(use-package magit
  :defer t
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package evil-magit
  :after magit)

;; Add a super-convenient global binding for magit-status since
;; I use it 8 million times a day
(global-set-key (kbd "C-M-;") 'magit-status)

(dw/leader-key-def
  "g"   '(:ignore t :which-key "git")
  "gs"  'magit-status
  "gd"  'magit-diff-unstaged
  "gc"  'magit-branch-or-checkout
  "gl"   '(:ignore t :which-key "log")
  "glc" 'magit-log-current
  "glf" 'magit-log-buffer-file
  "gb"  'magit-branch
  "gP"  'magit-push-current
  "gp"  'magit-pull-branch
  "gf"  'magit-fetch
  "gF"  'magit-fetch-all
  "gr"  'magit-rebase)
#+end_src
** Virtual Environment
*** pipenv
#+begin_src emacs-lisp
;; Enable to control pipenv in Emacs
(use-package pipenv
  :hook (python-mode . pipenv-mode)
  :init
  (setq
   pipenv-projectile-after-switch-function
   #'pipenv-projectile-after-switch-extended))
#+end_src
*** pyenv
#+begin_src emacs-lisp
(use-package pyenv-mode
  :hook (python-mode . pyenv-mode)) 


(dw/leader-key-def
  "p"  '(:ignore t :which-key "pyenv")
  "pp" 'pyenv-mode
  "ps" 'pyenv-mode-set
  "pu" 'pyenv-mode-unset
  "pr" 'run-python)

;; auto activates the virtual environment if .python-version exists
;;(use-package pyenv-mode-auto)
#+end_src
*** COMMENT shim
#+begin_src emacs-lisp
(use-package shim
  :load-path "~/.emacs.d/site-packages/shim/shim.el"
  :hook (python-mode . shim-mode)
  :config
  (shim-init-python))
#+end_src
*** auto-virtualenvwrapper
#+begin_src emacs-lisp
(use-package auto-virtualenvwrapper
  :hook 
  ((python-mode focus-in window-configuration-change) . auto-virtualenvwrapper-activate))
  ;; (add-hook 'python-mode-hook #'auto-virtualenvwrapper-activate)
  ;; (add-hook 'window-configuration-change-hook #'auto-virtualenvwrapper-activate)
  ;; (add-hook 'focus-in-hook #'auto-virtualenvwrapper-activate))
#+end_src
** Compilation
*** quickrun.el
#+begin_src emacs-lisp
  (use-package quickrun
    :after prog-mode
    :config
    ;; set python3 as default
    (quickrun-add-command "python" 
      '((:command . "python3") 
        (:exec . "%c %s") 
        (:tempfile . nil)) 
      :default "python"))

  ;; Set up Keybindings
    (dw/leader-key-def
    "r"  '(:ignore t :which-key "quickrun")
    "rr" 'quickrun
    "ra" 'quickrun-with-arg
    "rs" 'quickrun-shell
    "rc" 'quickrun-compile-only
    "re" 'quickrun-region)
#+end_src
* Finish Lazy load
#+begin_src emacs-lisp
)
#+end_src

